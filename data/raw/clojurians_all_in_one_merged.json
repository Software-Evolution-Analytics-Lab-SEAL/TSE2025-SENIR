[
    {
        "team_domain": "Clojurians",
        "channel_name": "clojure",
        "month": "Aug2020-Oct2020",
        "start_date": "2020-08-01T14:31:40.017000",
        "end_date": "2020-10-25T03:22:35.633000",
        "messages": [
            {
                "conversation_id": "1",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-08-01T14:31:40.017000",
                        "user": "Aleck",
                        "text": "do you guys know of a clojure standalone db lib ?"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-08-01T14:57:54.613000",
                        "user": "Tashon",
                        "text": "Wdym by standalone"
                    }
                ]
            },
            {
                "conversation_id": "2",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-08-01T21:39:16.829000",
                        "user": "Oxford",
                        "text": "also what db type"
                    }
                ]
            },
            {
                "conversation_id": "3",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-08-02T09:28:39.949000",
                        "user": "Aleck",
                        "text": "@Johnny I'm planning to write a small application in a sensitive office floor on which I probably wont be able to install mysql / postgres or similar you see ?"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-08-02T09:28:59.911000",
                        "user": "Aleck",
                        "text": "so far all I have by default is java se 1.6"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-08-02T09:29:00.317000",
                        "user": "Tashon",
                        "text": "So you're looking for an embeddable database"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-08-02T09:29:12.266000",
                        "user": "Aleck",
                        "text": "yeah"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-08-02T09:29:26.797000",
                        "user": "Aleck",
                        "text": "and any persistent db is alright to me I'll manage"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-08-02T09:29:49.836000",
                        "user": "Aleck",
                        "text": "I stepped on the line fetching clojure and core.logic jars"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-08-02T09:30:05.204000",
                        "user": "Tashon",
                        "text": "SQLite with next.jdbc would perhaps be an option"
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-08-02T09:30:05.461000",
                        "user": "Aleck",
                        "text": "(and sqlite binary too)"
                    },
                    {
                        "message_number": "9",
                        "ts": "2020-08-02T09:30:13.454000",
                        "user": "Tashon",
                        "text": "Or datahike which can be file based"
                    },
                    {
                        "message_number": "10",
                        "ts": "2020-08-02T09:31:36.492000",
                        "user": "Aleck",
                        "text": "I see next.jdbc has no external dependency which is good"
                    },
                    {
                        "message_number": "11",
                        "ts": "2020-08-02T09:31:50.106000",
                        "user": "Aleck",
                        "text": "the less jars the better I suppose"
                    },
                    {
                        "message_number": "12",
                        "ts": "2020-08-02T09:32:00.944000",
                        "user": "Tashon",
                        "text": "Well you'd need the sqlite driver additionally"
                    },
                    {
                        "message_number": "13",
                        "ts": "2020-08-02T09:32:28.555000",
                        "user": "Aleck",
                        "text": "damn yeah I forgot"
                    },
                    {
                        "message_number": "14",
                        "ts": "2020-08-02T09:32:58.744000",
                        "user": "Aleck",
                        "text": "unless I develop it locally and make a single uberjar with whatever is required"
                    },
                    {
                        "message_number": "15",
                        "ts": "2020-08-02T09:33:59.546000",
                        "user": "Aleck",
                        "text": "I think I will go with datahike"
                    },
                    {
                        "message_number": "16",
                        "ts": "2020-08-02T09:34:32.953000",
                        "user": "Aleck",
                        "text": "it's not a large thing ~10 users low frequency and low amounts of data"
                    },
                    {
                        "message_number": "17",
                        "ts": "2020-08-02T09:37:13.447000",
                        "user": "Tashon",
                        "text": "Then it may also be sufficient to just `pr` clojure data structures directly to files"
                    },
                    {
                        "message_number": "18",
                        "ts": "2020-08-02T09:46:31.690000",
                        "user": "Aleck",
                        "text": "as in zero libs ?"
                    },
                    {
                        "message_number": "19",
                        "ts": "2020-08-02T09:46:46.292000",
                        "user": "Aleck",
                        "text": "I like the idea of learning datalog so datahike appeals to me"
                    },
                    {
                        "message_number": "20",
                        "ts": "2020-08-02T10:01:08.631000",
                        "user": "Tashon",
                        "text": "> as in zero libs ?@agumonkey yes"
                    },
                    {
                        "message_number": "21",
                        "ts": "2020-08-02T10:01:31.879000",
                        "user": "Tashon",
                        "text": "on such a low scale pretty much any database is overkill"
                    },
                    {
                        "message_number": "22",
                        "ts": "2020-08-02T10:01:45.124000",
                        "user": "Aleck",
                        "text": "but I need history"
                    },
                    {
                        "message_number": "23",
                        "ts": "2020-08-02T10:01:49.072000",
                        "user": "Aleck",
                        "text": "and datahike has that built in"
                    },
                    {
                        "message_number": "24",
                        "ts": "2020-08-02T10:01:53.992000",
                        "user": "Tashon",
                        "text": "but if you wanna learn datalog and it's in the range of your possibilities then go for it"
                    },
                    {
                        "message_number": "25",
                        "ts": "2020-08-02T10:02:23.121000",
                        "user": "Aleck",
                        "text": "(I didn't know that before I read the github intro)"
                    },
                    {
                        "message_number": "26",
                        "ts": "2020-08-02T10:18:07.262000",
                        "user": "Tashon",
                        "text": "http://www.learndatalogtoday.org/"
                    },
                    {
                        "message_number": "27",
                        "ts": "2020-08-02T10:18:30.312000",
                        "user": "Tashon",
                        "text": "recommendable"
                    }
                ]
            },
            {
                "conversation_id": "4",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-08-02T14:23:13.562000",
                        "user": "Emersen",
                        "text": "java 1.6 isn't supported past clojure 1.7"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-08-02T14:23:56.443000",
                        "user": "Emersen",
                        "text": "for pure clojure look at datahike if you're willing to learn datalog"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-08-02T14:24:41.775000",
                        "user": "Emersen",
                        "text": "i see johnny mentioned it already"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-08-02T14:26:25.592000",
                        "user": "Tashon",
                        "text": "It's kinda mindblowing to me that clojure actually used to work with java 6"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-08-02T14:26:41.797000",
                        "user": "Tashon",
                        "text": "Considering `invokedynamic` didn't exist yet"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-08-02T14:27:13.772000",
                        "user": "Emersen",
                        "text": "yeah invokedynamic support was only added in clojure 1.8"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-08-04T11:47:28.155000",
                        "user": "Kaled",
                        "text": "...I didn't know that exists. Neat"
                    }
                ]
            },
            {
                "conversation_id": "5",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-08-04T11:34:30.881000",
                        "user": "Tamsyn",
                        "text": "Hi I made a function and I want to know does this idea have a name or even a builtin function in Clojure?```(defn iteratecumulative [start coll] (cons start (lazyseq (iteratecumulative (+ start (first coll)) (rest coll)))))```use```misc.core> (take 7 (iteratecumulative 10 (cycle (0 1))))(10 10 11 11 12 12 13)```"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-08-04T11:37:45.977000",
                        "user": "Tamsyn",
                        "text": "I have tried to use the regular reduce function with a lazy infinite collection but it doesn't work"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-08-04T11:47:07.333000",
                        "user": "Tamsyn",
                        "text": "OMG I found it. As always when I ask a question somewhereIt is called `reductions````misc.core> (take 7 (reductions + 10 (cycle (0 1))))(10 10 11 11 12 12 13)```"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-08-04T11:47:58.028000",
                        "user": "Tashon",
                        "text": "ah yeah great function. Have used it in the past"
                    }
                ]
            },
            {
                "conversation_id": "6",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-08-10T20:58:15.413000",
                        "user": "Mehana",
                        "text": "Hello i have a question :Code :```clojure(def z (reduce str (take 3 (cycle [\".\"])))) (println z\"\"z)```Console :```...  ...```How do you not have a space between the ... and the  ? Thk"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-08-10T20:59:34.487000",
                        "user": "Jayansh",
                        "text": "```user=> (println ...  ...\")...  ...niluser=> (println (str ...  ...\"))......nil```"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-08-10T21:00:21.409000",
                        "user": "Jayansh",
                        "text": "`println` takes multiple args and prints each of them separated by spaces str takes multiple args and combines them into a single string without spaces."
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-08-10T21:00:42.371000",
                        "user": "Jayansh",
                        "text": "So make a single string using `str` and have `println` print that."
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-08-10T21:13:11.609000",
                        "user": "Mehana",
                        "text": "Ok Thanks ! And how can I add +2 to the variable ``l`` in this loop ?```clojure(def n 5) ; readline(def l 1)(loop [i n] (when (> i 0) (println i) (recur ( i 1)) ))```"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-08-10T21:20:46.651000",
                        "user": "Emersen",
                        "text": "so just use str"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-08-10T21:24:39.679000",
                        "user": "Mehana",
                        "text": "We have a funny little concept where we want to write a code allowing the creation of a tree in as many languages as possible : https://github.com/VirtualRoyaume/SapinAnd so I\\'m trying to do it in ClojureThe final result :```........................................```My actual code in Clojure :```clojure(def n 5) ; readline(def l 1)(loop [i n] (when (> i 0) (println i) (recur ( i 1)) )) (def z (reduce str (repeat n .\")))(println (str z  z))```"
                    }
                ]
            },
            {
                "conversation_id": "7",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-08-10T21:16:57.917000",
                        "user": "Tashon",
                        "text": "You shouldn't. Changing the value of a variable is not usually how you write clojure code (also `def` creates a global variable so it's even less suitable)"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-08-10T21:17:14.032000",
                        "user": "Tashon",
                        "text": "What are you trying to do?"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-08-10T21:20:25.050000",
                        "user": "Emersen",
                        "text": "println and the other print fubction insert spaces between their arguments"
                    }
                ]
            },
            {
                "conversation_id": "8",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-08-10T22:28:18.354000",
                        "user": "Naimah",
                        "text": "Are you looking for help? Based on your comment in the repo I'm wondering if you got frustrated or if you're still working on it or something else"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-08-10T22:31:53.636000",
                        "user": "Mehana",
                        "text": "The comment is for troll because I rage about the language with my friends but I'm still interested in it otherwise I wouldn't be here"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-08-10T22:40:21.017000",
                        "user": "Mehana",
                        "text": "```clojure(def n (Integer. (readline))) ; readline(loop [i n l 1] (when (> i 0) (def x (reduce str (repeat i .\"))) (println (str x (reduce str (repeat l \")) x)) (recur ( i 1) (+ l 2)) )) (def z (reduce str (repeat n .\")))(println (str z  z))```I finally got my script right but could I get some more information on that ? also def creates a global variable so it\\'s even less suitable  @Johnny And do you have any tips on how to improve my script ?"
                    }
                ]
            },
            {
                "conversation_id": "9",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-08-10T22:52:10.513000",
                        "user": "Tashon",
                        "text": "Yes there are a couple of things to note here"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-08-10T22:53:39.300000",
                        "user": "Tashon",
                        "text": "For the definition of `n` you could use `(read)` instead. This will read any valid clojure expression meaning it's not guaranteed to be an int but if you want to get it as short as possible"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-08-10T22:53:56.330000",
                        "user": "Tashon",
                        "text": "otherwise use `Integer/valueOf` instead of `Integer.`"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-08-10T22:54:12.137000",
                        "user": "Tashon",
                        "text": "those are just minor things"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-08-10T22:56:11.414000",
                        "user": "Tashon",
                        "text": "The code after that is written in an imperative style. Clojure is a functional language so instead of looping and modifying variables you should try to come up with a pure way to define the data you want to print out"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-08-10T22:57:03.541000",
                        "user": "Tashon",
                        "text": "you can write code like this in clojure but you're limited compared to real imperative languages"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-08-10T22:57:31.442000",
                        "user": "Tashon",
                        "text": "Similarily you can have local variables but you do not define them with `def`"
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-08-10T22:57:43.079000",
                        "user": "Tashon",
                        "text": "You use `let` for that"
                    },
                    {
                        "message_number": "9",
                        "ts": "2020-08-10T22:58:50.375000",
                        "user": "Tashon",
                        "text": "when writing clojure it's often best to start by defining functions."
                    },
                    {
                        "message_number": "10",
                        "ts": "2020-08-10T22:59:07.353000",
                        "user": "Tashon",
                        "text": "In this case you want to somehow make a tree given a size"
                    },
                    {
                        "message_number": "11",
                        "ts": "2020-08-10T22:59:30.734000",
                        "user": "Tashon",
                        "text": "so start with a function `tree` that takes one parameter `n` and returns the tree as a string"
                    },
                    {
                        "message_number": "12",
                        "ts": "2020-08-10T23:00:34.572000",
                        "user": "Tashon",
                        "text": "now you go from there"
                    },
                    {
                        "message_number": "13",
                        "ts": "2020-08-10T23:01:42.285000",
                        "user": "Tashon",
                        "text": "how do I make a tree? by making its individual lines. how do I make a line? by concatenating a padding string + some amount of tree characters + the same padding string"
                    },
                    {
                        "message_number": "14",
                        "ts": "2020-08-10T23:02:24.455000",
                        "user": "Tashon",
                        "text": "now you may realise that in order to make a line you only need to know the overall size and the amount of tree characters"
                    },
                    {
                        "message_number": "15",
                        "ts": "2020-08-10T23:02:55.428000",
                        "user": "Tashon",
                        "text": "so perhaps make another function `treeline` that takes `n` and `x` the amount of tree and returns a string"
                    },
                    {
                        "message_number": "16",
                        "ts": "2020-08-10T23:04:36.290000",
                        "user": "Tashon",
                        "text": "of course in order to come up with a truly functional solution you need to be somewhat familiar with that paradigm. If you don't know anything about that your current mindset will restrict you"
                    },
                    {
                        "message_number": "17",
                        "ts": "2020-08-10T23:10:03.357000",
                        "user": "Naimah",
                        "text": "a thing that I did was to create a vector for each line of the tree (e.g. [5 4 3 21]) using `range` and `vec` and then `conj`'ed 5 (or the input height) on the end of it so then I have the padding for all my lines and then I iterated over that seq printing out the tree line"
                    },
                    {
                        "message_number": "18",
                        "ts": "2020-08-10T23:15:25.884000",
                        "user": "Tashon",
                        "text": "I used range to generate the numbers of tree characters from top to bottom `concat`ing `1` for the stump at the end"
                    },
                    {
                        "message_number": "19",
                        "ts": "2020-08-10T23:16:06.260000",
                        "user": "Tashon",
                        "text": "And then creating the lines using `(quot ( n x) 2)` as the padding size"
                    }
                ]
            },
            {
                "conversation_id": "10",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-08-10T23:16:40.225000",
                        "user": "Mehana",
                        "text": "Wow"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-08-10T23:16:56.713000",
                        "user": "Mehana",
                        "text": "Wow"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-08-10T23:17:41.873000",
                        "user": "Mehana",
                        "text": "Thanks for your helping"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-08-10T23:22:54.082000",
                        "user": "Mehana",
                        "text": "I think I've improved my current code I take all your advices into account and I will try to apply them tomorrow.Clojure sounds very different from other languages !"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-08-10T23:23:14.131000",
                        "user": "Mehana",
                        "text": "```clojure(let [n (read)] (loop [i n l 1] (when (> i 0) (def x (reduce str (repeat i .\"))) (println (str x (reduce str (repeat l \")) x)) (recur ( i 1) (+ l 2)))) (let [z (reduce str (repeat n .\"))] (println (str z  z))))```"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-08-10T23:50:15.650000",
                        "user": "Naimah",
                        "text": "a couple things: I\\'d probably use `let` instead of `def` since let keeps the new binding (`x` in this case) scoped to its block you can replace `reduce str` with `apply str` to make one call to `str` with variadic arguments  it\\'s not going to make a huge difference in this case but this change should result in one string construction instead of a bunch of intermediate strings you could save a little repetition by `let`ting something like `let [strrep #(apply str (repeat %1 %2)]` and then you could call something like `(strrep i .\")`"
                    }
                ]
            },
            {
                "conversation_id": "11",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-08-11T00:23:18.890000",
                        "user": "Naimah",
                        "text": "... and on a larger scale it looks like the github repo you referenced is kind of taking one solution design and just translating syntax between languages as opposed to exploring the idioms of each language and trying to write the solution in a way that fits the general approach of that language. While that's not necessarily wrong it also doesn't really allow for a meaningful comparison between language features and what a lot of code from that language looks like. I guess it's aimed at being more of a code golf type thing but just understand that for at least some of those languages you wouldn't typically find a lot of production code written in the styles used"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-08-11T03:18:25.536000",
                        "user": "Naimah",
                        "text": "looks like there are a couple of email addresses that are findable on Google"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-08-11T03:19:47.854000",
                        "user": "Naimah",
                        "text": "with that said I feel like if someone did have it they might be reluctant to provide it to what is effectively a random stranger on the internet (assuming that if someone said yes the next question was going to be what is it?\")"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-08-11T03:24:37.860000",
                        "user": "Naimah",
                        "text": "if it's businessy you could probably email the general contact address at Cognitect"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-08-28T19:50:52.479000",
                        "user": "Gizella",
                        "text": "Ohh right forgot about the lambda shorthand \ud83d\ude05 Not that I couldn't have just used `(lambda (x)...` but this is much nicer"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-08-28T19:51:23.171000",
                        "user": "Gizella",
                        "text": "Oh wait I guess it would be `(fn (x)...` cause Clojure doesn't use `lambda`. Too used to Racket lol"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-08-29T00:33:45.109000",
                        "user": "Gizella",
                        "text": "Right whoops... Thanks!"
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-09-07T23:51:03.078000",
                        "user": "Gizella",
                        "text": "I\\'m trying to make a server with ring and reitit but I can\\'t seem to figure out how to enable CORS on the router. I have this code in my `handler.clj````clj(def app (ringcors/wrapcors (reititring/ringhandler (reititring/router [[\"/ {:get {:handler indexhandler}}] [\"/login {:get {:handler indexhandler}}] [\"/register {:get {:handler indexhandler}}] [\"/api {:get {:handler apihandler}}]] (reititring/routes (reititring/createresourcehandler {:path / :root /public\"}) (reititring/createdefaulthandler)) {:middleware middleware})) :accesscontrolalloworigin #\"\" :accesscontrolallowmethods [:get :put :post :patch :delete]))```And then in my `server.clj` I have```clj(ns fullstack.server (:require [fullstack.handler :refer [app]] [config.core :refer [env]] [ring.adapter.jetty :refer [runjetty]]) (:genclass))(defn main [& args] (let [port (or (env :port) 3000)] (runjetty #\\'app {:port port :join? false})))```Now this works perfectly as expected when I remove the call to `wrapcors` but as soon as I try making it accept CORS requests I get this error: ```java.lang.IllegalArgumentException: unable to require the namespace of the handler fullstack.handler/app for :ringhandler```I actually only really want the `/api` route to accept CORS requests but I couldn\\'t figure out how to do that so figured I\\'d just make them all accept CORS for now."
                    },
                    {
                        "message_number": "9",
                        "ts": "2020-09-07T23:51:37.241000",
                        "user": "Gizella",
                        "text": "Does anyone know how I could get this working so that I can accept CORS requests?"
                    }
                ]
            },
            {
                "conversation_id": "12",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-08-11T02:43:23.310000",
                        "user": "Kya",
                        "text": "Does anyone happen to know a good contact email for Rich Hickey?"
                    }
                ]
            },
            {
                "conversation_id": "13",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-08-28T19:27:28.876000",
                        "user": "Gizella",
                        "text": "How does function composition work when I\\'m trying to compose a function that takes multiple arguments? I\\'m trying to remove the dash from a kebabcase string and capitalize it so I need to compose the `replace` and capitalize functions. Currently I have it as just a regular function like this but I can\\'t figure out how to turn that into a function composition since `replace` takes the string as it\\'s first argument```clojure(defn kebab>label [string] (clojure.string/capitalize (replace string #\"  )))```"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-08-28T19:36:12.616000",
                        "user": "Emersen",
                        "text": "You could use `(comp str/capitalize #(replace % #\"  ))`"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-08-29T01:10:20.210000",
                        "user": "Kavian",
                        "text": "oh hi johnny"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-09-08T06:28:41.091000",
                        "user": "Crescent",
                        "text": "Look at reitit doc every route can have middleware option"
                    }
                ]
            },
            {
                "conversation_id": "14",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-08-28T20:35:58.831000",
                        "user": "Tashon",
                        "text": "Yeah it's `fn` and the arguments are a vector"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-08-29T11:27:29.758000",
                        "user": "Tashon",
                        "text": "Hi"
                    }
                ]
            },
            {
                "conversation_id": "15",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-09-10T03:02:33.737000",
                        "user": "Keenan",
                        "text": "Hi guys how are you? Can I ask some questions?"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-09-10T03:02:49.439000",
                        "user": "Keenan",
                        "text": "My name is Manuel"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-09-10T03:03:03.737000",
                        "user": "Keenan",
                        "text": "I am new to Clojure (I'm still reading a book about it I haven't worked on a project before. I come from the world of Elixir)"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-09-10T03:03:16.862000",
                        "user": "Keenan",
                        "text": "Right now I'm on a technologies choice process for a project that I'm going to start with a friend"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-09-10T03:03:31.493000",
                        "user": "Keenan",
                        "text": "A project related to the area of Civil EngineeringThere will be a lot of formulas Maths Calculus limits derivatives logarithms etc.My friend is a Civil Engineer so he puts the formulas and I put the programming part"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-09-10T03:03:45.830000",
                        "user": "Keenan",
                        "text": "Besides it will be necessary to visualize data in the form of 2D and 3D charts"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-09-10T03:04:00.494000",
                        "user": "Keenan",
                        "text": "We want at first to develop a desktop applicationI think Python does an excellent job on that field so it's not discarded I know Python and it would be easier for me"
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-09-10T03:04:18.819000",
                        "user": "Keenan",
                        "text": "I also thought on doing it with Qt which is an excellent framework for desktop applications. Besides C++ is a mature technology and I know that any issue that I face during development will have been solved by anyone in the past"
                    },
                    {
                        "message_number": "9",
                        "ts": "2020-09-10T03:04:32.856000",
                        "user": "Keenan",
                        "text": "The problem with C++ is that I'm not a big fan of OOP"
                    },
                    {
                        "message_number": "10",
                        "ts": "2020-09-10T03:04:45.596000",
                        "user": "Keenan",
                        "text": "But I want to do it with Clojure I want to consider Clojure because I think that it would be the best way for me to learn the language well. It's just that the lack of knowledge I have about Clojure doesn't let me take a decision on using or if it will solve my problem"
                    },
                    {
                        "message_number": "11",
                        "ts": "2020-09-10T03:04:58.550000",
                        "user": "Keenan",
                        "text": "I would like to ask please:"
                    },
                    {
                        "message_number": "12",
                        "ts": "2020-09-10T03:05:16.063000",
                        "user": "Keenan",
                        "text": "1. Which framework do you recommend to create the type of desktop application that I need? I've seen a lot of options but I don't know how to decide"
                    },
                    {
                        "message_number": "13",
                        "ts": "2020-09-10T03:05:30.588000",
                        "user": "Keenan",
                        "text": "2. Do you think Clojure have the right libraries for Data Visualization and for complex Math and Calculus topics like the ones I told you about?"
                    },
                    {
                        "message_number": "14",
                        "ts": "2020-09-10T03:05:44.573000",
                        "user": "Keenan",
                        "text": "3. Do those Data Visualization libraries if they exist can be used and integrated with the desktoporiented frameworks? Or it's just for web?"
                    },
                    {
                        "message_number": "15",
                        "ts": "2020-09-10T03:05:56.773000",
                        "user": "Keenan",
                        "text": "4. What should I do to export the final project to an installable executable .exe for Windows? Does that exist on Clojure? Can we do that? I use Linux but if the project goes well our clients would be using Windows mostly"
                    },
                    {
                        "message_number": "16",
                        "ts": "2020-09-10T03:06:10.814000",
                        "user": "Keenan",
                        "text": "5. Is there good documentation about these libraries in the case they exist?"
                    },
                    {
                        "message_number": "17",
                        "ts": "2020-09-10T03:06:24.472000",
                        "user": "Keenan",
                        "text": "I'd aprecciate if you could comment me your experience. I think Clojure is very powerful but I want to take a good decision on which technology to choose because at the end I don't wanna have a technical debt"
                    },
                    {
                        "message_number": "18",
                        "ts": "2020-09-10T03:26:01.334000",
                        "user": "Emersen",
                        "text": "Desktop applications aren't super common to be made in Clojure. You could use either electron with CLJS but that'd be a bit complicated. Halgari's fnfx is probably a good place to go if you want something really functional but also seesaw is quite good if you want something simple but closer to java's style."
                    },
                    {
                        "message_number": "19",
                        "ts": "2020-09-10T03:26:50.032000",
                        "user": "Emersen",
                        "text": "As for library support clojure has many libraries of its own yes but for nearly any topic that you can't find a good library for clojure you can find a decent library for java which you can use from clojure easily."
                    },
                    {
                        "message_number": "20",
                        "ts": "2020-09-10T03:27:35.194000",
                        "user": "Emersen",
                        "text": "As for making an installer java in general doesn't do that as their default manner of working with programs. Nearly any extractiontype installer will be decent for the resulting application however."
                    },
                    {
                        "message_number": "21",
                        "ts": "2020-09-10T15:22:33.679000",
                        "user": "Aja",
                        "text": "> Desktop applications aren't super common to be made in Clojure. You could use either electron with CLJS but that'd be a bit complicated. Halgari's fnfx is probably a good place to go if you want something really functional but also seesaw is quite good if you want something simple but closer to java's style.@srasu FWIW I would probably look at `cljfx` rather than `fnfx` if you're looking to do a JavaFX desktop app in Clojure. It's more modern and uses more recent design approaches."
                    },
                    {
                        "message_number": "22",
                        "ts": "2020-09-10T15:23:00.629000",
                        "user": "Emersen",
                        "text": "fair enough"
                    },
                    {
                        "message_number": "23",
                        "ts": "2020-09-10T15:23:33.106000",
                        "user": "Aja",
                        "text": "(background: I was working on a desktop app a few years ago and as part of that did a bit of work on `fnfx` to update it but then the project kind of fell apart so I haven't revisited since then)"
                    },
                    {
                        "message_number": "24",
                        "ts": "2020-09-12T05:34:53.031000",
                        "user": "Emersen",
                        "text": "If you have a decent editor it should Just Work\u2122\ufe0f otherwise figwheelmain has some instructions on how to switch repls"
                    },
                    {
                        "message_number": "25",
                        "ts": "2020-09-12T05:49:54.770000",
                        "user": "Emersen",
                        "text": "right but you should be able to integrate the two by having the figwheel lein plugin injected by cider and starting the repl that way."
                    }
                ]
            },
            {
                "conversation_id": "16",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-09-10T16:32:12.284000",
                        "user": "Oxford",
                        "text": "For analysis stuff pathera is a thing (https://github.com/alanmarazzi/panthera/) But given it's need for both a JVM and the python pandas libs it's nto going to be easy to package and distribute your code."
                    }
                ]
            },
            {
                "conversation_id": "17",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-09-10T19:31:59.971000",
                        "user": "Keenan",
                        "text": "Thanks guys. cljfx seems good. I'll check it out but I'll be developing on Python because what it can do. And as a side project I will try to replicate it on Clojure and see how it goes. Thanks a lot"
                    }
                ]
            },
            {
                "conversation_id": "18",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-09-12T04:00:32.851000",
                        "user": "Gizella",
                        "text": "Recently I've been working on a fullstack app using Reagent frontend and ring backend. I'm using figwheel to hotreload the frontend but I wanted to know how I can get reloading on the backend too. What I've been doing is using `lein repl` and then `(compile <whatever namespace>)` then restarting the server from the REPL but with figwheel I can't do that because it loads me into a ClojureScript repl and I can't seem to access functions in my Clojure namespaces. Is there a solution to this so I can get easy reloading on both my frontend and backend from the same repl?"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-09-12T05:41:40.840000",
                        "user": "Gizella",
                        "text": "I'm using Emacs \ud83e\udd37\\u200d\u2642\ufe0f What I've been doing is editing in Emacs with a seperate terminal that's got `lein fighwheel` running in it. But as far as I can tell it's not restarting the server when I make changes to it"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-09-12T15:15:13.745000",
                        "user": "Gizella",
                        "text": "Okay so I have to get cider to talk to the nREPL sessions started by figwheel?"
                    }
                ]
            },
            {
                "conversation_id": "19",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-09-12T15:43:25.254000",
                        "user": "Jayansh",
                        "text": "@nixin72 Yea that's one way. Another is to have cider start figwheel."
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-09-12T15:44:06.652000",
                        "user": "Jayansh",
                        "text": "If you use `ciderjackincljs` it'll ask you what cljs repl to launch and figwheel is one of the options."
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-09-12T15:44:29.598000",
                        "user": "Jayansh",
                        "text": "That will just connect it for cljs tho you need to connect it for clj separately."
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-09-12T15:45:06.438000",
                        "user": "Jayansh",
                        "text": "You can do `ciderjackinclj&cljs` tho. It'll launch one nrepl server connect to it twice (two repls) and then launch figwheel in one of them."
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-09-12T15:45:17.861000",
                        "user": "Jayansh",
                        "text": "One for clj one for cljs."
                    }
                ]
            },
            {
                "conversation_id": "20",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-09-16T00:32:35.707000",
                        "user": "Gizella",
                        "text": "Forgot to say I got it working now thank you! It does work now the problem with the hotreloading not working was because I'd commented out middleware stuff and that was included in what I was commenting out so I wasn't using `wrapreload`"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-09-16T02:55:10.843000",
                        "user": "Gizella",
                        "text": "How do I send POST parameters to a handler for a route in reitit? I\\'ve got it working sending query parameters in a GET request but I can\\'t figure out how to get it to work for POST parameters for some reason. I have this set of routes and handler:```clj(defn loginhandler [{{email email\"} :params}] (api/respond {:response hello\" :other email}))(def routes [\"/users\" [ {:get {:handler usershandler}}] [\"/login {:get {:handler loginhandler} :post {:handler loginhandler}}]])```And I\\'m making a request to `/users/login`. This is what my request looks like:```clj(> (js/fetch (util/apiurl endpoint) ; localhost:3449/users/login {:method method ; post  :contenttype application/json\" :body {:email test\"}}) (js/Promise.resolve) (.then #(.json %)) (.then callback)) ; function that just console.logs in this case ```I\\'m trying to just send a JSON payload but the value of email in my handler is always null. If I change the request to have `?email=y` and change `:params` to `:queryparams` it works perfectly fine. But I don\\'t want to be sending username/password over GET requests. How do I accept arbitrary post parameters in a handler for a route?"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-09-16T02:57:38.097000",
                        "user": "Gizella",
                        "text": "I've read through the docs for Reitit and Ring but I couldn't find anything about how to access post parameters..."
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-09-16T02:58:24.153000",
                        "user": "Gizella",
                        "text": "I\\'m missing PHP right now where I just do `$_POST[\"data\"]` \ud83d\ude26"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-09-16T03:22:18.818000",
                        "user": "Gizella",
                        "text": "I'm thinking of using Compojure instead of doing it like this... It looks so much easier..."
                    }
                ]
            },
            {
                "conversation_id": "21",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-09-16T05:48:33.038000",
                        "user": "Crescent",
                        "text": "do you want post parameters or you have issues parsing body?"
                    }
                ]
            },
            {
                "conversation_id": "22",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-09-16T07:31:00.680000",
                        "user": "Tashon",
                        "text": "https://github.com/ringclojure/ringjson @nixin72"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-09-16T13:56:55.452000",
                        "user": "Tashon",
                        "text": "Well yeah but those only work with the form encoding"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-09-16T13:57:03.077000",
                        "user": "Tashon",
                        "text": "Not with json"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-09-23T18:12:06.511000",
                        "user": "Fallynn",
                        "text": "@nixin72 what happends if you pass :parameters in your reitit post route Look here https://github.com/metosin/reitit/blob/master/examples/ringswagger/src/example/server.clj#L62"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-09-23T18:25:02.508000",
                        "user": "Fallynn",
                        "text": "or scratch that this might be swagger related only. Yeah I usually use compojure myself haven't tried reitit yet. compojure + wrapparams middleware should do the trick."
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-09-24T07:10:24.507000",
                        "user": "Kailor",
                        "text": "I got Clojure to run on Dalvik and I\\'m pretty sure other people have too(and there\\'s even a fork). I also forgot that Clojure compiles to JVM lol"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-09-24T07:11:14.843000",
                        "user": "Kailor",
                        "text": "The fact that `dx` seems to work on a random jar is actually pretty cool."
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-09-24T07:11:44.494000",
                        "user": "Kailor",
                        "text": "If Clojure were just an interpreter then I'm pretty sure it would have worked."
                    },
                    {
                        "message_number": "9",
                        "ts": "2020-09-24T07:32:49.466000",
                        "user": "Kailor",
                        "text": "Okay"
                    },
                    {
                        "message_number": "10",
                        "ts": "2020-09-24T07:32:51.184000",
                        "user": "Kailor",
                        "text": "Sudden realization."
                    },
                    {
                        "message_number": "11",
                        "ts": "2020-09-24T07:33:25.725000",
                        "user": "Kailor",
                        "text": "``` :dependencies [[org.clojureandroid/clojure 1.7.0r4\"]```"
                    },
                    {
                        "message_number": "12",
                        "ts": "2020-09-24T07:33:40.696000",
                        "user": "Kailor",
                        "text": "My REPL also works"
                    },
                    {
                        "message_number": "13",
                        "ts": "2020-09-24T07:34:23.279000",
                        "user": "Kailor",
                        "text": "TL;DR I think if I `dx` this instead it will work."
                    },
                    {
                        "message_number": "14",
                        "ts": "2020-09-24T07:47:48.553000",
                        "user": "Kailor",
                        "text": "None"
                    },
                    {
                        "message_number": "15",
                        "ts": "2020-09-24T07:47:53.058000",
                        "user": "Kailor",
                        "text": "Getting closer"
                    },
                    {
                        "message_number": "16",
                        "ts": "2020-09-24T08:36:39.456000",
                        "user": "Kailor",
                        "text": "Perfect. :)"
                    },
                    {
                        "message_number": "17",
                        "ts": "2020-09-24T08:38:25.234000",
                        "user": "Kailor",
                        "text": "None"
                    },
                    {
                        "message_number": "18",
                        "ts": "2020-09-24T08:38:37.252000",
                        "user": "Kailor",
                        "text": "Any idea why it won't resolve though?"
                    },
                    {
                        "message_number": "19",
                        "ts": "2020-09-24T08:39:00.955000",
                        "user": "Kailor",
                        "text": "Why is `clojure.core` not part of my `require`?"
                    },
                    {
                        "message_number": "20",
                        "ts": "2020-09-24T08:40:00.686000",
                        "user": "Kailor",
                        "text": "None"
                    },
                    {
                        "message_number": "21",
                        "ts": "2020-09-24T08:40:46.493000",
                        "user": "Kailor",
                        "text": "I have a feeling this is probably something on the fork."
                    },
                    {
                        "message_number": "22",
                        "ts": "2020-09-24T09:23:10.515000",
                        "user": "Kailor",
                        "text": "```java if(VM_TYPE.deref() == JAVA_VM) { Var.pushThreadBindings( RT.mapUniqueKeys(CURRENT_NS CURRENT_NS.deref(), WARN_ON_REFLECTION WARN_ON_REFLECTION.deref() RT.UNCHECKED_MATH RT.UNCHECKED_MATH.deref())); try { Symbol USER = Symbol.intern(\"user\"); Symbol CLOJURE = Symbol.intern(\"clojure.core\");  Var in_ns = var(\"clojure.core inns\"); Var refer = var(\"clojure.core refer\"); in_ns.invoke(USER); refer.invoke(CLOJURE); maybeLoadResourceScript(\"user.clj\"); } finally { Var.popThreadBindings(); } }```"
                    },
                    {
                        "message_number": "23",
                        "ts": "2020-09-24T09:23:11.398000",
                        "user": "Kailor",
                        "text": "Found it"
                    },
                    {
                        "message_number": "24",
                        "ts": "2020-09-24T09:23:13.179000",
                        "user": "Kailor",
                        "text": "But why"
                    },
                    {
                        "message_number": "25",
                        "ts": "2020-09-24T09:25:25.839000",
                        "user": "Kailor",
                        "text": "Hm maybe that's not it actually."
                    },
                    {
                        "message_number": "26",
                        "ts": "2020-09-24T09:26:03.203000",
                        "user": "Kailor",
                        "text": "Eh who knows maybe it will work."
                    },
                    {
                        "message_number": "27",
                        "ts": "2020-09-24T09:26:06.453000",
                        "user": "Kailor",
                        "text": "Oh wait"
                    },
                    {
                        "message_number": "28",
                        "ts": "2020-09-24T09:26:14.185000",
                        "user": "Kailor",
                        "text": "ding ding ding"
                    },
                    {
                        "message_number": "29",
                        "ts": "2020-09-24T09:26:33.955000",
                        "user": "Kailor",
                        "text": "`refer.invoke(CLOJURE);`"
                    },
                    {
                        "message_number": "30",
                        "ts": "2020-09-24T09:28:24.328000",
                        "user": "Kailor",
                        "text": "Yay"
                    },
                    {
                        "message_number": "31",
                        "ts": "2020-09-24T09:28:29.240000",
                        "user": "Kailor",
                        "text": "I don't need to use my `proot` anymore."
                    },
                    {
                        "message_number": "32",
                        "ts": "2020-09-24T09:29:05.168000",
                        "user": "Kailor",
                        "text": "Ish"
                    },
                    {
                        "message_number": "33",
                        "ts": "2020-09-24T09:29:48.021000",
                        "user": "Kailor",
                        "text": "I'm pretty sure maven and the like won't work"
                    },
                    {
                        "message_number": "34",
                        "ts": "2020-09-24T09:31:49.491000",
                        "user": "Kailor",
                        "text": "This is going to be very interesting. The way I'm understanding this is that with this patch Clojure will work with both jar and dalvik files"
                    },
                    {
                        "message_number": "35",
                        "ts": "2020-09-24T09:32:04.238000",
                        "user": "Kailor",
                        "text": "Where jars are converted to dalvik on runtime"
                    },
                    {
                        "message_number": "36",
                        "ts": "2020-09-24T09:32:49.942000",
                        "user": "Kailor",
                        "text": "```  Dalvikspecific method for dynamically loading a class from JVM byte  codes. As there is no easy way to translate a class from the JVM to```"
                    },
                    {
                        "message_number": "37",
                        "ts": "2020-09-24T09:32:51.790000",
                        "user": "Kailor",
                        "text": "Oh boi"
                    },
                    {
                        "message_number": "38",
                        "ts": "2020-09-24T12:35:25.580000",
                        "user": "Kailor",
                        "text": "```(require \\'[clojure.java.io :as io])(defn streambytes [is] (let [baos (java.io.ByteArrayOutputStream.)] (io/copy is baos) (.toByteArray baos)))(let [cp (.getContextClassLoader (Thread/currentThread)) bytes (streambytes (.getResourceAsStream cp com/coveros/demo/helloworld/HelloWorld.class\"))] (.defineClass cp com.coveros.demo.helloworld.HelloWorld bytes))(com.coveros.demo.helloworld.HelloWorld/main (intoarray String []))Hello World! The current time is 12:34:54 PM on September 24 2020.```"
                    },
                    {
                        "message_number": "39",
                        "ts": "2020-09-24T12:35:30.394000",
                        "user": "Kailor",
                        "text": ":9_Yay:"
                    },
                    {
                        "message_number": "40",
                        "ts": "2020-09-24T12:35:37.672000",
                        "user": "Kailor",
                        "text": "Loaded a jar file transparently"
                    },
                    {
                        "message_number": "41",
                        "ts": "2020-09-24T12:38:08.481000",
                        "user": "Kailor",
                        "text": "You know"
                    },
                    {
                        "message_number": "42",
                        "ts": "2020-09-24T12:38:20.338000",
                        "user": "Kailor",
                        "text": "I think we can just extract this class loader and use it globally for Termux"
                    },
                    {
                        "message_number": "43",
                        "ts": "2020-09-24T14:05:50.419000",
                        "user": "Kailor",
                        "text": "There we go."
                    },
                    {
                        "message_number": "44",
                        "ts": "2020-09-24T14:06:03.357000",
                        "user": "Kailor",
                        "text": "```$ dalvikvm cp classes:helloworld1.1.jar:clojure.dex.jar clojure.mainClojure 1.7.0user=> (+ 1 2)3user=> (com.coveros.demo.helloworld.HelloWorld/main (intoarray String []))Hello World! The current time is 2:05:42 PM on September 24 2020.nil```"
                    },
                    {
                        "message_number": "45",
                        "ts": "2020-09-24T14:06:13.016000",
                        "user": "Kailor",
                        "text": "Transparent JVM translation. :9_Yay:"
                    },
                    {
                        "message_number": "46",
                        "ts": "2020-09-24T22:08:37.691000",
                        "user": "Kailor",
                        "text": "```$ dalvikvm cp classes:helloworld1.1.jar:clojure.dex.jar D java.system.class.loader=clojure.lang.DalvikDynamicClassLoader com.coveros.demo.helloworld.HelloWorldAborted```"
                    },
                    {
                        "message_number": "47",
                        "ts": "2020-09-24T22:08:42.320000",
                        "user": "Kailor",
                        "text": "Well that one didn't seem to work though."
                    },
                    {
                        "message_number": "48",
                        "ts": "2020-09-24T22:45:02.145000",
                        "user": "Kailor",
                        "text": "I should stop thinking too much about this I don't want to use Java anyway."
                    },
                    {
                        "message_number": "49",
                        "ts": "2020-09-26T21:29:54.248000",
                        "user": "Aleck",
                        "text": "identity of the day ``` (apply concat (seq (apply arraymap (1 2 3 4 5 6)))) ```"
                    },
                    {
                        "message_number": "50",
                        "ts": "2020-09-26T21:37:23.249000",
                        "user": "Kailor",
                        "text": "Ohhhh that's a bit interesting."
                    },
                    {
                        "message_number": "51",
                        "ts": "2020-09-26T21:38:50.928000",
                        "user": "Kailor",
                        "text": "I guess arraymap is basically `[[k v] ...]`"
                    },
                    {
                        "message_number": "52",
                        "ts": "2020-09-26T21:46:34.865000",
                        "user": "Aleck",
                        "text": "kinda"
                    },
                    {
                        "message_number": "53",
                        "ts": "2020-09-26T21:47:01.264000",
                        "user": "Aleck",
                        "text": "I find the name slightly confusing since it makes me think it's a specialized map for java arrays but alas"
                    },
                    {
                        "message_number": "54",
                        "ts": "2020-09-26T21:47:14.033000",
                        "user": "Kailor",
                        "text": ":D"
                    },
                    {
                        "message_number": "55",
                        "ts": "2020-09-26T21:47:31.387000",
                        "user": "Kailor",
                        "text": "Like `map` in the `[ f(x) | x in arr ]` sense?"
                    },
                    {
                        "message_number": "56",
                        "ts": "2020-09-26T21:48:39.602000",
                        "user": "Tashon",
                        "text": "haskell :5_MonkaShakeG:"
                    },
                    {
                        "message_number": "57",
                        "ts": "2020-09-26T21:48:51.534000",
                        "user": "Kailor",
                        "text": ":D"
                    },
                    {
                        "message_number": "58",
                        "ts": "2020-09-26T21:49:02.297000",
                        "user": "Kailor",
                        "text": "Though is that valid Haskell?"
                    },
                    {
                        "message_number": "59",
                        "ts": "2020-09-26T21:49:05.055000",
                        "user": "Kailor",
                        "text": "It's been like"
                    },
                    {
                        "message_number": "60",
                        "ts": "2020-09-26T21:49:07.169000",
                        "user": "Kailor",
                        "text": "~3 years"
                    },
                    {
                        "message_number": "61",
                        "ts": "2020-09-26T21:49:09.899000",
                        "user": "Tashon",
                        "text": "I think so"
                    },
                    {
                        "message_number": "62",
                        "ts": "2020-09-26T21:49:29.893000",
                        "user": "Tashon",
                        "text": "no wait"
                    },
                    {
                        "message_number": "63",
                        "ts": "2020-09-26T21:50:00.648000",
                        "user": "Tashon",
                        "text": "ah nah it uses `<` not `in`"
                    },
                    {
                        "message_number": "64",
                        "ts": "2020-09-26T21:50:20.809000",
                        "user": "Kailor",
                        "text": "```Hugs> let arr = [1,2,3]; f = (1 +); in [ f(x) | x in arr ]ERROR  Syntax error in expression (unexpected keyword in\")Hugs> let arr = [1,2,3]; f = (1 +); in [ f(x) | x < arr ][2,3,4]```"
                    },
                    {
                        "message_number": "65",
                        "ts": "2020-09-26T21:50:22.852000",
                        "user": "Kailor",
                        "text": "Close enough tho"
                    },
                    {
                        "message_number": "66",
                        "ts": "2020-09-26T21:50:29.798000",
                        "user": "Kailor",
                        "text": "It never escaped me wtf"
                    },
                    {
                        "message_number": "67",
                        "ts": "2020-09-26T21:50:32.348000",
                        "user": "Tashon",
                        "text": "apart from that you would probably omit the parens but I think they're legal"
                    },
                    {
                        "message_number": "68",
                        "ts": "2020-09-26T21:51:49.860000",
                        "user": "Tashon",
                        "text": "I'm like an absolute beginner with haskell the language gives me chills"
                    },
                    {
                        "message_number": "69",
                        "ts": "2020-09-26T21:52:09.452000",
                        "user": "Kailor",
                        "text": "lmao makes sense. It does for me too."
                    },
                    {
                        "message_number": "70",
                        "ts": "2020-09-26T21:52:16.925000",
                        "user": "Kailor",
                        "text": "Especially the first time."
                    },
                    {
                        "message_number": "71",
                        "ts": "2020-09-26T21:52:31.789000",
                        "user": "Kailor",
                        "text": "I had to try learning it 3 times to understand how to use it"
                    },
                    {
                        "message_number": "72",
                        "ts": "2020-09-26T21:52:36.915000",
                        "user": "Kailor",
                        "text": "And it was pretty nice while it lasted xd"
                    },
                    {
                        "message_number": "73",
                        "ts": "2020-09-26T21:53:12.910000",
                        "user": "Tashon",
                        "text": "I'll be forced to learn it at uni but I guess I'm looking forward to it"
                    },
                    {
                        "message_number": "74",
                        "ts": "2020-09-26T21:53:25.954000",
                        "user": "Tashon",
                        "text": "The resources for selftuition don't seem to be the best"
                    },
                    {
                        "message_number": "75",
                        "ts": "2020-09-26T21:53:58.095000",
                        "user": "Kailor",
                        "text": "Oh no worries it's a good language for sure."
                    },
                    {
                        "message_number": "76",
                        "ts": "2020-09-26T21:54:20.928000",
                        "user": "Kailor",
                        "text": "But like idk I don't really need a good language. I want one which I can actually write."
                    },
                    {
                        "message_number": "77",
                        "ts": "2020-09-26T21:54:29.705000",
                        "user": "Tashon",
                        "text": "yeah true"
                    },
                    {
                        "message_number": "78",
                        "ts": "2020-09-26T21:55:20.218000",
                        "user": "Tashon",
                        "text": "haskell just feels like you have to prove 3 math theorems to print hello world"
                    },
                    {
                        "message_number": "79",
                        "ts": "2020-09-26T21:56:16.622000",
                        "user": "Kailor",
                        "text": "I think it\\'s the other way around actually. You as the user can defer to the type checker to say oh these 3 theorems apply so this hello world is actually a legal program"
                    },
                    {
                        "message_number": "80",
                        "ts": "2020-09-26T21:56:25.152000",
                        "user": "Kailor",
                        "text": "It's a bit different as a library writer"
                    },
                    {
                        "message_number": "81",
                        "ts": "2020-09-26T21:56:37.184000",
                        "user": "Kailor",
                        "text": "Because you have to implement implement constraints."
                    },
                    {
                        "message_number": "82",
                        "ts": "2020-09-26T21:57:09.171000",
                        "user": "Kailor",
                        "text": "But that aside. My problem with Haskell is that it makes the bad things difficult and the good things... also difficult."
                    },
                    {
                        "message_number": "83",
                        "ts": "2020-09-26T21:57:12.494000",
                        "user": "Emersen",
                        "text": "Haskell is an interesting beast for sure"
                    },
                    {
                        "message_number": "84",
                        "ts": "2020-09-26T21:57:30.613000",
                        "user": "Aleck",
                        "text": "I'm baffled whenever people bring this argument"
                    },
                    {
                        "message_number": "85",
                        "ts": "2020-09-26T21:57:33.580000",
                        "user": "Emersen",
                        "text": "anyone who wants to write cmdline utilities"
                    },
                    {
                        "message_number": "86",
                        "ts": "2020-09-26T21:57:44.362000",
                        "user": "Tashon",
                        "text": "that was hyperbolic obviously"
                    },
                    {
                        "message_number": "87",
                        "ts": "2020-09-26T21:57:47.115000",
                        "user": "Aleck",
                        "text": "but i find that the real work is so remot e from print/io"
                    },
                    {
                        "message_number": "88",
                        "ts": "2020-09-26T21:57:52.879000",
                        "user": "Tashon",
                        "text": "don't take offence if you like haskell"
                    },
                    {
                        "message_number": "89",
                        "ts": "2020-09-26T21:58:00.351000",
                        "user": "Emersen",
                        "text": "controversial opinion grep is just complicated hello world"
                    },
                    {
                        "message_number": "90",
                        "ts": "2020-09-26T21:58:04.706000",
                        "user": "Aleck",
                        "text": "@Johnny apologies it was a bit aggressive I didn't mean it that way"
                    },
                    {
                        "message_number": "91",
                        "ts": "2020-09-26T21:58:17.396000",
                        "user": "Aleck",
                        "text": "it was really an open discussion bit"
                    },
                    {
                        "message_number": "92",
                        "ts": "2020-09-26T21:58:30.616000",
                        "user": "Tashon",
                        "text": "no worries just wanted to get that clear"
                    },
                    {
                        "message_number": "93",
                        "ts": "2020-09-26T21:58:50.064000",
                        "user": "Tashon",
                        "text": "I can't make a real argument about Haskell because I don't have enough knowledge"
                    },
                    {
                        "message_number": "94",
                        "ts": "2020-09-26T21:58:52.778000",
                        "user": "Aleck",
                        "text": "it's really super strange to me that people focus on hw when in reality good programming is more about invariants / structures / logic"
                    },
                    {
                        "message_number": "95",
                        "ts": "2020-09-26T21:59:23.867000",
                        "user": "Emersen",
                        "text": "I like haskell a lot but personally I don't feel like I gain a whole lot from the static types that I don't get from spec."
                    },
                    {
                        "message_number": "96",
                        "ts": "2020-09-26T21:59:24.906000",
                        "user": "Aleck",
                        "text": "i'd rather have a language that makes me write great graph / tree code in short than a cute printf"
                    },
                    {
                        "message_number": "97",
                        "ts": "2020-09-26T21:59:41.853000",
                        "user": "Aleck",
                        "text": "@srasu it's a tough choice I guess"
                    },
                    {
                        "message_number": "98",
                        "ts": "2020-09-26T22:00:06.100000",
                        "user": "Aleck",
                        "text": "having a compiler enforcing infered specs  or writing your own which may be nicer  better suited"
                    },
                    {
                        "message_number": "99",
                        "ts": "2020-09-26T22:00:06.905000",
                        "user": "Emersen",
                        "text": "I don't feel like it's a tough choice. The only thing I ever reach for haskell for before I reach for clojure is parsers."
                    },
                    {
                        "message_number": "100",
                        "ts": "2020-09-26T22:00:07.496000",
                        "user": "Kailor",
                        "text": "Anyways if you guys want an actual example. So there\\'s this thing called monad right? And Haskell extends that concept to monad transformer think of it as an analog to reducer : transducer.Monad transformers allow you to generate monad stacks(once again just like transducers lmao). So you can pile it up until you get a behavior you want. For example an exceptional log reader system."
                    },
                    {
                        "message_number": "101",
                        "ts": "2020-09-26T22:00:15.281000",
                        "user": "Kailor",
                        "text": "And like"
                    },
                    {
                        "message_number": "102",
                        "ts": "2020-09-26T22:00:18.937000",
                        "user": "Kailor",
                        "text": "Yeah sure you can do that."
                    },
                    {
                        "message_number": "103",
                        "ts": "2020-09-26T22:00:51.561000",
                        "user": "Aleck",
                        "text": "I never wrote haskell to the point of Monad Transformers though but I get the gist"
                    },
                    {
                        "message_number": "104",
                        "ts": "2020-09-26T22:01:01.074000",
                        "user": "Kailor",
                        "text": "But why not just `(for [x val] (if (p x) (raise ) (print x))`"
                    },
                    {
                        "message_number": "105",
                        "ts": "2020-09-26T22:01:09.753000",
                        "user": "Kailor",
                        "text": "You don't have to bring it monadic stacks and all."
                    },
                    {
                        "message_number": "106",
                        "ts": "2020-09-26T22:01:16.307000",
                        "user": "Aleck",
                        "text": "@srasu what are (if at all) the negative side of specs in your experience ?"
                    },
                    {
                        "message_number": "107",
                        "ts": "2020-09-26T22:01:29.844000",
                        "user": "Emersen",
                        "text": "they can be time consuming that's the only one."
                    },
                    {
                        "message_number": "108",
                        "ts": "2020-09-26T22:01:52.578000",
                        "user": "Aleck",
                        "text": "I was genuinely worried that people would create an infinite amount of specs for each project"
                    },
                    {
                        "message_number": "109",
                        "ts": "2020-09-26T22:02:43.260000",
                        "user": "Aleck",
                        "text": "(kinda like OO class explosion in the java world)"
                    },
                    {
                        "message_number": "110",
                        "ts": "2020-09-26T22:02:59.892000",
                        "user": "Emersen",
                        "text": "Spec 2 pretty much fixes that problem"
                    },
                    {
                        "message_number": "111",
                        "ts": "2020-09-26T22:03:00.916000",
                        "user": "Kailor",
                        "text": "I guess in a way this falls down to don\\'t make macros as the only interface to your library"
                    },
                    {
                        "message_number": "112",
                        "ts": "2020-09-26T22:03:18.010000",
                        "user": "Aleck",
                        "text": "how so @srasu ?"
                    },
                    {
                        "message_number": "113",
                        "ts": "2020-09-26T22:03:19.735000",
                        "user": "Kailor",
                        "text": "But in this case macros > complicated stacks"
                    },
                    {
                        "message_number": "114",
                        "ts": "2020-09-26T22:04:38.077000",
                        "user": "Emersen",
                        "text": "spec2 allows you to have the calling contract for an individual function get separated out from the type of data getting passed to a function which means you no longer have like ::addresswithstate as a spec in your system you just have an ::address and then in a particular function you specify that it must include a ::state key."
                    },
                    {
                        "message_number": "115",
                        "ts": "2020-09-26T22:04:51.861000",
                        "user": "Emersen",
                        "text": "Which means you no longer have an explosion of types."
                    },
                    {
                        "message_number": "116",
                        "ts": "2020-09-26T22:05:14.856000",
                        "user": "Emersen",
                        "text": "You only have one spec per domain object in your program and one function spec per function in your public interface (and any internal ones you want for generative testing)"
                    },
                    {
                        "message_number": "117",
                        "ts": "2020-09-26T22:05:41.864000",
                        "user": "Kailor",
                        "text": "Also can I just say that I love `for` expressions? List comprehensions are so janky compared to `for` expressions IMO."
                    },
                    {
                        "message_number": "118",
                        "ts": "2020-09-26T22:05:58.491000",
                        "user": "Tashon",
                        "text": "well `for` is list comprehension"
                    },
                    {
                        "message_number": "119",
                        "ts": "2020-09-26T22:06:02.518000",
                        "user": "Kailor",
                        "text": "Yeah"
                    },
                    {
                        "message_number": "120",
                        "ts": "2020-09-26T22:06:12.424000",
                        "user": "Aleck",
                        "text": "you prefer syntax that much ?"
                    },
                    {
                        "message_number": "121",
                        "ts": "2020-09-26T22:06:26.127000",
                        "user": "Emersen",
                        "text": "for is pretty readable for people who come from a programming background rather than a math one."
                    },
                    {
                        "message_number": "122",
                        "ts": "2020-09-26T22:06:29.955000",
                        "user": "Aleck",
                        "text": "I became quite care free about things that are so isomorphic"
                    },
                    {
                        "message_number": "123",
                        "ts": "2020-09-26T22:06:32.362000",
                        "user": "Aleck",
                        "text": "thanks @srasu btw"
                    },
                    {
                        "message_number": "124",
                        "ts": "2020-09-26T22:06:38.524000",
                        "user": "Emersen",
                        "text": "np"
                    },
                    {
                        "message_number": "125",
                        "ts": "2020-09-26T22:06:58.930000",
                        "user": "Kailor",
                        "text": "Yeah if anything syntax\"(how to express) is what makes me choose languages nowadays."
                    },
                    {
                        "message_number": "126",
                        "ts": "2020-09-26T22:06:58.996000",
                        "user": "Aleck",
                        "text": "fair point about migrating newcomers"
                    },
                    {
                        "message_number": "127",
                        "ts": "2020-09-26T22:07:04.416000",
                        "user": "Aleck",
                        "text": "heh"
                    },
                    {
                        "message_number": "128",
                        "ts": "2020-09-26T22:07:06.181000",
                        "user": "Kailor",
                        "text": "There's obviously a few other things"
                    },
                    {
                        "message_number": "129",
                        "ts": "2020-09-26T22:07:12.039000",
                        "user": "Kailor",
                        "text": "For example better mental models"
                    },
                    {
                        "message_number": "130",
                        "ts": "2020-09-26T22:07:25.484000",
                        "user": "Kailor",
                        "text": "Elixir hits both points on this for the server side."
                    },
                    {
                        "message_number": "131",
                        "ts": "2020-09-26T22:07:37.865000",
                        "user": "Aleck",
                        "text": "i used to be all about semantics and types I despise syntax pretty much because it's hard to decompose/compose"
                    },
                    {
                        "message_number": "132",
                        "ts": "2020-09-26T22:08:04.640000",
                        "user": "Aleck",
                        "text": "that's why fp clicked with me (f a) is the syntax.. now roll your own solutions"
                    },
                    {
                        "message_number": "133",
                        "ts": "2020-09-26T22:08:26.364000",
                        "user": "Aleck",
                        "text": "@Lonely \u170b\u1712\u170c\u1713/Myrl but they/them do you like perl / raku ?"
                    },
                    {
                        "message_number": "134",
                        "ts": "2020-09-26T22:08:48.995000",
                        "user": "Aleck",
                        "text": "I find larry wall approach to syntax in general pretty interesting"
                    },
                    {
                        "message_number": "135",
                        "ts": "2020-09-26T22:08:59.069000",
                        "user": "Kailor",
                        "text": "Also for expressions allow you to easily find parallels between for loops and list comprehensions."
                    },
                    {
                        "message_number": "136",
                        "ts": "2020-09-26T22:09:05.585000",
                        "user": "Kailor",
                        "text": "Also nope. I don't use Perl at all."
                    },
                    {
                        "message_number": "137",
                        "ts": "2020-09-26T22:09:13.321000",
                        "user": "Aleck",
                        "text": "ok"
                    },
                    {
                        "message_number": "138",
                        "ts": "2020-09-26T22:09:27.597000",
                        "user": "Emersen",
                        "text": "isn't perl stringlytyped?"
                    },
                    {
                        "message_number": "139",
                        "ts": "2020-09-26T22:09:41.178000",
                        "user": "Aleck",
                        "text": "I... can't answer that"
                    },
                    {
                        "message_number": "140",
                        "ts": "2020-09-26T22:09:58.919000",
                        "user": "Aleck",
                        "text": "i just like the contextual interpretation of objects"
                    },
                    {
                        "message_number": "141",
                        "ts": "2020-09-26T22:10:11.671000",
                        "user": "Emersen",
                        "text": "I mean it's not 100% a bad thing if it is it just means that it's not my cup of tea."
                    },
                    {
                        "message_number": "142",
                        "ts": "2020-09-26T22:10:16.334000",
                        "user": "Aleck",
                        "text": "every object comes with scalar map vector bool projection IIUC"
                    },
                    {
                        "message_number": "143",
                        "ts": "2020-09-26T22:10:50.398000",
                        "user": "Aleck",
                        "text": "and the language will see the data with a different lens depending on that context"
                    },
                    {
                        "message_number": "144",
                        "ts": "2020-09-26T22:11:05.230000",
                        "user": "Aleck",
                        "text": "it's like a slightly implicit overloading"
                    },
                    {
                        "message_number": "145",
                        "ts": "2020-09-26T22:11:32.198000",
                        "user": "Aleck",
                        "text": "or a shortsighted variant of the expression problem"
                    },
                    {
                        "message_number": "146",
                        "ts": "2020-09-26T22:13:58.314000",
                        "user": "Kailor",
                        "text": "Also what I said applies to languages which make a distinction between expression and statement"
                    },
                    {
                        "message_number": "147",
                        "ts": "2020-09-26T22:15:05.649000",
                        "user": "Kailor",
                        "text": "When you want to do something stateful while collecting the results you instead have to do```out = []for x in xs out += f(x)```"
                    },
                    {
                        "message_number": "148",
                        "ts": "2020-09-26T22:15:25.803000",
                        "user": "Kailor",
                        "text": "You technically can write `out = [f(x) for x in xs]`"
                    },
                    {
                        "message_number": "149",
                        "ts": "2020-09-26T22:15:42.217000",
                        "user": "Kailor",
                        "text": "But you'll probably get howled at."
                    },
                    {
                        "message_number": "150",
                        "ts": "2020-09-26T22:15:54.218000",
                        "user": "Kailor",
                        "text": "Or what if you have to write something complicated with local variables?"
                    },
                    {
                        "message_number": "151",
                        "ts": "2020-09-26T22:17:40.700000",
                        "user": "Aleck",
                        "text": "this is the lexical nature of lisp/fp at play"
                    },
                    {
                        "message_number": "152",
                        "ts": "2020-09-26T22:17:59.418000",
                        "user": "Aleck",
                        "text": "I always struggled with expr/statement split languages"
                    },
                    {
                        "message_number": "153",
                        "ts": "2020-09-26T22:18:11.068000",
                        "user": "Aleck",
                        "text": "i like when my world is closed over itself and coherent"
                    },
                    {
                        "message_number": "154",
                        "ts": "2020-09-26T22:18:19.803000",
                        "user": "Aleck",
                        "text": "(kinda like an algebra)"
                    },
                    {
                        "message_number": "155",
                        "ts": "2020-09-26T22:19:27.563000",
                        "user": "Kailor",
                        "text": "Yeah I was going to mention that too. Take juxtaposition as an operator if you break a piece of code somewhere do its constituent parts still make sense?"
                    },
                    {
                        "message_number": "156",
                        "ts": "2020-09-26T22:20:16.319000",
                        "user": "Kailor",
                        "text": "Not with list comprehension because your working variables are further."
                    },
                    {
                        "message_number": "157",
                        "ts": "2020-09-26T22:20:17.071000",
                        "user": "Aleck",
                        "text": "that's exactly why syntax was always an issue"
                    },
                    {
                        "message_number": "158",
                        "ts": "2020-09-26T22:20:29.690000",
                        "user": "Aleck",
                        "text": "you have near zero control over what pieces and how they fit"
                    },
                    {
                        "message_number": "159",
                        "ts": "2020-09-26T22:20:48.768000",
                        "user": "Aleck",
                        "text": "it's crazy how to most people this is fine"
                    },
                    {
                        "message_number": "160",
                        "ts": "2020-09-26T22:20:54.174000",
                        "user": "Aleck",
                        "text": "they love C Java ..."
                    },
                    {
                        "message_number": "161",
                        "ts": "2020-09-26T22:21:03.146000",
                        "user": "Aleck",
                        "text": "to me it was just pain"
                    },
                    {
                        "message_number": "162",
                        "ts": "2020-09-26T22:21:14.192000",
                        "user": "Aleck",
                        "text": "i naturally align with lisp / forth"
                    },
                    {
                        "message_number": "163",
                        "ts": "2020-09-26T22:21:30.436000",
                        "user": "Kailor",
                        "text": "I was going to mention Forth too lmao. Because like it wasn't always this way."
                    },
                    {
                        "message_number": "164",
                        "ts": "2020-09-26T22:21:41.077000",
                        "user": "Kailor",
                        "text": "We started with these types of languages"
                    },
                    {
                        "message_number": "165",
                        "ts": "2020-09-26T22:22:37.119000",
                        "user": "Aleck",
                        "text": "we ?"
                    },
                    {
                        "message_number": "166",
                        "ts": "2020-09-26T22:22:49.489000",
                        "user": "Aleck",
                        "text": "are you an old gray beard ?"
                    },
                    {
                        "message_number": "167",
                        "ts": "2020-09-26T22:22:50.060000",
                        "user": "Kailor",
                        "text": "We in the sense of CompSci as a field."
                    },
                    {
                        "message_number": "168",
                        "ts": "2020-09-26T22:22:53.414000",
                        "user": "Aleck",
                        "text": "oh ok"
                    },
                    {
                        "message_number": "169",
                        "ts": "2020-09-26T22:24:11.223000",
                        "user": "Aleck",
                        "text": "I saw lisp / forth as systems that gave you more freedom over the different dimension of the language while asking for less efforts"
                    },
                    {
                        "message_number": "170",
                        "ts": "2020-09-26T22:24:40.355000",
                        "user": "Aleck",
                        "text": "I think we digressed way too far from #clojure \ud83d\ude42"
                    },
                    {
                        "message_number": "171",
                        "ts": "2020-09-26T22:24:51.567000",
                        "user": "Kailor",
                        "text": "Yeah fair. :)"
                    }
                ]
            },
            {
                "conversation_id": "23",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-09-16T13:28:23.722000",
                        "user": "Oxford",
                        "text": "I almost always use wrapparams. then you get a key in the request map that's :formparams that lists key/val for the form params"
                    }
                ]
            },
            {
                "conversation_id": "24",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-09-16T21:20:24.295000",
                        "user": "Enai",
                        "text": "The company I work for uses VB.net and they have these global objects we use to queue function calls and they have an extension explicitly to write wrapper Functions to add function calls to it. And it's so obnoxious on so many levels. Nothing remotely like it could ever exist in Clojure"
                    }
                ]
            },
            {
                "conversation_id": "25",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-09-24T14:29:36.914000",
                        "user": "Oxford",
                        "text": "Sweet"
                    }
                ]
            },
            {
                "conversation_id": "26",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-09-26T21:57:19.577000",
                        "user": "Aleck",
                        "text": "@Johnny honestly who gives a damn about hello world"
                    }
                ]
            },
            {
                "conversation_id": "27",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-09-28T02:27:33.921000",
                        "user": "Kailor",
                        "text": "I wish transducers were more zipesque operations friendly."
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-09-28T02:28:15.649000",
                        "user": "Kailor",
                        "text": "And like"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-09-28T02:28:19.278000",
                        "user": "Kailor",
                        "text": "I guess I understand why it's not?"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-09-28T02:28:22.229000",
                        "user": "Kailor",
                        "text": "So :("
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-10-01T11:57:07.037000",
                        "user": "Kailor",
                        "text": ":BellSip:"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-10-01T11:58:06.778000",
                        "user": "Kailor",
                        "text": "I feel like you need to provide more context I don't see why there'd be something wrong."
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-10-01T11:58:33.784000",
                        "user": "Kailor",
                        "text": "Ah wait"
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-10-01T11:58:47.048000",
                        "user": "Kailor",
                        "text": "Are you saying in `{:predfn x ...` you want x to be a list?"
                    },
                    {
                        "message_number": "9",
                        "ts": "2020-10-01T12:01:43.995000",
                        "user": "Kailor",
                        "text": "`(eval (quote x)) == x` for all x"
                    },
                    {
                        "message_number": "10",
                        "ts": "2020-10-01T12:01:54.599000",
                        "user": "Kailor",
                        "text": "Alternatively `defmacro`"
                    },
                    {
                        "message_number": "11",
                        "ts": "2020-10-01T12:16:13.412000",
                        "user": "Macklyn",
                        "text": "@Lonely \u170b\u1712\u170c\u1713/Myrl but they/them hmm no I want the value of `:predfn` to be the literal form unevaluated. I basically want to show what the predicate was downstream."
                    },
                    {
                        "message_number": "12",
                        "ts": "2020-10-01T12:22:16.984000",
                        "user": "Tashon",
                        "text": "Just as a side note you could perhaps attach this to the function's meta"
                    },
                    {
                        "message_number": "13",
                        "ts": "2020-10-01T12:22:43.796000",
                        "user": "Tashon",
                        "text": "I think in some cases it already has a key for the source code"
                    },
                    {
                        "message_number": "14",
                        "ts": "2020-10-01T12:27:44.959000",
                        "user": "Macklyn",
                        "text": "@Johnny Ooh that's an idea I'll play around with that thank you."
                    },
                    {
                        "message_number": "15",
                        "ts": "2020-10-01T12:28:11.211000",
                        "user": "Macklyn",
                        "text": "thank you also @Lonely \u170b\u1712\u170c\u1713/Myrl but they/them \ud83d\ude42"
                    },
                    {
                        "message_number": "16",
                        "ts": "2020-10-01T12:28:25.283000",
                        "user": "Kailor",
                        "text": "No problem. :9_Yay:"
                    }
                ]
            },
            {
                "conversation_id": "28",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-09-29T13:29:25.539000",
                        "user": "Phinneas",
                        "text": "@Lonely \u170b\u1712\u170c\u1713/Myrl but they/them i think that should be possible implement a `zippertransduce` that takes `[xform data]` and returns `data`"
                    }
                ]
            },
            {
                "conversation_id": "29",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-10-01T11:43:18.260000",
                        "user": "Macklyn",
                        "text": "Oh hello \ud83d\ude42 I'm struggling with something that has to do with readers and quoting/unquoting. For example I want to write a function: `(defn foo [col predfn] {:predfn ... :result [...]})` and then say I call `(foo [1 2 3] (fn [x] (= 2 x)))` I want it to return the shape `{:predfn (fn [x] (= 2 x)) ...}`. Is that possible or am I approaching this wrong?"
                    }
                ]
            },
            {
                "conversation_id": "30",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-10-01T12:17:10.306000",
                        "user": "Kailor",
                        "text": "Ah."
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-10-01T12:17:32.467000",
                        "user": "Macklyn",
                        "text": "Much like what `clojure.test` does \ud83e\udd14 But I think it shows that I need to go towards a macro as you said."
                    }
                ]
            },
            {
                "conversation_id": "31",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-10-01T13:17:27.025000",
                        "user": "Emersen",
                        "text": "for clarity you can pass the unevaluated form to a function by quoting it."
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-10-01T13:18:28.287000",
                        "user": "Emersen",
                        "text": "If you were to pass the function form directly then when you're calling the function the original source has long since been thrown away and the only thing that remains is the function object."
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-10-01T13:18:46.238000",
                        "user": "Emersen",
                        "text": "This is why macros exist however."
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-10-01T13:22:42.265000",
                        "user": "Emersen",
                        "text": "you could have this:```clojure(defmacro foo [pred & args] `{:fnsource ~pred :ret (~pred ~@args)})(foo (fn [x] x) 5); => {:fnsource (fn [x] x) :ret 5}```"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-10-01T13:26:46.838000",
                        "user": "Macklyn",
                        "text": "\ud83d\ude4f @srasu that makes sense and exactly what I was trying to do. I'm new to macros and all the macro characters doesn't make it exactly easy if one doesn't understand them fully yet."
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-10-01T13:27:35.988000",
                        "user": "Emersen",
                        "text": "macros take a while to grok for sure."
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-10-01T13:27:56.413000",
                        "user": "Emersen",
                        "text": "Took me about a year and a half with clojure to grok em"
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-10-01T13:28:13.453000",
                        "user": "Macklyn",
                        "text": "What I've gathered so far is to use them sparingly."
                    },
                    {
                        "message_number": "9",
                        "ts": "2020-10-01T13:29:48.343000",
                        "user": "Emersen",
                        "text": "So generally there are two reasons to use them. One is to provide a dsl where you work in the sublanguage to express things for a very specific problem space. The other reason is to make a cleaner interface to existing exposed functionality."
                    },
                    {
                        "message_number": "10",
                        "ts": "2020-10-01T13:30:13.818000",
                        "user": "Emersen",
                        "text": "There are more possible reasons like reduced duplication performance implications etc but those are the two biggest."
                    },
                    {
                        "message_number": "11",
                        "ts": "2020-10-01T13:31:35.971000",
                        "user": "Emersen",
                        "text": "Of course once you're making a DSL though you have to be careful in how you design it because the default in dsl land is to lose all the power of the clojure standard library and others. You have to be careful in your design to keep that power around."
                    },
                    {
                        "message_number": "12",
                        "ts": "2020-10-01T13:33:43.138000",
                        "user": "Emersen",
                        "text": "Oh also another good use for them is introducing new flow control constructs like how core.async adds macros to add multiprocess flow control or how in one of my discord bots I introduced a regex pattern matching flow control."
                    },
                    {
                        "message_number": "13",
                        "ts": "2020-10-01T14:03:35.049000",
                        "user": "Macklyn",
                        "text": "Phew I think I figured some of it out... of course your example didn't work for my case \ud83d\ude06 The `~args` and `~@x` got me."
                    },
                    {
                        "message_number": "14",
                        "ts": "2020-10-02T01:48:26.769000",
                        "user": "Naimah",
                        "text": "@agumonkey I just skimmed over the video and I'm guessing that the diff shown comes from <https://github.com/pjstadig/humanetestoutput> or something similar"
                    },
                    {
                        "message_number": "15",
                        "ts": "2020-10-07T19:24:01.416000",
                        "user": "Ilee",
                        "text": "https://github.com/arcadiaunity/ArcadiaGodot"
                    },
                    {
                        "message_number": "16",
                        "ts": "2020-10-07T19:24:30.173000",
                        "user": "Ilee",
                        "text": "selfsame finished version 1.0 of ArcadiaGodot so you can use Clojure to program games and applications in the Godot engine now. It's pretty sick"
                    }
                ]
            },
            {
                "conversation_id": "32",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-10-01T21:27:17.346000",
                        "user": "Aleck",
                        "text": "in this https://www.youtube.com/watch?v=o2MLHFGUkoQ the host shows that clojure unit testing does output diff between expected value and computed value is it part of clojure core test behavior or is it from another layer ? (cider.. )"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-10-01T21:34:18.699000",
                        "user": "Naimah",
                        "text": "clojure.test output from `lein test````FAIL in (myawesometest) (awesome_test.clj:8)expected: (= 3 (+ 2 2)) actual: (not (= 3 4))Ran 1 tests containing 1 assertions.1 failures 0 errors.Tests failed.```"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-10-07T20:04:28.101000",
                        "user": "Emersen",
                        "text": "awesome"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-10-07T21:45:09.628000",
                        "user": "Oxford",
                        "text": "oh cool"
                    }
                ]
            },
            {
                "conversation_id": "33",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-10-01T21:56:08.468000",
                        "user": "Aleck",
                        "text": "oh thx"
                    }
                ]
            },
            {
                "conversation_id": "34",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-10-12T18:52:05.139000",
                        "user": "Wolfram",
                        "text": "Hi"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-10-12T18:52:25.335000",
                        "user": "Wolfram",
                        "text": "I'm using hugsql to work with postgresql but I need to handle jsonb data"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-10-12T18:53:10.804000",
                        "user": "Wolfram",
                        "text": "I'm sure that I need to use clojure.java.jdbc related features to do this but I don't know how things fit together does anyone have a pointer about this?"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-10-13T07:14:35.879000",
                        "user": "Wolfram",
                        "text": "@David The Tuna King thank you I'm gonna take a look at this"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-10-13T07:14:57.104000",
                        "user": "Wolfram",
                        "text": "I actually found some protocols to work with json in the meantime"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-10-13T07:15:56.240000",
                        "user": "Wolfram",
                        "text": "and now the main issue I have is related to the integration of jsonb specific functions with hugsql but I'm still experimenting"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-10-13T07:25:41.994000",
                        "user": "Crescent",
                        "text": "I think you need to use raw sql for that"
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-10-13T09:06:05.440000",
                        "user": "Wolfram",
                        "text": "yes with hugsql/dbrun I managed to set and update jsonb columns"
                    },
                    {
                        "message_number": "9",
                        "ts": "2020-10-13T09:07:03.108000",
                        "user": "Wolfram",
                        "text": "do you know if there is an intrinsic limitation or is it just something we could work on to improve hugsql DSL?"
                    },
                    {
                        "message_number": "10",
                        "ts": "2020-10-13T11:10:53.300000",
                        "user": "Crescent",
                        "text": "i dont know really i use honeysql personally but i`ve had that problem with json/jsonb \ud83d\ude42"
                    }
                ]
            },
            {
                "conversation_id": "35",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-10-13T02:43:39.907000",
                        "user": "Crescent",
                        "text": "There is honeysql postgres library that implements protocols for json serialization you might want to look how its done there."
                    }
                ]
            },
            {
                "conversation_id": "36",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-10-25T03:22:35.633000",
                        "user": "Haset",
                        "text": "Hey guys do y'all know a good open source project that uses fulcro?"
                    }
                ]
            }
        ]
    },
    {
        "team_domain": "Clojurians",
        "channel_name": "clojure",
        "month": "Nov2019-Jan2020",
        "start_date": "2019-11-01T19:36:28.998000",
        "end_date": "2019-12-18T09:44:57.362000",
        "messages": [
            {
                "conversation_id": "1",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2019-11-01T19:36:28.998000",
                        "user": "Ethaniel",
                        "text": "It's generally always possible to write map and filter in other languages mind. I personally appreciate the immutability and firstorder functions. Threading macros too.I like how the whole language is like you're composing pipelines of data."
                    },
                    {
                        "message_number": "2",
                        "ts": "2019-11-03T20:09:50.616000",
                        "user": "Chandru",
                        "text": "Is there a built in heap type in clojure or how would you go about implementing one?"
                    },
                    {
                        "message_number": "3",
                        "ts": "2019-11-03T20:10:28.069000",
                        "user": "Chandru",
                        "text": "Just like in any other language (i.e. arraybased)?"
                    }
                ]
            },
            {
                "conversation_id": "2",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2019-11-01T19:50:03.330000",
                        "user": "Abbigail",
                        "text": "Some languages it's far more unweildy since in an OOP language without lambdas it would require the strategy or visitor patterns and in procedural languages which lack function objects would need to pass around function pointers which is also iffy"
                    }
                ]
            },
            {
                "conversation_id": "3",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2019-11-03T21:35:02.921000",
                        "user": "Jaxiel",
                        "text": "... Isn't that basically just a list?"
                    },
                    {
                        "message_number": "2",
                        "ts": "2019-11-03T21:35:41.623000",
                        "user": "Jaxiel",
                        "text": "Wait no that's a stack. Herp"
                    },
                    {
                        "message_number": "3",
                        "ts": "2019-11-03T21:36:22.494000",
                        "user": "Jaxiel",
                        "text": "What are you needing to do with it that the default days types can't handle?"
                    },
                    {
                        "message_number": "4",
                        "ts": "2019-11-03T21:39:29.688000",
                        "user": "Chandru",
                        "text": "Implement a stack using just a heap is the task"
                    },
                    {
                        "message_number": "5",
                        "ts": "2019-11-03T21:41:29.375000",
                        "user": "Chandru",
                        "text": "It's a stupid one I know"
                    },
                    {
                        "message_number": "6",
                        "ts": "2019-11-03T21:54:26.751000",
                        "user": "Jaxiel",
                        "text": "... then use a vector and pop/push from the end?"
                    },
                    {
                        "message_number": "7",
                        "ts": "2019-11-03T21:54:42.804000",
                        "user": "Jaxiel",
                        "text": "But otherwise doing it in clj is going to miss the point of the exercise"
                    },
                    {
                        "message_number": "8",
                        "ts": "2019-11-03T21:54:45.351000",
                        "user": "Abbigail",
                        "text": "So the purpose here is to do particular coding challenges"
                    },
                    {
                        "message_number": "9",
                        "ts": "2019-11-03T21:54:52.884000",
                        "user": "Abbigail",
                        "text": "If I'm not mistaken"
                    },
                    {
                        "message_number": "10",
                        "ts": "2019-11-03T21:55:47.209000",
                        "user": "Jaxiel",
                        "text": "I mean if you _really_ want to could implement it on top of a map with keys as addresses"
                    },
                    {
                        "message_number": "11",
                        "ts": "2019-11-03T21:55:55.529000",
                        "user": "Jaxiel",
                        "text": "But it still sounds far too convoluted"
                    },
                    {
                        "message_number": "12",
                        "ts": "2019-11-03T21:56:07.878000",
                        "user": "Abbigail",
                        "text": "Actually a heap is just a tree not the heap"
                    },
                    {
                        "message_number": "13",
                        "ts": "2019-11-03T21:57:08.895000",
                        "user": "Abbigail",
                        "text": "The way that I'd recommend implementing this is with a record type which will represent a heap node. Something like the following:```clojure(defrecord HeapNode [value left right])```and then defining functions on the heap structure which will do basic heap operations."
                    },
                    {
                        "message_number": "14",
                        "ts": "2019-11-03T21:59:17.613000",
                        "user": "Jaxiel",
                        "text": "I thought a heap was a virtually contiguous block of randomly accessible data?"
                    },
                    {
                        "message_number": "15",
                        "ts": "2019-11-03T21:59:31.843000",
                        "user": "Jaxiel",
                        "text": "Going to go read. It's been a few years"
                    },
                    {
                        "message_number": "16",
                        "ts": "2019-11-03T21:59:42.026000",
                        "user": "Abbigail",
                        "text": "You'd then construct a heap like so:```clojure(def minheap (>HeapNode 10 (>HeapNode 15 (>HeapNode 40 nil nil) (>HeapNode 50 nil nil)) (>HeapNode 30 nil nil)))```"
                    },
                    {
                        "message_number": "17",
                        "ts": "2019-11-03T21:59:57.738000",
                        "user": "Abbigail",
                        "text": "Also terms in programming are overloaded"
                    },
                    {
                        "message_number": "18",
                        "ts": "2019-11-03T22:00:44.542000",
                        "user": "Abbigail",
                        "text": "There is the heap which is how memory is stored when it\\'s allocated in places other than the stack usually in linear virtual memory and which maps to the heap in C Java Clojure etc. But there are also heap data structures which are binary trees with certain properties."
                    },
                    {
                        "message_number": "19",
                        "ts": "2019-11-03T22:00:59.455000",
                        "user": "Jaxiel",
                        "text": "Ah I see. I was thinking of an OS heap rather than a heap data structure"
                    },
                    {
                        "message_number": "20",
                        "ts": "2019-11-03T22:01:54.364000",
                        "user": "Abbigail",
                        "text": "Honestly I'm not even sure I'd call that an OSlevel concept since a heap is either constructed by the standard library as a part of malloc or is nonexistant in things like assembler where you can just use the whole address space"
                    },
                    {
                        "message_number": "21",
                        "ts": "2019-11-03T22:02:56.483000",
                        "user": "Jaxiel",
                        "text": "More referring to the lower level memory management heap than the data structure"
                    },
                    {
                        "message_number": "22",
                        "ts": "2019-11-03T22:02:57.828000",
                        "user": "Jaxiel",
                        "text": "Better? :p"
                    },
                    {
                        "message_number": "23",
                        "ts": "2019-11-03T22:03:14.765000",
                        "user": "Abbigail",
                        "text": "Yes that's the one I was talking about. :P"
                    },
                    {
                        "message_number": "24",
                        "ts": "2019-11-03T22:04:20.045000",
                        "user": "Jaxiel",
                        "text": "So is this stack implementation done with keyval pairs?"
                    },
                    {
                        "message_number": "25",
                        "ts": "2019-11-03T22:04:20.394000",
                        "user": "Abbigail",
                        "text": "An OS usually just handles making the translation tables which convert from the virtual address space of a particular process into the physical memory or memory mapped devices which are available at a hardware level. It doesn't have any concept of a stack or heap. Those are defined entirely in userspace but libc has a lot of stuff which is built around it."
                    },
                    {
                        "message_number": "26",
                        "ts": "2019-11-03T22:05:05.975000",
                        "user": "Abbigail",
                        "text": "This HeapNode heap is just a binary tree for which some invariants hold true"
                    },
                    {
                        "message_number": "27",
                        "ts": "2019-11-03T22:05:28.937000",
                        "user": "Abbigail",
                        "text": "And I figured that records are a good way to represent that node."
                    },
                    {
                        "message_number": "28",
                        "ts": "2019-11-03T22:09:17.943000",
                        "user": "Jaxiel",
                        "text": "Yeah but I'm considering the sorting given that we need to remember which order items are going to be in"
                    },
                    {
                        "message_number": "29",
                        "ts": "2019-11-03T22:10:14.781000",
                        "user": "Jaxiel",
                        "text": "(I'm thinking of the stack implementation in the heap)"
                    },
                    {
                        "message_number": "30",
                        "ts": "2019-11-03T22:10:50.979000",
                        "user": "Jaxiel",
                        "text": "Actually I'll just stop given that this is the actual puzzle to solve"
                    },
                    {
                        "message_number": "31",
                        "ts": "2019-11-03T22:11:39.547000",
                        "user": "Abbigail",
                        "text": "Sure yeah. But anyway you can just define some relatively simple heap operations on the record I put there."
                    },
                    {
                        "message_number": "32",
                        "ts": "2019-11-03T22:12:26.140000",
                        "user": "Abbigail",
                        "text": "It maps pretty cleanly to a java class with three fields on it so it's good for performance but it's also got the nice things from clojure like immutability the ability to have metadata and it is allowed to have additional fields assoced into it"
                    },
                    {
                        "message_number": "33",
                        "ts": "2019-11-03T22:12:59.701000",
                        "user": "Abbigail",
                        "text": "If you want to get extra with the performance tuning of it you can even add type hints to the fields"
                    },
                    {
                        "message_number": "34",
                        "ts": "2019-11-03T22:13:46.267000",
                        "user": "Abbigail",
                        "text": "Also notable is that with java 1.9 and beyond it's using a generational garbage collector which means that for the most part clojure's ephemeral garbage is effectively free."
                    },
                    {
                        "message_number": "35",
                        "ts": "2019-11-03T22:14:12.495000",
                        "user": "Abbigail",
                        "text": "Also in java 1.8 you can use a commandline flag when it runs to use the G1 garbage collector anyway which gives the same benefit."
                    },
                    {
                        "message_number": "36",
                        "ts": "2019-11-03T22:19:12.825000",
                        "user": "Chandru",
                        "text": "`(defrecord HeapNode [value left right])`I started with exactly that"
                    },
                    {
                        "message_number": "37",
                        "ts": "2019-11-03T22:19:30.928000",
                        "user": "Chandru",
                        "text": "But I got stuck with sorting"
                    },
                    {
                        "message_number": "38",
                        "ts": "2019-11-03T22:23:50.793000",
                        "user": "Chandru",
                        "text": "since after the insertion you have to sort everything"
                    },
                    {
                        "message_number": "39",
                        "ts": "2019-11-03T22:24:56.958000",
                        "user": "Abbigail",
                        "text": "Well not really. The way you can do a heap is by taking a single node and adding each element one by one and then all you need to do is have the node you\\'re inserting trickle down the tree to the correct place."
                    },
                    {
                        "message_number": "40",
                        "ts": "2019-11-03T22:25:11.128000",
                        "user": "Abbigail",
                        "text": "Then if you do that on repeat it'll sort itself"
                    },
                    {
                        "message_number": "41",
                        "ts": "2019-11-03T22:25:37.138000",
                        "user": "Abbigail",
                        "text": "Oh wait no brain"
                    },
                    {
                        "message_number": "42",
                        "ts": "2019-11-03T22:25:40.778000",
                        "user": "Abbigail",
                        "text": "that's a different type of tree"
                    },
                    {
                        "message_number": "43",
                        "ts": "2019-11-03T22:26:16.194000",
                        "user": "Abbigail",
                        "text": "Riiiiight I forgot how easy it is to implement heaps as vectors"
                    },
                    {
                        "message_number": "44",
                        "ts": "2019-11-03T22:26:37.669000",
                        "user": "Chandru",
                        "text": "as far as I'm concerned you insert it (it gets put in the last position) and then you swap it with its parent as long as it's smaller/greater"
                    },
                    {
                        "message_number": "45",
                        "ts": "2019-11-03T22:26:44.629000",
                        "user": "Abbigail",
                        "text": "Yes exactly"
                    },
                    {
                        "message_number": "46",
                        "ts": "2019-11-03T22:26:50.206000",
                        "user": "Abbigail",
                        "text": "That's what it's supposed to be"
                    },
                    {
                        "message_number": "47",
                        "ts": "2019-11-03T22:26:58.097000",
                        "user": "Abbigail",
                        "text": "Now that I'm remembering it correctly"
                    },
                    {
                        "message_number": "48",
                        "ts": "2019-11-03T22:27:51.356000",
                        "user": "Abbigail",
                        "text": "So actually I'd change it and implement a heap on top of a vector"
                    },
                    {
                        "message_number": "49",
                        "ts": "2019-11-03T22:28:03.297000",
                        "user": "Chandru",
                        "text": "thought so"
                    },
                    {
                        "message_number": "50",
                        "ts": "2019-11-03T22:28:24.059000",
                        "user": "Chandru",
                        "text": "Actually even inserting is not that great with these nodes"
                    },
                    {
                        "message_number": "51",
                        "ts": "2019-11-03T22:28:38.631000",
                        "user": "Chandru",
                        "text": "I just realised my implementation of that never worked"
                    },
                    {
                        "message_number": "52",
                        "ts": "2019-11-03T22:28:44.648000",
                        "user": "Chandru",
                        "text": "```clj(defn push [heap value] (cond (not (:left heap)) (assoc heap :left (HeapNode. value)) (not (:right heap)) (assoc heap :right (HeapNode. value)) :else (recur (:left heap) value)))```"
                    },
                    {
                        "message_number": "53",
                        "ts": "2019-11-03T22:29:05.613000",
                        "user": "Chandru",
                        "text": "because it never went down the right nodes"
                    },
                    {
                        "message_number": "54",
                        "ts": "2019-11-03T22:30:13.211000",
                        "user": "Abbigail",
                        "text": "Yeah so implementing it with an actual tree structure is a little difficult since you need a way to do a breadthfirst traversal to even do the first part of an insert and that's just frightening for performance. Just implementing it as a vector is much easier. I'm playing around with it in a repl and building it up at the moment I can guide you through it in a few moments here."
                    },
                    {
                        "message_number": "55",
                        "ts": "2019-11-03T22:40:55.623000",
                        "user": "Chandru",
                        "text": "I already began with the implementation"
                    },
                    {
                        "message_number": "56",
                        "ts": "2019-11-03T22:41:21.686000",
                        "user": "Chandru",
                        "text": "Just stack overflowing my way through this"
                    },
                    {
                        "message_number": "57",
                        "ts": "2019-11-03T22:42:54.286000",
                        "user": "Chandru",
                        "text": "Usually (with a heap object) there is a pop()/extract() method which returns the root value and heapifies the rest"
                    },
                    {
                        "message_number": "58",
                        "ts": "2019-11-03T22:43:10.172000",
                        "user": "Chandru",
                        "text": "Now with an object that's easy"
                    },
                    {
                        "message_number": "59",
                        "ts": "2019-11-03T22:43:23.545000",
                        "user": "Chandru",
                        "text": "But i wonder how I just go about this in fp"
                    },
                    {
                        "message_number": "60",
                        "ts": "2019-11-03T22:43:43.022000",
                        "user": "Chandru",
                        "text": "Because I can't return the value and the new heap at the same time"
                    },
                    {
                        "message_number": "61",
                        "ts": "2019-11-03T22:46:22.098000",
                        "user": "Chandru",
                        "text": "Should I separate it into a peek function that just returns the topmost element and a pop function that returns a heap without that element?"
                    },
                    {
                        "message_number": "62",
                        "ts": "2019-11-03T22:47:15.239000",
                        "user": "Abbigail",
                        "text": "Actually you can return the value and the new heap at the same time. That's a pretty common pattern actually. You'd just return it as a vector of the value and the new heap"
                    },
                    {
                        "message_number": "63",
                        "ts": "2019-11-03T22:47:24.314000",
                        "user": "Abbigail",
                        "text": "That's how I'd do it anyway"
                    },
                    {
                        "message_number": "64",
                        "ts": "2019-11-03T22:49:45.006000",
                        "user": "Chandru",
                        "text": "Alright sounds good"
                    },
                    {
                        "message_number": "65",
                        "ts": "2019-11-03T22:50:12.356000",
                        "user": "Chandru",
                        "text": "Wouldn't a map be better?"
                    },
                    {
                        "message_number": "66",
                        "ts": "2019-11-03T22:50:24.906000",
                        "user": "Chandru",
                        "text": "Because there you have labelled access"
                    },
                    {
                        "message_number": "67",
                        "ts": "2019-11-03T22:50:55.463000",
                        "user": "Abbigail",
                        "text": "A map would be better for labeled access but it also makes destructuring less pretty. It's a trade off and there's not really a wrong answer with just the two things being returned."
                    },
                    {
                        "message_number": "68",
                        "ts": "2019-11-03T22:52:40.934000",
                        "user": "Chandru",
                        "text": "Aight"
                    },
                    {
                        "message_number": "69",
                        "ts": "2019-11-03T22:53:15.364000",
                        "user": "Chandru",
                        "text": "Is there a better way than accessing a vector like (v index)?"
                    },
                    {
                        "message_number": "70",
                        "ts": "2019-11-03T22:54:57.381000",
                        "user": "Abbigail",
                        "text": "There's that and `(nth v index)`"
                    },
                    {
                        "message_number": "71",
                        "ts": "2019-11-03T22:55:05.604000",
                        "user": "Abbigail",
                        "text": "they map to the same thing"
                    },
                    {
                        "message_number": "72",
                        "ts": "2019-11-03T22:55:43.643000",
                        "user": "Chandru",
                        "text": "Yeah ok i know that"
                    },
                    {
                        "message_number": "73",
                        "ts": "2019-11-03T22:56:00.905000",
                        "user": "Chandru",
                        "text": "Honestly these challenges are stupid sometimes"
                    },
                    {
                        "message_number": "74",
                        "ts": "2019-11-03T22:56:07.635000",
                        "user": "Chandru",
                        "text": "This one is supposed to be easy"
                    },
                    {
                        "message_number": "75",
                        "ts": "2019-11-03T22:56:37.538000",
                        "user": "Chandru",
                        "text": "While the one yesterday (literally just measuring the distance between two words in a string) was hard"
                    },
                    {
                        "message_number": "76",
                        "ts": "2019-11-03T22:58:54.519000",
                        "user": "Chandru",
                        "text": "It's getting late Ima log off. Thanks for the help you'll probably see more of my terrible code the next few days"
                    },
                    {
                        "message_number": "77",
                        "ts": "2019-11-03T23:00:00.671000",
                        "user": "Abbigail",
                        "text": "Fair enough!"
                    },
                    {
                        "message_number": "78",
                        "ts": "2019-11-04T19:52:45.226000",
                        "user": "Chandru",
                        "text": "Finally got it to work"
                    },
                    {
                        "message_number": "79",
                        "ts": "2019-11-04T19:52:57.383000",
                        "user": "Chandru",
                        "text": "The implementation I was copying was erronous"
                    },
                    {
                        "message_number": "80",
                        "ts": "2019-11-04T19:53:47.266000",
                        "user": "Chandru",
                        "text": "Any thoughts on the code? https://github.com/JohnnyJayJay/DailyCodingProblem/blob/master/src/november19/03.clj"
                    },
                    {
                        "message_number": "81",
                        "ts": "2019-11-05T18:38:00.064000",
                        "user": "Chandru",
                        "text": "How can I see if a number is truncatable\"?"
                    },
                    {
                        "message_number": "82",
                        "ts": "2019-11-05T18:38:47.723000",
                        "user": "Chandru",
                        "text": "I.e. I'd need something that returns true for 1.0 3.0 231.0 etc. and false for 12.332 67.123 1.1 etc."
                    },
                    {
                        "message_number": "83",
                        "ts": "2019-11-05T18:39:17.377000",
                        "user": "Chandru",
                        "text": "I have several ideas but all of them are kinda ugly"
                    },
                    {
                        "message_number": "84",
                        "ts": "2019-11-05T23:06:31.283000",
                        "user": "Chandru",
                        "text": "Figured it out already. Casting to int doesn't work because (= double int) is always false"
                    },
                    {
                        "message_number": "85",
                        "ts": "2019-11-05T23:07:14.432000",
                        "user": "Chandru",
                        "text": "What does work though:(= (Math/rint x) x)"
                    },
                    {
                        "message_number": "86",
                        "ts": "2019-11-06T01:07:09.151000",
                        "user": "Brix",
                        "text": "Clearly it's sourcing my deps.edn file the clojure version changes if I change the version listed in the file."
                    },
                    {
                        "message_number": "87",
                        "ts": "2019-11-06T01:07:20.773000",
                        "user": "Brix",
                        "text": "And yet none of the other deps are being added to the classpath afaict."
                    },
                    {
                        "message_number": "88",
                        "ts": "2019-11-06T01:09:42.187000",
                        "user": "Brix",
                        "text": "Oh. Ignore me I was being an idiot."
                    },
                    {
                        "message_number": "89",
                        "ts": "2019-11-07T23:01:57.054000",
                        "user": "Araiya",
                        "text": "Have to learn .NET for work really like F# but Clojure syntax has me spoiled."
                    }
                ]
            },
            {
                "conversation_id": "4",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2019-11-04T21:16:03.011000",
                        "user": "Edinson",
                        "text": "anyone know a good way to determine why an lein uberjar build hangs? it looks like it compiles every file but just hangs and doesnt complete."
                    },
                    {
                        "message_number": "2",
                        "ts": "2019-11-04T21:17:02.615000",
                        "user": "Edinson",
                        "text": "i checked to make sure nothing was outside of the main function"
                    }
                ]
            },
            {
                "conversation_id": "5",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2019-11-05T00:20:43.471000",
                        "user": "Abbigail",
                        "text": "sounds like either futures are used in the macros or there's a recursive macro which is never completing"
                    },
                    {
                        "message_number": "2",
                        "ts": "2019-11-05T00:20:59.000000",
                        "user": "Abbigail",
                        "text": "If you're doing aot"
                    }
                ]
            },
            {
                "conversation_id": "6",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2019-11-05T22:31:06.110000",
                        "user": "Veada",
                        "text": "Not sure if it would cover 100% of cases but how about comparing `x` to `(int x)` which coerces x to an int? Was that one of the ugly ways you had in mind?"
                    }
                ]
            },
            {
                "conversation_id": "7",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2019-11-05T23:35:01.437000",
                        "user": "Abbigail",
                        "text": "nice"
                    },
                    {
                        "message_number": "2",
                        "ts": "2019-11-06T01:06:44.273000",
                        "user": "Brix",
                        "text": "Am I going mad or is there some extra step I need to take for the clojure cli tools to put everything in my deps list on the classpath?"
                    }
                ]
            },
            {
                "conversation_id": "8",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2019-11-06T01:50:30.752000",
                        "user": "Abbigail",
                        "text": ":+1:"
                    },
                    {
                        "message_number": "2",
                        "ts": "2019-11-09T07:04:07.764000",
                        "user": "Amiliano",
                        "text": "it's great"
                    }
                ]
            },
            {
                "conversation_id": "9",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2019-11-09T01:46:53.378000",
                        "user": "Ethaniel",
                        "text": "I get the feeling. When I wanted to get into functional programming I already had the tooling for F# so tried it... naaaah.How about ClojureCLR?"
                    }
                ]
            },
            {
                "conversation_id": "10",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2019-11-09T12:04:32.708000",
                        "user": "Chandru",
                        "text": "Is there something like `doseq` but not for sideeffects? I want to avoid the boilerplate of doing ```clj(loop [coll1 [1 2 3] coll2 [4 5 6]] (let [one (first coll1) two (first coll2)] ; something with it (recur (rest coll1) (rest coll2))))```"
                    }
                ]
            },
            {
                "conversation_id": "11",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2019-11-09T12:55:05.812000",
                        "user": "Jaxiel",
                        "text": "...map?"
                    },
                    {
                        "message_number": "2",
                        "ts": "2019-11-09T12:56:38.639000",
                        "user": "Jaxiel",
                        "text": "```clj(map + [1 2 3] [4 5 6]) ; (5 7 9)```"
                    },
                    {
                        "message_number": "3",
                        "ts": "2019-11-09T12:57:27.948000",
                        "user": "Jaxiel",
                        "text": "Map takes any number of arguments and will execute the length of the shortest array"
                    },
                    {
                        "message_number": "4",
                        "ts": "2019-11-09T12:57:39.290000",
                        "user": "Jaxiel",
                        "text": "@Johnny"
                    },
                    {
                        "message_number": "5",
                        "ts": "2019-11-09T12:58:22.014000",
                        "user": "Chandru",
                        "text": "thanks"
                    },
                    {
                        "message_number": "6",
                        "ts": "2019-11-09T14:36:54.432000",
                        "user": "Chandru",
                        "text": "oh that's perfect"
                    },
                    {
                        "message_number": "7",
                        "ts": "2019-11-09T14:37:07.330000",
                        "user": "Chandru",
                        "text": "how have i never heard of that"
                    },
                    {
                        "message_number": "8",
                        "ts": "2019-11-09T14:42:01.010000",
                        "user": "Jaxiel",
                        "text": "So many times I\\'ve gone Why isn\\'t there a function that does just this? and turns out there is"
                    },
                    {
                        "message_number": "9",
                        "ts": "2019-11-09T14:45:47.400000",
                        "user": "Chandru",
                        "text": "yeah"
                    },
                    {
                        "message_number": "10",
                        "ts": "2019-11-09T14:46:04.627000",
                        "user": "Chandru",
                        "text": "I always have the cheatsheet open when doing something"
                    },
                    {
                        "message_number": "11",
                        "ts": "2019-11-09T14:46:30.492000",
                        "user": "Chandru",
                        "text": "But I still haven't internalised the way the different data structures work"
                    },
                    {
                        "message_number": "12",
                        "ts": "2019-11-09T14:47:11.181000",
                        "user": "Chandru",
                        "text": "While we\\'re at it> Why isn\\'t there a function that does just this?\"Is there a function in the core library that counts the occurrences of an element in a collection?"
                    },
                    {
                        "message_number": "13",
                        "ts": "2019-11-09T14:47:45.729000",
                        "user": "Chandru",
                        "text": "I ended up writing it myself several times now"
                    },
                    {
                        "message_number": "14",
                        "ts": "2019-11-09T14:49:11.389000",
                        "user": "Jaxiel",
                        "text": "frequencies?"
                    },
                    {
                        "message_number": "15",
                        "ts": "2019-11-09T14:50:49.381000",
                        "user": "Chandru",
                        "text": "oof"
                    },
                    {
                        "message_number": "16",
                        "ts": "2019-11-09T14:50:53.005000",
                        "user": "Chandru",
                        "text": "of course there is one"
                    },
                    {
                        "message_number": "17",
                        "ts": "2019-11-09T14:50:57.488000",
                        "user": "Jaxiel",
                        "text": "\ud83d\ude02"
                    },
                    {
                        "message_number": "18",
                        "ts": "2019-11-09T14:51:19.960000",
                        "user": "Jaxiel",
                        "text": "Frequencies is kinda just an extension of `groupby` too"
                    },
                    {
                        "message_number": "19",
                        "ts": "2019-11-09T14:59:54.396000",
                        "user": "Chandru",
                        "text": "It would be great if someone could review my code here <https://github.com/JohnnyJayJay/DailyCodingProblem>"
                    },
                    {
                        "message_number": "20",
                        "ts": "2019-11-09T15:00:18.799000",
                        "user": "Chandru",
                        "text": "That'd be a big help as I'm currently just working everything out on my own"
                    },
                    {
                        "message_number": "21",
                        "ts": "2019-11-09T15:23:47.449000",
                        "user": "Chandru",
                        "text": "Hmm I don't see what you mean"
                    },
                    {
                        "message_number": "22",
                        "ts": "2019-11-09T16:46:51.460000",
                        "user": "Chandru",
                        "text": "Do you mean like `reduce`?"
                    },
                    {
                        "message_number": "23",
                        "ts": "2019-11-09T16:47:32.799000",
                        "user": "Chandru",
                        "text": "Btw what's the difference between `apply` and `reduce`?"
                    },
                    {
                        "message_number": "24",
                        "ts": "2019-11-09T16:48:31.452000",
                        "user": "Veada",
                        "text": "in 08.clj you may want to consider turning `chars` into a set as it lets your have I seen this character before check becomes much more concise: `(if (chars char) char (recur...))`"
                    },
                    {
                        "message_number": "25",
                        "ts": "2019-11-09T16:54:10.227000",
                        "user": "Chandru",
                        "text": "Oh I didn't know you could invoke sets as a function"
                    },
                    {
                        "message_number": "26",
                        "ts": "2019-11-09T16:54:16.744000",
                        "user": "Chandru",
                        "text": "I'll consider that"
                    },
                    {
                        "message_number": "27",
                        "ts": "2019-11-09T16:55:47.141000",
                        "user": "Florentino",
                        "text": "@Johnny there's both `reduce` and `reductions`. pretty great duo"
                    },
                    {
                        "message_number": "28",
                        "ts": "2019-11-09T16:57:26.823000",
                        "user": "Florentino",
                        "text": "```clj(reductions + 0 [1 2 3])(0 1 3 6)```"
                    },
                    {
                        "message_number": "29",
                        "ts": "2019-11-09T17:00:27.634000",
                        "user": "Florentino",
                        "text": "also `(apply f coll)` is the same as `(f itemofcoll1 item2 item3...)`"
                    },
                    {
                        "message_number": "30",
                        "ts": "2019-11-09T17:00:42.427000",
                        "user": "Veada",
                        "text": "regarding `apply` vs `reduce` the way I usually think of it is that `apply` basically unwraps a collection and makes it an argument list to a function while `reduce` is more of a stepwise combine the first two then combine the result of that with the third and so on"
                    },
                    {
                        "message_number": "31",
                        "ts": "2019-11-09T17:01:07.805000",
                        "user": "Florentino",
                        "text": "^"
                    },
                    {
                        "message_number": "32",
                        "ts": "2019-11-09T17:01:31.391000",
                        "user": "Chandru",
                        "text": "ah i see now"
                    },
                    {
                        "message_number": "33",
                        "ts": "2019-11-09T17:03:01.632000",
                        "user": "Florentino",
                        "text": "eric normand has a great article on reduce likening it to taking beans out of a bucket and putting them somewhere else one by one"
                    },
                    {
                        "message_number": "34",
                        "ts": "2019-11-09T17:04:53.321000",
                        "user": "Florentino",
                        "text": "http://www.lispcast.com/annotatedclojurecorereduce"
                    }
                ]
            },
            {
                "conversation_id": "12",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2019-11-09T14:29:15.590000",
                        "user": "Abbigail",
                        "text": "@Auekha ClojureCLR is pretty good however be aware that it's a little harder to get it to play nice with dependencies (or so I've heard)"
                    },
                    {
                        "message_number": "2",
                        "ts": "2019-11-09T14:30:32.173000",
                        "user": "Abbigail",
                        "text": "Also @Johnny map will work for that exact case however for more general looping with sequences there is also `for`"
                    },
                    {
                        "message_number": "3",
                        "ts": "2019-11-09T14:41:39.154000",
                        "user": "Jaxiel",
                        "text": "Because clojure's core library is pretty freaking large"
                    },
                    {
                        "message_number": "4",
                        "ts": "2019-11-09T14:43:10.045000",
                        "user": "Jaxiel",
                        "text": "Not saying it\\'s too big just that the 100 functions on 1 data structure is there alive and well"
                    }
                ]
            },
            {
                "conversation_id": "13",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2019-11-09T15:12:46.372000",
                        "user": "Abbigail",
                        "text": "for the first one choose looks like it could be rewritten to use a filter and a call to count"
                    },
                    {
                        "message_number": "2",
                        "ts": "2019-11-09T16:40:24.226000",
                        "user": "Ethaniel",
                        "text": "I recently got caught out not knowing `reductions` existed. It was like my code shriveled to nothing after that."
                    }
                ]
            },
            {
                "conversation_id": "14",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2019-11-09T17:11:25.045000",
                        "user": "Veada",
                        "text": "```clojure(reduce (partial  10) [1 2 3 4])=> 24000;; becomes something like ( 10 4 ( 10 3 ( 10 1 2))(apply (partial  10) [1 2 3 4])=> 240;; becomes something like ( 10 1 2 3 4)```"
                    }
                ]
            },
            {
                "conversation_id": "15",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2019-11-12T16:04:25.285000",
                        "user": "Chandru",
                        "text": "uhm so"
                    },
                    {
                        "message_number": "2",
                        "ts": "2019-11-12T16:04:41.771000",
                        "user": "Chandru",
                        "text": "For the past few weeks I've used IntelliJ as an IDE for Clojure"
                    },
                    {
                        "message_number": "3",
                        "ts": "2019-11-12T16:05:08.612000",
                        "user": "Chandru",
                        "text": "But the plugin I was using Cursive apparently costs $99 per year?"
                    },
                    {
                        "message_number": "4",
                        "ts": "2019-11-12T16:05:33.722000",
                        "user": "Chandru",
                        "text": "Does anyone have a IDE/editor recommendation? lol"
                    }
                ]
            },
            {
                "conversation_id": "16",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2019-11-12T17:02:31.571000",
                        "user": "Abbigail",
                        "text": "cursive is free for noncommercial projects i'd thought"
                    },
                    {
                        "message_number": "2",
                        "ts": "2019-11-12T17:03:40.741000",
                        "user": "Abbigail",
                        "text": "Anyway I'd recommend vscode lighttable lightmod emacs or vim."
                    },
                    {
                        "message_number": "3",
                        "ts": "2019-11-12T17:03:44.096000",
                        "user": "Abbigail",
                        "text": "I use emacs."
                    },
                    {
                        "message_number": "4",
                        "ts": "2019-11-12T17:04:13.309000",
                        "user": "Abbigail",
                        "text": "Specifically spacemacs which is a vimlike community maintained config"
                    },
                    {
                        "message_number": "5",
                        "ts": "2019-11-12T17:04:50.723000",
                        "user": "Abbigail",
                        "text": "@Johnny"
                    },
                    {
                        "message_number": "6",
                        "ts": "2019-11-12T17:13:14.208000",
                        "user": "Chandru",
                        "text": "do these make sense on windows?"
                    },
                    {
                        "message_number": "7",
                        "ts": "2019-11-12T17:13:23.776000",
                        "user": "Chandru",
                        "text": "I'm not sure about emacs and vim at least"
                    },
                    {
                        "message_number": "8",
                        "ts": "2019-11-12T18:22:03.875000",
                        "user": "Abbigail",
                        "text": "Emacs has a native windows version vscode and lighttable are both electron apps that work fine on windows and lightmod is actually just a dependency you add to your project that starts up a webserver to an editor site that has introspection on your project because it lives inside your project so all those options work on windows."
                    },
                    {
                        "message_number": "9",
                        "ts": "2019-11-12T19:10:35.375000",
                        "user": "Abbigail",
                        "text": "Not too bad honestly but it's enough that I haven't bothered to try it over emacs with CIDER. Currently cider is the most fullyfeatured clojure interaction tool outside of the integration between cursive and core.typed"
                    },
                    {
                        "message_number": "10",
                        "ts": "2019-11-13T22:34:32.746000",
                        "user": "Abbigail",
                        "text": "Not that I'm aware of. Also might consider using filterv which may be more performant there."
                    },
                    {
                        "message_number": "11",
                        "ts": "2019-11-13T22:35:20.619000",
                        "user": "Abbigail",
                        "text": "Since it will return the count in constant time instead of having to walk the list."
                    },
                    {
                        "message_number": "12",
                        "ts": "2019-11-13T22:39:39.353000",
                        "user": "Chandru",
                        "text": "Return types are actually still something that confuses me"
                    },
                    {
                        "message_number": "13",
                        "ts": "2019-11-13T22:40:36.196000",
                        "user": "Chandru",
                        "text": "I never really know whether a function returns a (lazy) sequence some collection or the collection type of the argument"
                    },
                    {
                        "message_number": "14",
                        "ts": "2019-11-13T22:41:16.818000",
                        "user": "Chandru",
                        "text": "I guess it's documented in the case of filter but it's still rather confusing"
                    },
                    {
                        "message_number": "15",
                        "ts": "2019-11-13T22:42:02.651000",
                        "user": "Abbigail",
                        "text": "So any function which is considered a sequence function will always return a lazy sequence. The way that you can tell a sequence function apart from a collection function is that in a sequence function the sequences come last in the argument list. In the case of collection functions The Collection comes as the first argument in the call."
                    }
                ]
            },
            {
                "conversation_id": "17",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2019-11-12T18:18:40.441000",
                        "user": "Railee",
                        "text": "it's been a while but if you install cygwin vim works great on windows"
                    },
                    {
                        "message_number": "2",
                        "ts": "2019-11-12T18:24:08.870000",
                        "user": "Railee",
                        "text": "yeah all are good.. I'm a lighttable user but will often vim around on the command line too"
                    },
                    {
                        "message_number": "3",
                        "ts": "2019-11-12T18:25:41.462000",
                        "user": "Abbigail",
                        "text": "The biggest gotcha with lightmod is that since it lives in your project if you cannot load your project due to a compile error or something it will not be able to start either."
                    },
                    {
                        "message_number": "4",
                        "ts": "2019-11-12T18:39:04.744000",
                        "user": "Chandru",
                        "text": "That sounds scary lol"
                    },
                    {
                        "message_number": "5",
                        "ts": "2019-11-12T19:50:48.469000",
                        "user": "Chandru",
                        "text": "Great must have overlooked that"
                    }
                ]
            },
            {
                "conversation_id": "18",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2019-11-12T19:49:44.386000",
                        "user": "Veada",
                        "text": "and just to confirm Cursive is free for noncommercial usage  when you go to get a license you can select noncommercial and then checkout for $0.00 and it\\'ll email you a license key that\\'s good for 6 months (and repeat every 6 months as necessary)"
                    }
                ]
            },
            {
                "conversation_id": "19",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2019-11-13T21:53:11.349000",
                        "user": "Chandru",
                        "text": "Is there some shortcut for `(count (filter pred coll))`?"
                    }
                ]
            },
            {
                "conversation_id": "20",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2019-11-13T22:14:56.562000",
                        "user": "Jaxiel",
                        "text": "Not afaik"
                    }
                ]
            },
            {
                "conversation_id": "21",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2019-11-14T11:36:14.970000",
                        "user": "Onur",
                        "text": "hey folks; is there an easy way to freeze time in tests?"
                    },
                    {
                        "message_number": "2",
                        "ts": "2019-11-14T11:48:10.518000",
                        "user": "Jaxiel",
                        "text": "Like pause half way through?"
                    },
                    {
                        "message_number": "3",
                        "ts": "2019-11-14T11:48:24.301000",
                        "user": "Jaxiel",
                        "text": "And open up a repl?"
                    },
                    {
                        "message_number": "4",
                        "ts": "2019-11-14T11:50:15.936000",
                        "user": "Onur",
                        "text": "i have a function that adds timestamps to a map and want to test that it adds the correct time"
                    },
                    {
                        "message_number": "5",
                        "ts": "2019-11-14T11:51:00.630000",
                        "user": "Onur",
                        "text": "in ruby i would do smth like ```rubyTimecop.freeze(Time.now) do # do my tests here  # time will be frozenend```"
                    },
                    {
                        "message_number": "6",
                        "ts": "2019-11-14T11:52:02.165000",
                        "user": "Jaxiel",
                        "text": "Ohhh you're wanting to mock getting time?"
                    },
                    {
                        "message_number": "7",
                        "ts": "2019-11-14T11:52:28.359000",
                        "user": "Onur",
                        "text": "exactly; found an article about it that suggest in can be done but it's from 2012 :/"
                    },
                    {
                        "message_number": "8",
                        "ts": "2019-11-14T11:52:51.801000",
                        "user": "Jaxiel",
                        "text": "It's probably still fine. Clojure libraries don't change much"
                    },
                    {
                        "message_number": "9",
                        "ts": "2019-11-14T11:53:00.899000",
                        "user": "Jaxiel",
                        "text": "Send link"
                    },
                    {
                        "message_number": "10",
                        "ts": "2019-11-14T12:00:16.266000",
                        "user": "Onur",
                        "text": "http://blog.jayfields.com/2012/11/clojurefreezingtimeaddedto.html"
                    },
                    {
                        "message_number": "11",
                        "ts": "2019-11-14T12:00:40.288000",
                        "user": "Onur",
                        "text": "also i have no idea which time library to use"
                    },
                    {
                        "message_number": "12",
                        "ts": "2019-11-14T12:00:49.828000",
                        "user": "Onur",
                        "text": "it's pretty confusing for a beginner"
                    },
                    {
                        "message_number": "13",
                        "ts": "2019-11-14T12:02:26.123000",
                        "user": "Jaxiel",
                        "text": "Joda time will do you fine it's a wellused library"
                    },
                    {
                        "message_number": "14",
                        "ts": "2019-11-14T12:03:39.085000",
                        "user": "Jaxiel",
                        "text": "Otherwise... pick one and play with it and see if you like it?"
                    },
                    {
                        "message_number": "15",
                        "ts": "2019-11-14T12:06:14.244000",
                        "user": "Jaxiel",
                        "text": "Huh... actually maybe not joda time apparently it's fallen out"
                    },
                    {
                        "message_number": "16",
                        "ts": "2019-11-14T12:06:52.811000",
                        "user": "Onur",
                        "text": "just checked it and it provides a mock clock"
                    },
                    {
                        "message_number": "17",
                        "ts": "2019-11-14T12:07:14.507000",
                        "user": "Jaxiel",
                        "text": "Aye just looking at```The Joda Time website says: Note that from Java SE 8 onwards users are asked to migrate to java.time (JSR310)  a core part of the JDK which replaces this project.```"
                    },
                    {
                        "message_number": "18",
                        "ts": "2019-11-14T12:07:28.764000",
                        "user": "Jaxiel",
                        "text": "But it should still do you decently"
                    },
                    {
                        "message_number": "19",
                        "ts": "2019-11-14T12:07:32.133000",
                        "user": "Onur",
                        "text": "yup that's what i'm using atm"
                    },
                    {
                        "message_number": "20",
                        "ts": "2019-11-14T12:15:29.108000",
                        "user": "Onur",
                        "text": "wrapping my test in with `(withclock (mockclock 0) ... ` lock time to `19700101` \ud83c\udf89"
                    },
                    {
                        "message_number": "21",
                        "ts": "2019-11-14T12:15:54.039000",
                        "user": "Onur",
                        "text": "thanks for the help!"
                    },
                    {
                        "message_number": "22",
                        "ts": "2019-11-14T12:16:45.156000",
                        "user": "Onur",
                        "text": "next time I'll read the readme carefully \ud83d\ude04"
                    }
                ]
            },
            {
                "conversation_id": "22",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2019-11-14T21:23:02.420000",
                        "user": "Chandru",
                        "text": "What's better/more idiomatic?`(apply + coll)` or `(reduce + coll)`?"
                    },
                    {
                        "message_number": "2",
                        "ts": "2019-11-14T21:30:55.671000",
                        "user": "Veada",
                        "text": "my opinion is apply because `+` is variadic and apply just says says call this function on all the things where reduce says (essentially) keep applying this function one result at a time"
                    },
                    {
                        "message_number": "3",
                        "ts": "2019-11-14T21:34:21.485000",
                        "user": "Brix",
                        "text": "Or at least implemented as a loop internally."
                    },
                    {
                        "message_number": "4",
                        "ts": "2019-11-14T21:35:13.717000",
                        "user": "Brix",
                        "text": "Oh huh it's implemented using reduce."
                    },
                    {
                        "message_number": "5",
                        "ts": "2019-11-14T21:35:17.330000",
                        "user": "Brix",
                        "text": "Fancy that."
                    },
                    {
                        "message_number": "6",
                        "ts": "2019-11-14T21:35:58.658000",
                        "user": "Veada",
                        "text": "in the case of `+` as a variadic function the difference is probably negligible but with a function like `str` the variadic form uses a StringBuilder to build up the string and then finally create one String whereas reduce would keep creating new StringBuilders and Strings for each reduction"
                    },
                    {
                        "message_number": "7",
                        "ts": "2019-11-14T21:36:23.105000",
                        "user": "Brix",
                        "text": "Oh yea you'd almost certainly want to apply str."
                    },
                    {
                        "message_number": "8",
                        "ts": "2019-11-14T21:37:16.387000",
                        "user": "Brix",
                        "text": "My concern was more born out of variadic `+` causing a stack overflow."
                    },
                    {
                        "message_number": "9",
                        "ts": "2019-11-14T21:38:01.204000",
                        "user": "Brix",
                        "text": "Any time I see stuff using apply on large collections on the jvm I get a little nervous tbh."
                    },
                    {
                        "message_number": "10",
                        "ts": "2019-11-14T21:38:27.522000",
                        "user": "Brix",
                        "text": "Easy for a slightly naive implementation to blow up."
                    },
                    {
                        "message_number": "11",
                        "ts": "2019-11-14T21:39:57.203000",
                        "user": "Brix",
                        "text": "Looks like the variadic str actually uses an inline `recur`sive anonymous function and a string builder."
                    },
                    {
                        "message_number": "12",
                        "ts": "2019-11-14T21:41:48.148000",
                        "user": "Veada",
                        "text": "yeah  I imagine that's why the author avoided implementing it in terms of reduce"
                    },
                    {
                        "message_number": "13",
                        "ts": "2019-11-14T23:09:26.169000",
                        "user": "Abbigail",
                        "text": "I have a lot of faith in Rich having thought of that"
                    },
                    {
                        "message_number": "14",
                        "ts": "2019-11-15T04:19:05.390000",
                        "user": "Brix",
                        "text": "Sure I'd imagine just about anything in clojure's stdlib is fair game."
                    },
                    {
                        "message_number": "15",
                        "ts": "2019-11-15T16:23:36.716000",
                        "user": "Florentino",
                        "text": "one aspect of `reduce`'s usage is generalise this binary function to any number of arguments so in cases where the function can already take any number of arguments `apply` more precisely matches the intent i think. also of course it means you get to use the function author's intended semantics for that case as with `str`"
                    }
                ]
            },
            {
                "conversation_id": "23",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2019-11-14T21:33:38.215000",
                        "user": "Brix",
                        "text": "Is `+` properly tail recursive tho?"
                    }
                ]
            },
            {
                "conversation_id": "24",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2019-11-16T22:43:58.797000",
                        "user": "Chandru",
                        "text": "I just implemented reverse polish notation and it's amazing how simple that is in clojure"
                    },
                    {
                        "message_number": "2",
                        "ts": "2019-11-16T22:44:08.260000",
                        "user": "Chandru",
                        "text": "No parsing required"
                    },
                    {
                        "message_number": "3",
                        "ts": "2019-11-16T22:44:46.249000",
                        "user": "Chandru",
                        "text": "And just 14 lines of code"
                    },
                    {
                        "message_number": "4",
                        "ts": "2019-11-16T22:45:28.246000",
                        "user": "Chandru",
                        "text": "This stuff really keeps impressing me"
                    },
                    {
                        "message_number": "5",
                        "ts": "2019-11-17T10:07:00.106000",
                        "user": "Amiliano",
                        "text": "hehe \ud83d\ude04"
                    },
                    {
                        "message_number": "6",
                        "ts": "2019-11-17T10:07:05.275000",
                        "user": "Amiliano",
                        "text": "u were in desert my friend"
                    },
                    {
                        "message_number": "7",
                        "ts": "2019-11-17T10:07:17.680000",
                        "user": "Amiliano",
                        "text": "and u drank glass of water"
                    },
                    {
                        "message_number": "8",
                        "ts": "2019-11-17T10:07:32.729000",
                        "user": "Amiliano",
                        "text": "imagine when u take a nice bath in oasis that is clojure \ud83d\ude04"
                    },
                    {
                        "message_number": "9",
                        "ts": "2019-11-17T21:17:19.535000",
                        "user": "Chandru",
                        "text": "I'll be happy to use it or even contribute once I've gotten more used to Clojure"
                    },
                    {
                        "message_number": "10",
                        "ts": "2019-11-17T21:19:45.667000",
                        "user": "Chandru",
                        "text": "And honestly I feel you I'm still a student but I've always used Java since I started programming"
                    }
                ]
            },
            {
                "conversation_id": "25",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2019-11-17T16:27:07.295000",
                        "user": "Abbigail",
                        "text": "I'm writing OO java at work with 15 minute build times and 10 minute deploy times. Every day I miss clojure."
                    }
                ]
            },
            {
                "conversation_id": "26",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2019-11-17T21:08:21.282000",
                        "user": "Brix",
                        "text": "oof..."
                    },
                    {
                        "message_number": "2",
                        "ts": "2019-11-17T21:12:50.040000",
                        "user": "Abbigail",
                        "text": "Yeah. I love the people I'm working with but the code kills me a little bit inside every day. And this is why I'm picking up discljord again and trying to finish this rewrite because the CSP and functional style is super refreshing by comparison."
                    },
                    {
                        "message_number": "3",
                        "ts": "2019-11-17T21:18:09.072000",
                        "user": "Chandru",
                        "text": "It's all still pretty new for me but I'm starting to get the hang of it."
                    },
                    {
                        "message_number": "4",
                        "ts": "2019-11-17T21:21:35.888000",
                        "user": "Chandru",
                        "text": "I read somewhere that everything in the OOP universe ever since its creation has been trying to fix it"
                    },
                    {
                        "message_number": "5",
                        "ts": "2019-11-17T21:21:52.225000",
                        "user": "Chandru",
                        "text": "That pretty much hits the nail on the head"
                    },
                    {
                        "message_number": "6",
                        "ts": "2019-11-17T21:23:53.020000",
                        "user": "Abbigail",
                        "text": "Absolutely. I can't say that there's any particular aspect of OOP that I actually like which is unique to OOP. Even someone like Uncle Bob at this point now isn't defending the normal ideas of OOP he just says that Polymorphism=OOP in one of his more recent posts titled `FP vs OO`"
                    },
                    {
                        "message_number": "7",
                        "ts": "2019-11-17T21:25:49.927000",
                        "user": "Abbigail",
                        "text": "He adds the additional restriction that for polymorphism to equal OOP there must also not be a sourcecode dependence from the caller to the callee and Clojure's multimethods fit that bill meaning that according to Robert C. Martin Clojure's protocols are basically the simplest implementation of OOP and Clojure's multimethods would also qualify along with CLOS (no surprise on that one) plenty of lisp's polymorphismbased macros Traits in Rust typeclasses in Haskell and so many other things."
                    },
                    {
                        "message_number": "8",
                        "ts": "2019-11-17T21:36:23.825000",
                        "user": "Chandru",
                        "text": "The thing I realised is that I never even really tried to write proper OOP i.e. the way Java is designed for. Functional ideas are even considered good practice in OOP by now like immutable classes. Or all these patterns e.g. the strategy pattern and whatnot"
                    },
                    {
                        "message_number": "9",
                        "ts": "2019-11-17T21:37:07.379000",
                        "user": "Abbigail",
                        "text": "Which with patterns I found that probably about 8090% of the usages of patterns that I've seen fall apart as soon as functions are firstclass values."
                    },
                    {
                        "message_number": "10",
                        "ts": "2019-11-17T21:37:31.731000",
                        "user": "Abbigail",
                        "text": "In that things which clasically require hundreds of lines of boilerplate come down to a single lambda passed to something."
                    },
                    {
                        "message_number": "11",
                        "ts": "2019-11-17T21:37:54.351000",
                        "user": "Chandru",
                        "text": "Yeah"
                    },
                    {
                        "message_number": "12",
                        "ts": "2019-11-17T21:39:24.095000",
                        "user": "Chandru",
                        "text": "This stuff is always sold as being the simplest way\". But if you really think about it OOP is incredibly complex and I don\\'t judge people anymore who fail at it"
                    },
                    {
                        "message_number": "13",
                        "ts": "2019-11-17T21:40:36.064000",
                        "user": "Abbigail",
                        "text": "I think Casey Muratori has a good perspective on it that was summed up well after one of his streams here: https://www.youtube.com/watch?v=GKYCA3UsmrU"
                    },
                    {
                        "message_number": "14",
                        "ts": "2019-11-17T21:41:31.466000",
                        "user": "Abbigail",
                        "text": "If you think of things from what steps does the computer have to do then most things won\\'t end up with objects in the same way. And while it\\'s not malicous for objects to appear in your code it should arise naturally as a solution to your problem and not because you were trying to shoehorn your problem into the space of objects."
                    },
                    {
                        "message_number": "15",
                        "ts": "2019-11-17T21:42:14.900000",
                        "user": "Abbigail",
                        "text": "Although in the context of Clojure Haskell and other highlevel languages and it\\'s not so much what steps does the computer have to do it\\'s more what logical transformations need to happen to my data"
                    },
                    {
                        "message_number": "16",
                        "ts": "2019-11-17T21:42:29.153000",
                        "user": "Chandru",
                        "text": "Yeah right"
                    },
                    {
                        "message_number": "17",
                        "ts": "2019-11-17T21:42:50.614000",
                        "user": "Chandru",
                        "text": "That's why I think procedural programming is actually the best start for newcomers"
                    },
                    {
                        "message_number": "18",
                        "ts": "2019-11-17T21:43:25.993000",
                        "user": "Chandru",
                        "text": "Or rather just simple scripting"
                    },
                    {
                        "message_number": "19",
                        "ts": "2019-11-17T21:43:35.553000",
                        "user": "Abbigail",
                        "text": "Casey has a really good style of programming that he calls compression oriented programming where the idea is to always write the stupidest solution to the problem and to only ever worry about abstracting something if you start having to write it again."
                    },
                    {
                        "message_number": "20",
                        "ts": "2019-11-17T21:44:46.285000",
                        "user": "Abbigail",
                        "text": "Which I think may be where I finally was able to figure out a way to word my general opinion on code and part of why I like lisps so much that being that if I have to write something more than a couple times then it's a deficiency of the language because I should be able to operate in the space of only specifying how things are different from the common pattern. I shouldn't have to specify the common pattern."
                    },
                    {
                        "message_number": "21",
                        "ts": "2019-11-17T21:45:16.990000",
                        "user": "Abbigail",
                        "text": "Or at least I shouldn't have to specify the common pattern more than once."
                    },
                    {
                        "message_number": "22",
                        "ts": "2019-11-17T21:46:44.823000",
                        "user": "Chandru",
                        "text": "> Casey has a really good style of programming that he calls compression oriented programming where the idea is to always write the stupidest solution to the problem and to only ever worry about abstracting something if you start having to write it again.That\\'s funny"
                    },
                    {
                        "message_number": "23",
                        "ts": "2019-11-17T21:47:55.534000",
                        "user": "Chandru",
                        "text": "It depends on what stupidest means but that doesn\\'t sound like something I could be friends with"
                    },
                    {
                        "message_number": "24",
                        "ts": "2019-11-17T21:48:55.414000",
                        "user": "Abbigail",
                        "text": "Well the idea is that you should never worry about abstracting something if you aren't using it more than once. No reason to create generic functions and code for doing something until you do it multiple times."
                    },
                    {
                        "message_number": "25",
                        "ts": "2019-11-17T21:49:35.528000",
                        "user": "Abbigail",
                        "text": "So stupidest means that it doesn\\'t concern itself with abstraction it is readable and it does the job to the full extent of what\\'s required of it."
                    },
                    {
                        "message_number": "26",
                        "ts": "2019-11-17T21:50:02.549000",
                        "user": "Chandru",
                        "text": "Hmm there are often cases where the abstraction jumps right into my face"
                    },
                    {
                        "message_number": "27",
                        "ts": "2019-11-17T21:50:24.377000",
                        "user": "Chandru",
                        "text": "And it doesn't feel right if I take the simple step of making it generic"
                    },
                    {
                        "message_number": "28",
                        "ts": "2019-11-17T21:50:34.569000",
                        "user": "Chandru",
                        "text": "For example"
                    },
                    {
                        "message_number": "29",
                        "ts": "2019-11-17T21:51:45.481000",
                        "user": "Chandru",
                        "text": "https://github.com/JohnnyJayJay/DailyCodingProblem/blob/master/src/november19/08.clj"
                    },
                    {
                        "message_number": "30",
                        "ts": "2019-11-17T21:52:21.396000",
                        "user": "Chandru",
                        "text": "There my task was to find the first recurring element in a string"
                    },
                    {
                        "message_number": "31",
                        "ts": "2019-11-17T21:52:24.245000",
                        "user": "Abbigail",
                        "text": "why call hashset instead of just #{}?"
                    },
                    {
                        "message_number": "32",
                        "ts": "2019-11-17T21:52:39.603000",
                        "user": "Chandru",
                        "text": "It was no effort to make it applicable for any collection"
                    },
                    {
                        "message_number": "33",
                        "ts": "2019-11-17T21:52:44.881000",
                        "user": "Chandru",
                        "text": "So I did it"
                    },
                    {
                        "message_number": "34",
                        "ts": "2019-11-17T21:53:09.184000",
                        "user": "Abbigail",
                        "text": "Sure because the default way of doing things in Clojure is in terms of the seq abstraction."
                    },
                    {
                        "message_number": "35",
                        "ts": "2019-11-17T21:53:15.762000",
                        "user": "Chandru",
                        "text": "> why call hashset instead of just #{}?Yeah I forgot about set literals when I made this lol"
                    },
                    {
                        "message_number": "36",
                        "ts": "2019-11-17T21:53:18.458000",
                        "user": "Abbigail",
                        "text": "That's not against how you would do things with compression oriented programming."
                    },
                    {
                        "message_number": "37",
                        "ts": "2019-11-17T21:53:38.910000",
                        "user": "Abbigail",
                        "text": "The difference is that you didn't have to spend extra time developing an abstraction you'd never use again."
                    },
                    {
                        "message_number": "38",
                        "ts": "2019-11-17T21:54:10.269000",
                        "user": "Chandru",
                        "text": "I would have done it in Java too"
                    },
                    {
                        "message_number": "39",
                        "ts": "2019-11-17T21:54:28.039000",
                        "user": "Chandru",
                        "text": "Make a method that accepts any array"
                    },
                    {
                        "message_number": "40",
                        "ts": "2019-11-17T21:55:47.686000",
                        "user": "Chandru",
                        "text": "It wouldn't have been any harder either so I'd just go for it"
                    },
                    {
                        "message_number": "41",
                        "ts": "2019-11-17T21:55:49.192000",
                        "user": "Abbigail",
                        "text": "That requires a tiny bit more effort on the part of the caller since you have to call getBytes but other than that it remains the same"
                    },
                    {
                        "message_number": "42",
                        "ts": "2019-11-17T21:56:40.902000",
                        "user": "Abbigail",
                        "text": "The difference is that for example when I was writing a rasterizer in C++ instead of simply writing some structures to represent 3x3 matrices and some to represent 4x4 matricies I immediately saw that as an opportunity for abstraction and started writing an NxN implementation. That wasted a lot of time and wasn't necessary."
                    },
                    {
                        "message_number": "43",
                        "ts": "2019-11-17T21:57:43.939000",
                        "user": "Chandru",
                        "text": "Or here another small example from my Clojure journeyhttps://github.com/JohnnyJayJay/DailyCodingProblem/blob/master/src/november19/10.clj"
                    },
                    {
                        "message_number": "44",
                        "ts": "2019-11-17T21:58:07.914000",
                        "user": "Chandru",
                        "text": "The assignment was: make it work for 32bit binary numbers"
                    },
                    {
                        "message_number": "45",
                        "ts": "2019-11-17T21:58:20.367000",
                        "user": "Chandru",
                        "text": "I made it work for any number with base n"
                    },
                    {
                        "message_number": "46",
                        "ts": "2019-11-17T21:59:57.774000",
                        "user": "Chandru",
                        "text": "I don't know how I would act in your matrix example but I'd probably do the same"
                    },
                    {
                        "message_number": "47",
                        "ts": "2019-11-17T22:00:11.374000",
                        "user": "Abbigail",
                        "text": "Again you're using examples of trivial abstraction. Abstraction which consists of basically replacing usage of a constant with usage of a parameter. That's not what compression oriented programming is saying to avoid."
                    },
                    {
                        "message_number": "48",
                        "ts": "2019-11-17T22:01:31.611000",
                        "user": "Abbigail",
                        "text": "But yeah making the NxN matrix stuff in C++ was absolutely a mistake and if your reaction would have been to also try writing that then I'd recommend that next time you feel the itch to do a bit of abstraction like that stop and ask if it'll get used. The mistake of starting to do that wasted 6 hours of my time on an assignment where the rest took me all of 3 hours."
                    },
                    {
                        "message_number": "49",
                        "ts": "2019-11-17T22:02:36.367000",
                        "user": "Chandru",
                        "text": "I suppose it depends on the perspective"
                    },
                    {
                        "message_number": "50",
                        "ts": "2019-11-17T22:03:02.614000",
                        "user": "Chandru",
                        "text": "I almost always program for fun to try things out to learn new stuff"
                    },
                    {
                        "message_number": "51",
                        "ts": "2019-11-17T22:03:18.635000",
                        "user": "Abbigail",
                        "text": "Ah well that's also fair. In that case then it could easily be worth it."
                    },
                    {
                        "message_number": "52",
                        "ts": "2019-11-17T22:03:52.231000",
                        "user": "Abbigail",
                        "text": "I also program for fun but I almost always have a specific end goal and I have so many projects I want to work on that I don't feel like it's beneficial for me to puts around doing random abstraction for the sake of it."
                    },
                    {
                        "message_number": "53",
                        "ts": "2019-11-17T22:04:13.675000",
                        "user": "Chandru",
                        "text": "I see that"
                    },
                    {
                        "message_number": "54",
                        "ts": "2019-11-17T22:04:36.313000",
                        "user": "Abbigail",
                        "text": "Especially since getting a job and having less free time that I have the brain power to program in. Amusingly I have way more free time now than I did for the last five years but I just don't have the brain power to program in as much of that free time."
                    },
                    {
                        "message_number": "55",
                        "ts": "2019-11-17T22:04:50.002000",
                        "user": "Chandru",
                        "text": "Understandable"
                    },
                    {
                        "message_number": "56",
                        "ts": "2019-11-17T22:06:03.880000",
                        "user": "Chandru",
                        "text": "If I think about it I\\'ve definitely wasted a lot of time reasoning about general solutions but I don\\'t view it as a waste of time right now because it has somewhat benefited me"
                    },
                    {
                        "message_number": "57",
                        "ts": "2019-11-17T22:06:21.713000",
                        "user": "Chandru",
                        "text": "I mean I started programming 2 years ago"
                    },
                    {
                        "message_number": "58",
                        "ts": "2019-11-17T22:06:32.432000",
                        "user": "Abbigail",
                        "text": "Yeah at this point I mostly consider it a waste since I've been programming for coming up on 12 years."
                    },
                    {
                        "message_number": "59",
                        "ts": "2019-11-17T22:06:42.318000",
                        "user": "Chandru",
                        "text": "So I don't feel like I can get anything big done anyway lol"
                    },
                    {
                        "message_number": "60",
                        "ts": "2019-11-17T22:06:59.378000",
                        "user": "Abbigail",
                        "text": "And doing abstractions has been in my brain for over half of my life so I'm just trying to get some things done."
                    },
                    {
                        "message_number": "61",
                        "ts": "2019-11-17T22:07:25.087000",
                        "user": "Chandru",
                        "text": "I reckon I'll get there eventually"
                    },
                    {
                        "message_number": "62",
                        "ts": "2019-11-17T22:07:28.842000",
                        "user": "Abbigail",
                        "text": "Abstraction is good but good abstraction is hard to make and bad abstraction is often worse than no abstraction. That's the biggest lesson I've learned from that over the years."
                    },
                    {
                        "message_number": "63",
                        "ts": "2019-11-17T22:08:01.178000",
                        "user": "Chandru",
                        "text": ":BrillianceThumbsUp:"
                    },
                    {
                        "message_number": "64",
                        "ts": "2019-11-17T22:08:09.363000",
                        "user": "Chandru",
                        "text": "What language do you learn?"
                    },
                    {
                        "message_number": "65",
                        "ts": "2019-11-17T22:08:25.606000",
                        "user": "Abbigail",
                        "text": "Last I counted I'd programmed in over 30 languages."
                    },
                    {
                        "message_number": "66",
                        "ts": "2019-11-17T22:08:38.872000",
                        "user": "Abbigail",
                        "text": "I'm comfortable sitting down and writing around 14 right now."
                    },
                    {
                        "message_number": "67",
                        "ts": "2019-11-17T22:08:50.865000",
                        "user": "Chandru",
                        "text": "I mean the spoken one you mentioned"
                    },
                    {
                        "message_number": "68",
                        "ts": "2019-11-17T22:08:55.399000",
                        "user": "Abbigail",
                        "text": "Oh lol"
                    },
                    {
                        "message_number": "69",
                        "ts": "2019-11-17T22:09:22.935000",
                        "user": "Abbigail",
                        "text": "lojban. It's the fifth language I've studied besides my native one (english) and it's the only one I've actually gotten conversational with."
                    },
                    {
                        "message_number": "70",
                        "ts": "2019-11-17T22:10:39.226000",
                        "user": "Abbigail",
                        "text": "I've studied in order spanish latin hebrew german and lojban. Studied the first four for about 2 years each never got anywhere with them. I've studied lojban for just over a year and I'm pretty good with it I just need to increase my vocabulary a bit more for some of the use cases which are common in everyday life but not common with the people I speak to in it."
                    },
                    {
                        "message_number": "71",
                        "ts": "2019-11-17T22:10:56.742000",
                        "user": "Chandru",
                        "text": "Holy cow"
                    },
                    {
                        "message_number": "72",
                        "ts": "2019-11-17T22:11:06.675000",
                        "user": "Chandru",
                        "text": "I didn't even know such languages existed"
                    },
                    {
                        "message_number": "73",
                        "ts": "2019-11-17T22:11:20.715000",
                        "user": "Chandru",
                        "text": "(Lojban not the others)"
                    },
                    {
                        "message_number": "74",
                        "ts": "2019-11-17T22:11:33.945000",
                        "user": "Abbigail",
                        "text": "Yeah it's definitely pretty interesting."
                    },
                    {
                        "message_number": "75",
                        "ts": "2019-11-17T22:11:50.202000",
                        "user": "Abbigail",
                        "text": "I'm currently trying to write a mini novel in lojban."
                    },
                    {
                        "message_number": "76",
                        "ts": "2019-11-17T22:15:40.248000",
                        "user": "Chandru",
                        "text": "Good luck with that"
                    },
                    {
                        "message_number": "77",
                        "ts": "2019-11-17T22:16:03.204000",
                        "user": "Abbigail",
                        "text": "Thanks! I'm about 3.5k words in out of 50k"
                    },
                    {
                        "message_number": "78",
                        "ts": "2019-11-17T22:16:06.471000",
                        "user": "Chandru",
                        "text": "I'm just trying to further improve my English at this point"
                    },
                    {
                        "message_number": "79",
                        "ts": "2019-11-17T22:16:21.348000",
                        "user": "Chandru",
                        "text": "My seven years attempt at french was a mistake"
                    },
                    {
                        "message_number": "80",
                        "ts": "2019-11-17T22:16:24.808000",
                        "user": "Abbigail",
                        "text": "Fair enough. I always wanted to be bilingual. Languages have always facinated me."
                    },
                    {
                        "message_number": "81",
                        "ts": "2019-11-17T22:17:22.492000",
                        "user": "Chandru",
                        "text": "I rather see them as tools to communicate"
                    },
                    {
                        "message_number": "82",
                        "ts": "2019-11-17T22:17:31.997000",
                        "user": "Chandru",
                        "text": "And beyond that they don't interest me too much"
                    },
                    {
                        "message_number": "83",
                        "ts": "2019-11-17T22:18:33.237000",
                        "user": "Abbigail",
                        "text": "I agree actually which makes me amused when some people take linguistics further into philosophy. I really like the way that lojban makes it easier to express emotions and can clear up some common miscommunications. That's part of why I started learning it."
                    },
                    {
                        "message_number": "84",
                        "ts": "2019-11-17T22:19:51.877000",
                        "user": "Chandru",
                        "text": "I guess most artificial languages are objectively better to communicate"
                    },
                    {
                        "message_number": "85",
                        "ts": "2019-11-17T22:20:04.636000",
                        "user": "Abbigail",
                        "text": "I wouldn't agree with that at all"
                    },
                    {
                        "message_number": "86",
                        "ts": "2019-11-17T22:20:16.466000",
                        "user": "Chandru",
                        "text": "It's just a guess"
                    },
                    {
                        "message_number": "87",
                        "ts": "2019-11-17T22:20:58.175000",
                        "user": "Chandru",
                        "text": "Or at least I'd guess so if the designers knew what they were doing and successfully identified problems of other languages"
                    },
                    {
                        "message_number": "88",
                        "ts": "2019-11-17T22:22:31.877000",
                        "user": "Abbigail",
                        "text": "Yeah it's that there's a lot that goes into making a language usable. There's things like toki pona which only has 123 words which means that to communicate you have to simplify things to an extreme that makes complex communication effectively impossible. On the other side you have ithkuil which is set up to condense information into as tight a space as possible both in writing and in speaking and as a result it's impossible to synthesize it at a reasonable speaking rate because it is far faster than our brains and then there's things like esperanto which are very successful but have problems that they're very eurocentric which is somewhat counter to the goal of being a language to bring the world together under a common tongue."
                    },
                    {
                        "message_number": "89",
                        "ts": "2019-11-17T22:26:11.334000",
                        "user": "Chandru",
                        "text": "Very interesting"
                    },
                    {
                        "message_number": "90",
                        "ts": "2019-11-17T22:27:06.369000",
                        "user": "Chandru",
                        "text": "I think everybody once had this idea of one common language but I feel like many people don't know about these attempts"
                    },
                    {
                        "message_number": "91",
                        "ts": "2019-11-17T22:27:10.188000",
                        "user": "Chandru",
                        "text": "Including me lol"
                    },
                    {
                        "message_number": "92",
                        "ts": "2019-11-17T22:27:32.504000",
                        "user": "Chandru",
                        "text": "At least I've never heard about them"
                    },
                    {
                        "message_number": "93",
                        "ts": "2019-11-17T22:34:04.480000",
                        "user": "Abbigail",
                        "text": "Yeah they don't get a lot of publicity even though esperanto has millions of speakers and hundreds or thousands of native speakers"
                    },
                    {
                        "message_number": "94",
                        "ts": "2019-11-18T09:10:12.196000",
                        "user": "Ethaniel",
                        "text": "The art is growing. I\\'ve been conlanging (constructing languages) for over 8 years and the Reddit community alone has quadrupled in that time."
                    },
                    {
                        "message_number": "95",
                        "ts": "2019-11-18T09:10:59.831000",
                        "user": "Ethaniel",
                        "text": "People have created all sorts of beautiful wonderful interesting conlangs but I end up just making really regularised logical ones too."
                    },
                    {
                        "message_number": "96",
                        "ts": "2019-11-18T09:12:35.809000",
                        "user": "Ethaniel",
                        "text": "Sometimes when I get stuck on grammar I write my verbs as Clojure functions sentences as forms. It's like an EDN conlang but it's not very good for speaking \ud83d\ude06 Computers are good at counting and forward expectations humans brains are really kinda flat thinking."
                    },
                    {
                        "message_number": "97",
                        "ts": "2019-11-26T13:34:12.520000",
                        "user": "Ethaniel",
                        "text": "I have the dependency `[uswitch/lambada 0.1.2\"]` and its sole dependency is `[com.amazonaws/awslambdajavacore 1.1.0\"]` when inspecting the project with `lein deps :tree`Can I force `lambada` to use `awslambdajavacore 1.2.0\"`?"
                    },
                    {
                        "message_number": "98",
                        "ts": "2019-11-26T15:39:08.056000",
                        "user": "Abbigail",
                        "text": "you can add an exclusion for it and manually add a version."
                    },
                    {
                        "message_number": "99",
                        "ts": "2019-11-26T15:40:08.811000",
                        "user": "Abbigail",
                        "text": "Or if you are using deps.edn just including the toplevel dependency on it would do it too even without exclusions."
                    },
                    {
                        "message_number": "100",
                        "ts": "2019-11-26T22:23:37.633000",
                        "user": "Ethaniel",
                        "text": "That's cool thank you :)"
                    },
                    {
                        "message_number": "101",
                        "ts": "2019-11-26T22:24:04.710000",
                        "user": "Ethaniel",
                        "text": "I tried :manageddependencies too which worked."
                    }
                ]
            },
            {
                "conversation_id": "27",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2019-11-17T22:05:14.943000",
                        "user": "Abbigail",
                        "text": "Yet for some reason I have the brain power to learn a spoken language. But hey at least now I'm close to bilingual which has been a goal of mine forever."
                    }
                ]
            },
            {
                "conversation_id": "28",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2019-12-02T05:55:24.422000",
                        "user": "Hades",
                        "text": "Hey just a quick question about using loop/recur: Can I have multiple recur statements with a single loop? i.e ```(loop [var x] (cond  (= x a) x (= x b) (recur (+ x 1)) (= x c) (recur (+ x 2))))```"
                    },
                    {
                        "message_number": "2",
                        "ts": "2019-12-02T05:55:26.603000",
                        "user": "Hades",
                        "text": "Or something ilke that?"
                    },
                    {
                        "message_number": "3",
                        "ts": "2019-12-02T05:57:35.492000",
                        "user": "Chandru",
                        "text": "Yes you can"
                    },
                    {
                        "message_number": "4",
                        "ts": "2019-12-02T05:57:52.867000",
                        "user": "Chandru",
                        "text": "As long as they're all in tail position"
                    },
                    {
                        "message_number": "5",
                        "ts": "2019-12-02T05:58:17.975000",
                        "user": "Chandru",
                        "text": "I.e. the last statement in the recur scope"
                    },
                    {
                        "message_number": "6",
                        "ts": "2019-12-02T05:59:39.494000",
                        "user": "Hades",
                        "text": "Ah"
                    },
                    {
                        "message_number": "7",
                        "ts": "2019-12-02T05:59:39.853000",
                        "user": "Hades",
                        "text": "Ok"
                    },
                    {
                        "message_number": "8",
                        "ts": "2019-12-02T06:03:21.613000",
                        "user": "Hades",
                        "text": "thank you!"
                    },
                    {
                        "message_number": "9",
                        "ts": "2019-12-02T06:18:11.346000",
                        "user": "Abbigail",
                        "text": "Yeah as long as nothing uses the return value of recur in the scope of the loop or recursive function you're good."
                    },
                    {
                        "message_number": "10",
                        "ts": "2019-12-02T06:18:59.459000",
                        "user": "Abbigail",
                        "text": "As a general rule anyway Johnny was more precise for sure."
                    },
                    {
                        "message_number": "11",
                        "ts": "2019-12-02T06:38:07.831000",
                        "user": "Hades",
                        "text": "okie got it"
                    },
                    {
                        "message_number": "12",
                        "ts": "2019-12-02T06:38:08.930000",
                        "user": "Hades",
                        "text": "Thank you!"
                    },
                    {
                        "message_number": "13",
                        "ts": "2019-12-02T06:42:10.724000",
                        "user": "Hades",
                        "text": "Hrm"
                    },
                    {
                        "message_number": "14",
                        "ts": "2019-12-02T06:42:14.281000",
                        "user": "Hades",
                        "text": "Can I wrap a recur with a let?"
                    },
                    {
                        "message_number": "15",
                        "ts": "2019-12-02T06:42:31.323000",
                        "user": "Hades",
                        "text": "Like"
                    },
                    {
                        "message_number": "16",
                        "ts": "2019-12-02T06:43:19.050000",
                        "user": "Hades",
                        "text": "I have something that I need to use twice inside my recur"
                    },
                    {
                        "message_number": "17",
                        "ts": "2019-12-02T06:43:24.329000",
                        "user": "Hades",
                        "text": "But I don't want to compute it twice"
                    },
                    {
                        "message_number": "18",
                        "ts": "2019-12-02T06:43:47.280000",
                        "user": "Brix",
                        "text": "Yup as long as the let is in the tail position and the recur is in the tail of the let."
                    },
                    {
                        "message_number": "19",
                        "ts": "2019-12-02T06:44:01.183000",
                        "user": "Hades",
                        "text": "okie"
                    },
                    {
                        "message_number": "20",
                        "ts": "2019-12-02T06:44:02.372000",
                        "user": "Hades",
                        "text": "thank you!"
                    }
                ]
            },
            {
                "conversation_id": "29",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2019-12-11T16:12:47.927000",
                        "user": "Ethaniel",
                        "text": "Is there a better idiom than`(let [{:keys [k1 k2 k3]} {(returnakeyword) true}] ...)`to bind potential keywords?"
                    },
                    {
                        "message_number": "2",
                        "ts": "2019-12-11T16:13:14.770000",
                        "user": "Ethaniel",
                        "text": "I haven't read about that one anywhere it's just how I've approached the problem"
                    },
                    {
                        "message_number": "3",
                        "ts": "2019-12-11T16:17:58.706000",
                        "user": "Ethaniel",
                        "text": "And maybe binding isn\\'t the right word,but I\\'d like it so when a function returns only one of several possible keys is truthy"
                    },
                    {
                        "message_number": "4",
                        "ts": "2019-12-11T16:22:48.046000",
                        "user": "Ethaniel",
                        "text": "It's so then instead of `(if (= :k1 result) ...` I can do `(if k1 ...)`"
                    }
                ]
            },
            {
                "conversation_id": "30",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2019-12-11T16:44:22.116000",
                        "user": "Florentino",
                        "text": "seems fishy to me"
                    },
                    {
                        "message_number": "2",
                        "ts": "2019-12-11T16:44:30.930000",
                        "user": "Florentino",
                        "text": "thinking"
                    },
                    {
                        "message_number": "3",
                        "ts": "2019-12-11T16:45:19.363000",
                        "user": "Florentino",
                        "text": "wait that's a condp"
                    },
                    {
                        "message_number": "4",
                        "ts": "2019-12-11T16:45:44.396000",
                        "user": "Florentino",
                        "text": "```clj(condp = result :k1 (f) :k2 (g) :k3 (h))```"
                    },
                    {
                        "message_number": "5",
                        "ts": "2019-12-11T16:57:08.939000",
                        "user": "Ethaniel",
                        "text": "Thing is I use it for logic all over the place"
                    },
                    {
                        "message_number": "6",
                        "ts": "2019-12-11T16:58:16.026000",
                        "user": "Ethaniel",
                        "text": "For example a hypothetical function which returns :north :east :south :westAfter the let I'd be testing if it's one of the four a lot like if composing Hiccup HTML"
                    },
                    {
                        "message_number": "7",
                        "ts": "2019-12-11T16:59:40.012000",
                        "user": "Ethaniel",
                        "text": "It seems fishy to me too hence I'm asking for another idiom \ud83d\ude06"
                    },
                    {
                        "message_number": "8",
                        "ts": "2019-12-11T17:05:24.062000",
                        "user": "Florentino",
                        "text": "maybe look into a rules engine too"
                    },
                    {
                        "message_number": "9",
                        "ts": "2019-12-11T17:05:36.783000",
                        "user": "Florentino",
                        "text": "http://www.clararules.org/"
                    },
                    {
                        "message_number": "10",
                        "ts": "2019-12-11T18:43:53.645000",
                        "user": "Ethaniel",
                        "text": "Is there `count` with a predicate in core? Rather than `(count (filter pred coll))`?"
                    },
                    {
                        "message_number": "11",
                        "ts": "2019-12-11T18:44:24.037000",
                        "user": "Ethaniel",
                        "text": "It'd be cool if `count` accepted a predicate"
                    },
                    {
                        "message_number": "12",
                        "ts": "2019-12-11T19:13:55.025000",
                        "user": "Veada",
                        "text": "I don\\'t know of one but I think that generally it\\'d be cool if X is sort of a contributing factor to huge core libraries :)"
                    },
                    {
                        "message_number": "13",
                        "ts": "2019-12-15T15:57:24.738000",
                        "user": "Abbigail",
                        "text": "Well if you include all your script dependencies in your user deps.edn then that would be one way. The other is to compile an uberjar or native image from it using cambada or similar."
                    }
                ]
            },
            {
                "conversation_id": "31",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2019-12-15T14:39:27.284000",
                        "user": "Araiya",
                        "text": "Wanted to use deps.edn instead of always building projects with leiningen if I only need a simple script with a few dependencies. But now I'm wondering if there's a way to consolidate the deps.edn and clj files into one so a script and its dependencies can be totally contained in one file?"
                    }
                ]
            },
            {
                "conversation_id": "32",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2019-12-15T21:58:18.920000",
                        "user": "Annalynne",
                        "text": "How do I use flags such as https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/util/regex/Pattern.html#DOTALL when using Clojure's regex functions?"
                    },
                    {
                        "message_number": "2",
                        "ts": "2019-12-15T22:02:19.885000",
                        "user": "Annalynne",
                        "text": "Oh I guess I can use flag expressions at the beginning of the regex"
                    }
                ]
            },
            {
                "conversation_id": "33",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2019-12-17T03:55:25.661000",
                        "user": "Devam",
                        "text": "Hi are there any projects that heavily uses `funcool/cats` or any other monad library? Would like to learn from it about how they use it."
                    },
                    {
                        "message_number": "2",
                        "ts": "2019-12-17T03:57:39.108000",
                        "user": "Devam",
                        "text": "Particularly on how far they integrate with normal clojure code."
                    },
                    {
                        "message_number": "3",
                        "ts": "2019-12-17T17:06:48.269000",
                        "user": "Neal",
                        "text": "i'm doing a small hackernewsish thing to better learn clojure. is making a protocol for query insertion and specs and records for posts/users and stuffs good model. Also when to use maps vs records? And though it doesn't matter for a small project do they have significant performance differences?"
                    },
                    {
                        "message_number": "4",
                        "ts": "2019-12-17T17:49:55.272000",
                        "user": "Veada",
                        "text": "performancewise records create fields for their explicit keys so you're likely to get better read performance than retrieving a value from a map"
                    },
                    {
                        "message_number": "5",
                        "ts": "2019-12-17T17:57:54.978000",
                        "user": "Veada",
                        "text": "as far as the protocols go it sounds like the things you're talking about using protocols for aren't all that different from core functions like filter and conj so I'm not sure if they'd be warranted  it seems like query and insertion would be on collections of things rather than the things themselves"
                    },
                    {
                        "message_number": "6",
                        "ts": "2019-12-18T09:44:57.362000",
                        "user": "Florentino",
                        "text": "@feroxide you probably don't need records. stick with maps until you're sure you need otherwise"
                    }
                ]
            }
        ]
    },
    {
        "team_domain": "Clojurians",
        "channel_name": "clojure",
        "month": "Feb2020-Apr2020",
        "start_date": "2020-02-15T23:02:46.362000",
        "end_date": "2020-04-26T21:17:48.937000",
        "messages": [
            {
                "conversation_id": "1",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-02-15T23:02:46.362000",
                        "user": "Ezrajames",
                        "text": "stm is really cool"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-02-17T04:01:24.728000",
                        "user": "Ezrajames",
                        "text": "is this server dead?"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-02-17T04:02:29.903000",
                        "user": "Alistair",
                        "text": "Not really?"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-02-17T04:02:32.071000",
                        "user": "Alistair",
                        "text": "But kinda"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-02-17T04:02:47.381000",
                        "user": "Alistair",
                        "text": "There's a few of us here who like to answer questions like me djeis and a few others."
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-02-22T19:13:50.692000",
                        "user": "Bettina",
                        "text": "And some of us looking for help on projects \ud83d\ude42"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-03-07T09:49:02.803000",
                        "user": "Alistair",
                        "text": "I think for the most part people have moved on to doing cljs via ReactNative for android development. I haven't seen any recent updates to the clojure on android project."
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-03-07T09:52:07.936000",
                        "user": "Alistair",
                        "text": "Although it looks like leindroid should still work even with the latest clojure versions. You just have to determine if the startup time that it provides is fast enough for you."
                    },
                    {
                        "message_number": "9",
                        "ts": "2020-03-07T09:54:49.114000",
                        "user": "Alistair",
                        "text": "Specifically though if you want to do clojure development on mobile I recommend https://expo.io/"
                    },
                    {
                        "message_number": "10",
                        "ts": "2020-03-07T09:55:37.984000",
                        "user": "Alistair",
                        "text": "It's a platform which provides a way to use reactnative for everything without having to write any native code either for android or ios."
                    },
                    {
                        "message_number": "11",
                        "ts": "2020-03-07T09:55:38.700000",
                        "user": "Alistair",
                        "text": "https://docs.expo.io/versions/latest/guides/usingclojurescript/"
                    },
                    {
                        "message_number": "12",
                        "ts": "2020-03-09T05:55:32.420000",
                        "user": "Bettina",
                        "text": "Expo is cool but just understand there are tradeoffs with that kind of software."
                    }
                ]
            },
            {
                "conversation_id": "2",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-03-07T04:40:36.692000",
                        "user": "Camaron",
                        "text": "Are efforts to make Clojure (on JVM) a viable development platform for Android abandoned?"
                    }
                ]
            },
            {
                "conversation_id": "3",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-03-08T02:17:18.490000",
                        "user": "Camaron",
                        "text": "Ooh interesting."
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-03-09T15:36:37.571000",
                        "user": "Kayshawn",
                        "text": "renatal is greatshadow cljs is getting great too"
                    }
                ]
            },
            {
                "conversation_id": "4",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-03-14T22:10:51.691000",
                        "user": "Rhian",
                        "text": "Hey i was just wondering if anyone could help me i have a sequence of `'(1 2 3 4 5)`And im wanting to find out the index of 5.for example in this case the result would be 4.Is there anything built into clojure to solve this?"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-03-14T22:19:15.195000",
                        "user": "Knowledge",
                        "text": "`(.indexOf (1 2 3 4 5) 5)`"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-03-14T22:19:32.472000",
                        "user": "Knowledge",
                        "text": "None"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-03-14T22:43:20.138000",
                        "user": "Alistair",
                        "text": "That works but if you want a lazy sequence of the indices of all matches you could do the following:`(map first (filter #(= 5 (second %)) (mapindexed vector (1 2 3 4 5))))`"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-03-15T02:01:22.778000",
                        "user": "Rhian",
                        "text": "\ud83e\udd26\\u200d\u2642\ufe0f Thanks guys"
                    }
                ]
            },
            {
                "conversation_id": "5",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-03-15T19:50:05.501000",
                        "user": "Rezki",
                        "text": "hey guys i want to add two lists as argument:user=> (defn share [a b] (a b))but if i call it i get:user=> (share  #_=> [1 2] [1 2])Execution error (IllegalArgumentException) at user/share (REPL:1).Key must be integer"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-03-15T19:51:09.019000",
                        "user": "Rezki",
                        "text": "None"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-03-15T19:51:33.563000",
                        "user": "Rezki",
                        "text": "anyone any idea what im doing wrong here?"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-03-15T19:51:44.858000",
                        "user": "Rezki",
                        "text": "can't i just pass two lists?"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-03-15T19:52:33.083000",
                        "user": "Rezki",
                        "text": "is there something special about passing lists in clojure?"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-03-15T20:44:02.904000",
                        "user": "Rezki",
                        "text": "i think i got it i have to give list return type"
                    }
                ]
            },
            {
                "conversation_id": "6",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-03-16T00:57:09.810000",
                        "user": "Tannen",
                        "text": "What are you trying to do exactly?"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-03-16T00:57:45.390000",
                        "user": "Tannen",
                        "text": "When you call `(a b)` you're calling `([1 2] [1 2])` which kinda doesn't work"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-03-16T00:58:26.475000",
                        "user": "Tannen",
                        "text": "If you were to call `([1 2] 0)` you'd get the 0th item since vectors can be called as functions provided their argument is an index"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-03-16T12:59:34.156000",
                        "user": "Rezki",
                        "text": "@lsenjov i want to write a program that takes a list of 8 elements and shares assign each two elements on a new list"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-03-16T12:59:59.338000",
                        "user": "Tannen",
                        "text": "Shares assign?"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-03-16T13:00:34.903000",
                        "user": "Tannen",
                        "text": "Can you give an example of input and output?"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-03-16T13:02:05.049000",
                        "user": "Tannen",
                        "text": "Are you talking like `(share [1 2 3 4 5 6 7 8]) ; [[1 2] [3 4] [5 6] [7 8]]`?"
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-03-16T13:03:02.801000",
                        "user": "Rezki",
                        "text": "@lsenjov exactly it should be card game and i have shuffled now 4 people get each two cards"
                    },
                    {
                        "message_number": "9",
                        "ts": "2020-03-16T13:03:19.712000",
                        "user": "Tannen",
                        "text": "Oh I see"
                    },
                    {
                        "message_number": "10",
                        "ts": "2020-03-16T13:03:35.754000",
                        "user": "Tannen",
                        "text": "Right so you've got some options"
                    },
                    {
                        "message_number": "11",
                        "ts": "2020-03-16T13:03:44.186000",
                        "user": "Tannen",
                        "text": "Gimme a tic"
                    },
                    {
                        "message_number": "12",
                        "ts": "2020-03-16T13:04:12.511000",
                        "user": "Tannen",
                        "text": "You can use `(partition 2 coll)`"
                    },
                    {
                        "message_number": "13",
                        "ts": "2020-03-16T13:04:17.755000",
                        "user": "Tannen",
                        "text": "http://clojuredocs.org/clojure.core/partition"
                    },
                    {
                        "message_number": "14",
                        "ts": "2020-03-16T13:05:12.794000",
                        "user": "Rezki",
                        "text": "nice thank you @lsenjov"
                    }
                ]
            },
            {
                "conversation_id": "7",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-03-16T18:57:13.825000",
                        "user": "Rezki",
                        "text": "so new this functional approach i need to adapt my thinking. does anyone know a good introduction to thinking in a functional style?"
                    }
                ]
            },
            {
                "conversation_id": "8",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-03-16T19:18:01.838000",
                        "user": "Bettina",
                        "text": "There's always the classic Are We There Yet? https://www.youtube.com/watch?v=E4RarTAZ2AY for the philosophical side"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-03-16T19:18:38.095000",
                        "user": "Bettina",
                        "text": "https://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf is a solid paper for why FP"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-03-16T19:19:36.126000",
                        "user": "Bettina",
                        "text": "https://www.youtube.com/watch?v=P76Vbsk_3J0 is helpful if you know Java"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-03-16T19:19:42.484000",
                        "user": "Rezki",
                        "text": "@WhoNeedszZz thanks i love rich hickeys talks they are addicting"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-03-16T19:19:47.371000",
                        "user": "Bettina",
                        "text": "Very!"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-03-16T19:20:09.834000",
                        "user": "Bettina",
                        "text": "https://www.braveclojure.com/ is a fantastic read and humorous to keep it interesting"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-03-16T19:21:36.970000",
                        "user": "Bettina",
                        "text": "It's difficult to explain how to think in it on a general level so I've found it most helpful to look at those kind of resources and then just practice using it until the coin drops"
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-03-16T19:21:48.019000",
                        "user": "Bettina",
                        "text": "Make note of the aha moments"
                    },
                    {
                        "message_number": "9",
                        "ts": "2020-03-16T19:22:35.619000",
                        "user": "Bettina",
                        "text": "Rich gives a fantastic explanation in the first talk I posted though"
                    },
                    {
                        "message_number": "10",
                        "ts": "2020-03-16T19:23:09.628000",
                        "user": "Rezki",
                        "text": "already watching thanks \ud83d\ude42"
                    },
                    {
                        "message_number": "11",
                        "ts": "2020-03-16T19:23:21.214000",
                        "user": "Bettina",
                        "text": "Right around the 30m mark"
                    },
                    {
                        "message_number": "12",
                        "ts": "2020-03-16T19:24:23.656000",
                        "user": "Bettina",
                        "text": "https://www.youtube.com/watch?v=f84n5oFoZBc is also really helpful and I think often overlooked"
                    },
                    {
                        "message_number": "13",
                        "ts": "2020-03-16T19:24:38.799000",
                        "user": "Bettina",
                        "text": "Design phase is critical"
                    },
                    {
                        "message_number": "14",
                        "ts": "2020-03-16T19:26:06.599000",
                        "user": "Rezki",
                        "text": "thanks @WhoNeedszZz"
                    }
                ]
            },
            {
                "conversation_id": "9",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-03-17T22:08:58.783000",
                        "user": "Rezki",
                        "text": "is conj short for conjure?"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-03-17T22:13:49.105000",
                        "user": "Osmundo",
                        "text": "Conjoin I think."
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-03-17T22:38:11.942000",
                        "user": "Rezki",
                        "text": "guys i am partioning cards in a small game in clojure. is it fine to just rename the output like this"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-03-17T22:38:15.414000",
                        "user": "Rezki",
                        "text": "None"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-03-17T22:40:08.056000",
                        "user": "Rezki",
                        "text": "i am basically giving first two cards to p1 and then the next cards to player 2. after i do this the first time i overwrite players with the changed data. is that perfectly fine to do?"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-03-17T22:40:53.768000",
                        "user": "Rezki",
                        "text": "i hope this question does not sound strange but functional thinking is not so familiar"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-03-17T22:56:03.454000",
                        "user": "Rezki",
                        "text": "i was thinking i can put the result directly in the function"
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-03-18T01:27:59.136000",
                        "user": "Rezki",
                        "text": "anyone any idea what my error is:"
                    },
                    {
                        "message_number": "9",
                        "ts": "2020-03-18T01:28:29.776000",
                        "user": "Rezki",
                        "text": "i want to return {:p1 1} in that function"
                    },
                    {
                        "message_number": "10",
                        "ts": "2020-03-18T01:30:48.997000",
                        "user": "Tannen",
                        "text": "Remove the outer parens"
                    },
                    {
                        "message_number": "11",
                        "ts": "2020-03-18T01:31:24.183000",
                        "user": "Tannen",
                        "text": "Wait hold on"
                    },
                    {
                        "message_number": "12",
                        "ts": "2020-03-18T01:31:34.311000",
                        "user": "Tannen",
                        "text": "You're just wanting something that returns what's given to it?"
                    },
                    {
                        "message_number": "13",
                        "ts": "2020-03-18T01:31:48.900000",
                        "user": "Tannen",
                        "text": "But in general remember that parens have different meaning than other languages"
                    },
                    {
                        "message_number": "14",
                        "ts": "2020-03-18T01:31:57.762000",
                        "user": "Tannen",
                        "text": "Parens actually _do something_ in lisps"
                    },
                    {
                        "message_number": "15",
                        "ts": "2020-03-18T01:32:27.199000",
                        "user": "Tannen",
                        "text": "It's trying to evaluate `{hi 1}` as a function not just return `{hi 1}`"
                    },
                    {
                        "message_number": "16",
                        "ts": "2020-03-18T01:32:42.320000",
                        "user": "Tannen",
                        "text": "Wait I was right just remove the outer parens"
                    },
                    {
                        "message_number": "17",
                        "ts": "2020-03-18T01:39:00.957000",
                        "user": "Rezki",
                        "text": "None"
                    },
                    {
                        "message_number": "18",
                        "ts": "2020-03-18T01:40:11.853000",
                        "user": "Rezki",
                        "text": "nice @lsenjov  that worked"
                    },
                    {
                        "message_number": "19",
                        "ts": "2020-03-18T01:40:35.960000",
                        "user": "Rezki",
                        "text": "i forgot ( is evaluating"
                    },
                    {
                        "message_number": "20",
                        "ts": "2020-03-18T01:41:08.386000",
                        "user": "Rezki",
                        "text": "some small pitfalls i have to get used to"
                    },
                    {
                        "message_number": "21",
                        "ts": "2020-03-18T01:49:54.529000",
                        "user": "Rezki",
                        "text": "is there a way to map a function with two arguments:"
                    },
                    {
                        "message_number": "22",
                        "ts": "2020-03-18T01:50:05.235000",
                        "user": "Rezki",
                        "text": "like this?"
                    },
                    {
                        "message_number": "23",
                        "ts": "2020-03-18T01:52:46.121000",
                        "user": "Tannen",
                        "text": "Yes but remember your expansion"
                    },
                    {
                        "message_number": "24",
                        "ts": "2020-03-18T01:53:07.004000",
                        "user": "Tannen",
                        "text": "That goes to `[(+ [1 2]) (+ [3 4])]`"
                    },
                    {
                        "message_number": "25",
                        "ts": "2020-03-18T01:53:41.582000",
                        "user": "Tannen",
                        "text": "(Also remember that `partial` and `apply` are functions)"
                    },
                    {
                        "message_number": "26",
                        "ts": "2020-03-18T03:24:50.715000",
                        "user": "Rezki",
                        "text": "None"
                    },
                    {
                        "message_number": "27",
                        "ts": "2020-03-18T03:25:13.411000",
                        "user": "Rezki",
                        "text": "i am getting an error if i type this"
                    },
                    {
                        "message_number": "28",
                        "ts": "2020-03-18T03:27:17.111000",
                        "user": "Rezki",
                        "text": "okay i will think about it thanks @lsenjov"
                    },
                    {
                        "message_number": "29",
                        "ts": "2020-03-18T16:56:47.964000",
                        "user": "Rezki",
                        "text": "yes @SlashDevSlashRandom thanks you both i get it"
                    },
                    {
                        "message_number": "30",
                        "ts": "2020-03-18T16:56:51.015000",
                        "user": "Rezki",
                        "text": "None"
                    },
                    {
                        "message_number": "31",
                        "ts": "2020-03-18T17:31:51.467000",
                        "user": "Bettina",
                        "text": "@david_node Just a heads up Discord supports code blocks with Clojure syntax highlighting (on desktop). Surround the code with two sets of 3 backticks and clojure after the first set"
                    },
                    {
                        "message_number": "32",
                        "ts": "2020-03-19T20:46:46.873000",
                        "user": "Rezki",
                        "text": "i started out with rich hickeys talks and i thought that his thoughts are so profound that i wanted to hear everything he has to say. some things i do not seem to grasp yet but it's these moments where you found someone who is thinking so different (than everybody else) and yet his arguments make sense. It's like discovering a new world which was there the whole time but you missed it because you simply did know it.I have this feeling that this is the language i learnt the fastest ever. the syntax and semantics are insanely easy. I just need to get familiar with basic functions and wrap my head around the functional way of thinking but this is insane. where are the downsides to this? can anyone relate to this?"
                    },
                    {
                        "message_number": "33",
                        "ts": "2020-03-19T21:06:55.213000",
                        "user": "Rezki",
                        "text": "why cant you say that it is a stable system?"
                    }
                ]
            },
            {
                "conversation_id": "10",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-03-18T01:53:26.970000",
                        "user": "Tannen",
                        "text": "What do you want it to look like?"
                    }
                ]
            },
            {
                "conversation_id": "11",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-03-18T03:34:09.942000",
                        "user": "Alipio",
                        "text": "what is your desired output from your map call?"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-03-18T03:45:49.826000",
                        "user": "Alipio",
                        "text": "The essence of what's happening there is that your parameter is a vector with two vectors in it so like lsenjov said that expansion is trying to make two calls to `+` each with one parameter of a vector and Clojure doesn't know how to add one vector e.g. `(+ [1 2])` doesn't really make sense (you probably want `(+ 1 2)`). So you could map `apply +` if you want to add the contents of each vector separately."
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-03-18T03:54:35.963000",
                        "user": "Alipio",
                        "text": "to your question about multiple arguments map has a form that takes more than one collection and it will call the function with the first element of each collection then the second element of each collection then the third element and so on until one of the collections is empty"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-03-18T04:01:50.574000",
                        "user": "Alipio",
                        "text": "for example:the `vector` function creates a vector of its arguments```clojure (vector 1 2)=> [1 2]```using `map` with multiple collections call vector for each position that exists in each collection```clojure (map vector [1 2 3] [\"first second third\"] [\"1st 2nd 3rd 4th\"])=> ([1 first 1st\"] [2 second 2nd\"] [3 third 3rd\"])```"
                    }
                ]
            },
            {
                "conversation_id": "12",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-03-19T20:48:18.049000",
                        "user": "Tannen",
                        "text": "Downsides?"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-03-19T20:48:19.075000",
                        "user": "Tannen",
                        "text": "Okay"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-03-19T20:48:29.472000",
                        "user": "Tannen",
                        "text": "So one it's hard for a lot of people to learn"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-03-19T20:48:45.362000",
                        "user": "Tannen",
                        "text": "Clojure is very opinionated and breaking years of programming habits are hard"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-03-19T20:48:51.101000",
                        "user": "Tannen",
                        "text": "Two lisp syntax scares people"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-03-19T20:49:14.922000",
                        "user": "Tannen",
                        "text": "Three tooling is excellent but takes some time to get used to"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-03-19T20:49:27.621000",
                        "user": "Tannen",
                        "text": "Repl driven development is fucking weird compared to the norm"
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-03-19T20:49:50.604000",
                        "user": "Tannen",
                        "text": "Four it really needs spec 2 to get finished so people can start properly building tooling for it"
                    },
                    {
                        "message_number": "9",
                        "ts": "2020-03-19T20:50:26.907000",
                        "user": "Tannen",
                        "text": "The lack of saying it has a stable type system is a hard sell for a lot of people"
                    },
                    {
                        "message_number": "10",
                        "ts": "2020-03-19T20:51:07.957000",
                        "user": "Tannen",
                        "text": "(Yes spec isn\\'t a static type system but it needs to be stable so we can say hey look this is how you use the official thing and why it doesn\\'t need to be static\")"
                    },
                    {
                        "message_number": "11",
                        "ts": "2020-03-19T20:51:44.967000",
                        "user": "Tannen",
                        "text": "Five it's pretty fast but you can't really use it for anything needing blistering performance"
                    },
                    {
                        "message_number": "12",
                        "ts": "2020-03-19T20:52:13.800000",
                        "user": "Tannen",
                        "text": "So it's never going to be championed by the googles of the world where a 1% performance improvement is millions in yearly savings"
                    },
                    {
                        "message_number": "13",
                        "ts": "2020-03-19T20:52:40.233000",
                        "user": "Tannen",
                        "text": "Six lisp syntax scares people (seriously this is one of the biggest factors)"
                    },
                    {
                        "message_number": "14",
                        "ts": "2020-03-19T20:53:14.047000",
                        "user": "Tannen",
                        "text": "That's off the top of my head"
                    },
                    {
                        "message_number": "15",
                        "ts": "2020-03-19T20:53:28.828000",
                        "user": "Tannen",
                        "text": "Also while there's very little syntax there's a surprising number of reader macros that confuse readers"
                    },
                    {
                        "message_number": "16",
                        "ts": "2020-03-19T20:55:04.745000",
                        "user": "Tannen",
                        "text": "Especially when dealing with cljc files"
                    },
                    {
                        "message_number": "17",
                        "ts": "2020-03-19T20:55:24.110000",
                        "user": "Tannen",
                        "text": "Every time someone sees `#?@` it scares them a lot"
                    },
                    {
                        "message_number": "18",
                        "ts": "2020-03-19T21:01:09.325000",
                        "user": "Rezki",
                        "text": "thanks for elaborating on this @lsenjov  i really need to dig in more and check out what #?@ means. syntax is just the simplest i have ever encountered compared to other languages i think it is just a bit bewildering in the beginning."
                    },
                    {
                        "message_number": "19",
                        "ts": "2020-03-19T21:01:27.982000",
                        "user": "Tannen",
                        "text": "\ud83d\udc4d"
                    },
                    {
                        "message_number": "20",
                        "ts": "2020-03-19T21:01:48.087000",
                        "user": "Tannen",
                        "text": "`#?` and `#?@` are used in .cljc files"
                    },
                    {
                        "message_number": "21",
                        "ts": "2020-03-19T21:02:05.210000",
                        "user": "Tannen",
                        "text": ".cljc files compile to both clojure and clojurescript"
                    },
                    {
                        "message_number": "22",
                        "ts": "2020-03-19T21:02:28.680000",
                        "user": "Tannen",
                        "text": "And those reader conditionals are for doing platform specific code"
                    },
                    {
                        "message_number": "23",
                        "ts": "2020-03-19T21:02:33.212000",
                        "user": "Tannen",
                        "text": "Especially interop"
                    },
                    {
                        "message_number": "24",
                        "ts": "2020-03-19T21:02:52.443000",
                        "user": "Tannen",
                        "text": "Your `Integer/parseInt` won't work on the javascript side for instance"
                    },
                    {
                        "message_number": "25",
                        "ts": "2020-03-19T21:07:38.763000",
                        "user": "Tannen",
                        "text": "Because `Integer/parseInt` is specifically a Java call"
                    },
                    {
                        "message_number": "26",
                        "ts": "2020-03-19T21:07:58.022000",
                        "user": "Tannen",
                        "text": "The js side is `js/parseInt`"
                    },
                    {
                        "message_number": "27",
                        "ts": "2020-03-19T21:08:32.037000",
                        "user": "Tannen",
                        "text": "But `#?` allows you to specify how to parse an int on both platforms and use it interchangeably"
                    },
                    {
                        "message_number": "28",
                        "ts": "2020-03-19T21:08:46.673000",
                        "user": "Tannen",
                        "text": "Well there's a little more to it but that's why the reader conditional exists"
                    },
                    {
                        "message_number": "29",
                        "ts": "2020-03-19T21:09:14.005000",
                        "user": "Rezki",
                        "text": "and that makes the system not stable\". i dont understand"
                    },
                    {
                        "message_number": "30",
                        "ts": "2020-03-19T21:09:36.819000",
                        "user": "Tannen",
                        "text": "Wait what?"
                    },
                    {
                        "message_number": "31",
                        "ts": "2020-03-19T21:09:43.657000",
                        "user": "Tannen",
                        "text": "What do you mean not stable\"?"
                    },
                    {
                        "message_number": "32",
                        "ts": "2020-03-19T21:10:02.143000",
                        "user": "Rezki",
                        "text": "you said \\'The lack of saying it has a stable type system is a hard sell for a lot of people\\"
                    },
                    {
                        "message_number": "33",
                        "ts": "2020-03-19T21:10:05.455000",
                        "user": "Tannen",
                        "text": "Oh right type system"
                    },
                    {
                        "message_number": "34",
                        "ts": "2020-03-19T21:10:06.998000",
                        "user": "Tannen",
                        "text": "Okay"
                    },
                    {
                        "message_number": "35",
                        "ts": "2020-03-19T21:10:17.480000",
                        "user": "Rezki",
                        "text": "type system"
                    },
                    {
                        "message_number": "36",
                        "ts": "2020-03-19T21:10:19.523000",
                        "user": "Tannen",
                        "text": "So one thing that's been hard to sell to people is the dynamic nature"
                    },
                    {
                        "message_number": "37",
                        "ts": "2020-03-19T21:10:19.592000",
                        "user": "Rezki",
                        "text": "oh sorry"
                    },
                    {
                        "message_number": "38",
                        "ts": "2020-03-19T21:10:30.624000",
                        "user": "Tannen",
                        "text": "And spec/spec2 are still in alpha"
                    },
                    {
                        "message_number": "39",
                        "ts": "2020-03-19T21:10:36.259000",
                        "user": "Rezki",
                        "text": "yes got it \ud83d\ude42"
                    },
                    {
                        "message_number": "40",
                        "ts": "2020-03-19T21:10:51.823000",
                        "user": "Rezki",
                        "text": "will look into spec"
                    },
                    {
                        "message_number": "41",
                        "ts": "2020-03-19T21:10:53.232000",
                        "user": "Tannen",
                        "text": "So while I'm using spec at the moment I can't say it's fully ready"
                    },
                    {
                        "message_number": "42",
                        "ts": "2020-03-19T21:14:32.377000",
                        "user": "Rezki",
                        "text": "spec is the static type checker for clojure?"
                    },
                    {
                        "message_number": "43",
                        "ts": "2020-03-19T21:19:22.445000",
                        "user": "Tannen",
                        "text": "No it's not static"
                    },
                    {
                        "message_number": "44",
                        "ts": "2020-03-19T21:19:38.095000",
                        "user": "Tannen",
                        "text": "There's core.typed which is static but I don't know how much it's used"
                    },
                    {
                        "message_number": "45",
                        "ts": "2020-03-19T21:20:15.633000",
                        "user": "Tannen",
                        "text": "It's more that spec is the officially condoned way of checking data and it's not stable"
                    },
                    {
                        "message_number": "46",
                        "ts": "2020-03-19T21:20:26.100000",
                        "user": "Tannen",
                        "text": "It raises eyebrows when my requires have `clojure.spec.alpha` in them"
                    }
                ]
            },
            {
                "conversation_id": "13",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-03-19T21:48:21.655000",
                        "user": "Rezki",
                        "text": "i see i need to look into it"
                    }
                ]
            },
            {
                "conversation_id": "14",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-03-20T01:54:14.790000",
                        "user": "Bettina",
                        "text": "> So one it's hard for a lot of people to learn@lsenjov I don't agree with this. I would say the functional mindset is difficult for some to grasp but the language itself is one of the easiest languages to learn"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-03-20T01:55:43.313000",
                        "user": "Bettina",
                        "text": "> Five it's pretty fast but you can't really use it for anything needing blistering performance@lsenjov Don't agree with this either"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-03-20T01:56:26.900000",
                        "user": "Bettina",
                        "text": "Poor performance in Clojure is a design or implementation failure not a failure of the language"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-03-20T01:56:37.341000",
                        "user": "Bettina",
                        "text": "Android uses Java"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-03-20T01:57:51.111000",
                        "user": "Bettina",
                        "text": "In fact I don't consider any of those things you said as downsides of the language but downsides of the people trying to learn it"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-03-20T02:01:16.704000",
                        "user": "Bettina",
                        "text": "Regarding spec sure it could be a bit more fleshed out toolwise but I haven't seen glaring issues regarding itself. Again I think you're just highlighting the many flaws in the ways many programmers do things that are in a completely different mindset and thus seem foreign to them. To me this is obvious and logical. When you're learning a foreign language do you not have the same struggles?"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-03-20T02:01:56.280000",
                        "user": "Tannen",
                        "text": "blistering meaning things like high end game Dev and other things where you need to squeeze out performance"
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-03-20T02:02:26.911000",
                        "user": "Tannen",
                        "text": "There's also a lot of programmers who can't unlearn previous things which is why it's hard for them to learn"
                    },
                    {
                        "message_number": "9",
                        "ts": "2020-03-20T02:02:36.472000",
                        "user": "Bettina",
                        "text": "That's a failure of the person not the language"
                    },
                    {
                        "message_number": "10",
                        "ts": "2020-03-20T02:03:03.635000",
                        "user": "Bettina",
                        "text": "And to your first statement well yeah. You don't use any general purpose language for a specific task like that"
                    },
                    {
                        "message_number": "11",
                        "ts": "2020-03-20T02:03:06.210000",
                        "user": "Tannen",
                        "text": "I know but these _are_ drawbacks when trying to use it commercially"
                    },
                    {
                        "message_number": "12",
                        "ts": "2020-03-20T02:03:07.040000",
                        "user": "Bettina",
                        "text": "So it's not really in scope"
                    },
                    {
                        "message_number": "13",
                        "ts": "2020-03-20T02:03:29.859000",
                        "user": "Bettina",
                        "text": "that depends on your hiring practices"
                    },
                    {
                        "message_number": "14",
                        "ts": "2020-03-20T02:03:32.857000",
                        "user": "Tannen",
                        "text": "Trying to actually find/hire clojure devs is painful"
                    },
                    {
                        "message_number": "15",
                        "ts": "2020-03-20T02:03:46.300000",
                        "user": "Bettina",
                        "text": "Says whom?"
                    },
                    {
                        "message_number": "16",
                        "ts": "2020-03-20T02:03:50.334000",
                        "user": "Tannen",
                        "text": "Because they don't exactly fall from trees"
                    },
                    {
                        "message_number": "17",
                        "ts": "2020-03-20T02:04:02.877000",
                        "user": "Tannen",
                        "text": "Us trying to find Aus based clojure devs"
                    },
                    {
                        "message_number": "18",
                        "ts": "2020-03-20T02:04:17.535000",
                        "user": "Bettina",
                        "text": "Of course not. Highly skilled people of any trade are difficult to find"
                    },
                    {
                        "message_number": "19",
                        "ts": "2020-03-20T02:04:53.347000",
                        "user": "Tannen",
                        "text": "I could have a dozen bites for a Ruby or Java dev in a week"
                    },
                    {
                        "message_number": "20",
                        "ts": "2020-03-20T02:05:05.708000",
                        "user": "Bettina",
                        "text": "Yeah and you get what you pay for too"
                    },
                    {
                        "message_number": "21",
                        "ts": "2020-03-20T02:05:24.545000",
                        "user": "Bettina",
                        "text": "Highly skilled programmers aren't looking for low ball offers"
                    },
                    {
                        "message_number": "22",
                        "ts": "2020-03-20T02:05:25.094000",
                        "user": "Tannen",
                        "text": "Look I agree with you on all these points"
                    },
                    {
                        "message_number": "23",
                        "ts": "2020-03-20T02:05:36.230000",
                        "user": "Tannen",
                        "text": "But these are still drawbacks to adoption"
                    },
                    {
                        "message_number": "24",
                        "ts": "2020-03-20T02:05:57.461000",
                        "user": "Bettina",
                        "text": "Well to be fair he asked what are the drawbacks of the language itself not specifically to commercial adoption"
                    },
                    {
                        "message_number": "25",
                        "ts": "2020-03-20T02:06:15.589000",
                        "user": "Bettina",
                        "text": "I understood his question to mean from a general learning pov"
                    },
                    {
                        "message_number": "26",
                        "ts": "2020-03-20T02:06:31.903000",
                        "user": "Bettina",
                        "text": "@david_node Is that accurate?"
                    },
                    {
                        "message_number": "27",
                        "ts": "2020-03-20T02:06:41.374000",
                        "user": "Tannen",
                        "text": "These are pain points I've been hitting recently so they're fresh in mind"
                    },
                    {
                        "message_number": "28",
                        "ts": "2020-03-20T02:06:52.789000",
                        "user": "Rezki",
                        "text": "@WhoNeedszZz exactly"
                    },
                    {
                        "message_number": "29",
                        "ts": "2020-03-20T02:07:08.504000",
                        "user": "Bettina",
                        "text": "Ok thought so"
                    },
                    {
                        "message_number": "30",
                        "ts": "2020-03-20T02:07:44.906000",
                        "user": "Bettina",
                        "text": "So yeah I totally understand your frustration @lsenjov. That's why I can't find work here in the US and had to start my own company. All I got were low ball offers that never work out"
                    },
                    {
                        "message_number": "31",
                        "ts": "2020-03-20T02:08:20.930000",
                        "user": "Rezki",
                        "text": "what does low ball mean?"
                    },
                    {
                        "message_number": "32",
                        "ts": "2020-03-20T02:08:32.686000",
                        "user": "Tannen",
                        "text": "Low pay"
                    },
                    {
                        "message_number": "33",
                        "ts": "2020-03-20T02:08:35.120000",
                        "user": "Bettina",
                        "text": "Low salary to your skill level"
                    },
                    {
                        "message_number": "34",
                        "ts": "2020-03-20T02:08:59.794000",
                        "user": "Bettina",
                        "text": "Like offering you $40k when you're worth 6 figures"
                    },
                    {
                        "message_number": "35",
                        "ts": "2020-03-20T02:09:31.788000",
                        "user": "Rezki",
                        "text": "but also the commercial side is an interesting point as well"
                    },
                    {
                        "message_number": "36",
                        "ts": "2020-03-20T02:09:37.264000",
                        "user": "Bettina",
                        "text": "It is"
                    },
                    {
                        "message_number": "37",
                        "ts": "2020-03-20T02:09:39.770000",
                        "user": "Bettina",
                        "text": "And it sucks"
                    },
                    {
                        "message_number": "38",
                        "ts": "2020-03-20T02:11:22.296000",
                        "user": "Bettina",
                        "text": "I can't speak to hiring practices in Australia but I know very well how it is in the US. They want to give you low pay give them !20% do multiple roles but not be too good to where you outshine your peers."
                    },
                    {
                        "message_number": "39",
                        "ts": "2020-03-20T02:11:38.039000",
                        "user": "Bettina",
                        "text": "It's totally insane"
                    },
                    {
                        "message_number": "40",
                        "ts": "2020-03-20T02:12:28.791000",
                        "user": "Bettina",
                        "text": "But if you give them 90100% to avoid the last bit they complain and say they know you can do better"
                    },
                    {
                        "message_number": "41",
                        "ts": "2020-03-20T02:12:32.360000",
                        "user": "Bettina",
                        "text": "Catch22 all of the way"
                    },
                    {
                        "message_number": "42",
                        "ts": "2020-03-20T02:14:22.303000",
                        "user": "Rezki",
                        "text": "sounds a bit contradicting. interesting you say language is easy to learn as well but that functional programming part is hard."
                    },
                    {
                        "message_number": "43",
                        "ts": "2020-03-20T02:14:49.102000",
                        "user": "Rezki",
                        "text": "that is exactly how i experience it"
                    },
                    {
                        "message_number": "44",
                        "ts": "2020-03-20T02:15:51.330000",
                        "user": "Rezki",
                        "text": "i have started writing a program and started mutating data with def just because my mind is so used to do so"
                    },
                    {
                        "message_number": "45",
                        "ts": "2020-03-20T02:17:06.382000",
                        "user": "Rezki",
                        "text": "it just a complete different way of thinking but with exercise i think the coin will toss"
                    },
                    {
                        "message_number": "46",
                        "ts": "2020-03-20T02:17:30.752000",
                        "user": "Bettina",
                        "text": "It sounds contradicting but it depends on your previous exposure. If you've never learned a functional language then any functional language will give you doubletakes. But if you've been exposed to the functional paradigm before it is trivial to learn Clojure"
                    },
                    {
                        "message_number": "47",
                        "ts": "2020-03-20T02:17:53.443000",
                        "user": "Bettina",
                        "text": "I had the luxury of being exposed to it previously in my personal and Comp Sci studies"
                    },
                    {
                        "message_number": "48",
                        "ts": "2020-03-20T02:18:11.196000",
                        "user": "Bettina",
                        "text": "I also had a professor that prefers the functional paradigm and taught Java using closures"
                    },
                    {
                        "message_number": "49",
                        "ts": "2020-03-20T02:18:21.776000",
                        "user": "Bettina",
                        "text": "It made it much easier to grasp"
                    },
                    {
                        "message_number": "50",
                        "ts": "2020-03-20T02:18:34.987000",
                        "user": "Bettina",
                        "text": "And our code had very few errors in it to boot"
                    },
                    {
                        "message_number": "51",
                        "ts": "2020-03-20T02:19:12.324000",
                        "user": "Bettina",
                        "text": "And this was before Java officially supported closures"
                    },
                    {
                        "message_number": "52",
                        "ts": "2020-03-20T02:19:15.961000",
                        "user": "Rezki",
                        "text": "nice seems like your professor was on a good path"
                    },
                    {
                        "message_number": "53",
                        "ts": "2020-03-20T02:19:26.097000",
                        "user": "Bettina",
                        "text": "Definitely"
                    },
                    {
                        "message_number": "54",
                        "ts": "2020-03-20T02:19:33.186000",
                        "user": "Bettina",
                        "text": "He's a Haskell guy"
                    },
                    {
                        "message_number": "55",
                        "ts": "2020-03-20T02:19:59.535000",
                        "user": "Rezki",
                        "text": "oh okay yeah makes sense then \ud83d\ude04"
                    },
                    {
                        "message_number": "56",
                        "ts": "2020-03-20T02:20:18.606000",
                        "user": "Bettina",
                        "text": "You want hard language to learn? That's the one"
                    },
                    {
                        "message_number": "57",
                        "ts": "2020-03-20T02:20:38.463000",
                        "user": "Tannen",
                        "text": "Australia's a mixed bag like most places but there's definitely a culture of avoiding burnout in most places I hear of"
                    },
                    {
                        "message_number": "58",
                        "ts": "2020-03-20T02:20:39.158000",
                        "user": "Rezki",
                        "text": "\ud83d\ude04"
                    },
                    {
                        "message_number": "59",
                        "ts": "2020-03-20T02:20:46.921000",
                        "user": "Bettina",
                        "text": "But I have to say I actually enjoyed it being written as math"
                    },
                    {
                        "message_number": "60",
                        "ts": "2020-03-20T02:21:12.482000",
                        "user": "Tannen",
                        "text": "Mainly because good programmers are in short supply and hiring is expensive so they do their best to not lose people"
                    },
                    {
                        "message_number": "61",
                        "ts": "2020-03-20T02:21:25.250000",
                        "user": "Bettina",
                        "text": "The opposite in the US"
                    },
                    {
                        "message_number": "62",
                        "ts": "2020-03-20T02:21:30.907000",
                        "user": "Bettina",
                        "text": "Burnout all day every day"
                    },
                    {
                        "message_number": "63",
                        "ts": "2020-03-20T02:21:41.920000",
                        "user": "Bettina",
                        "text": "Massive turnover rates"
                    },
                    {
                        "message_number": "64",
                        "ts": "2020-03-20T02:22:21.757000",
                        "user": "Bettina",
                        "text": "I often find a large part of it being some idiot director that knows nothing about programming calling the shots"
                    },
                    {
                        "message_number": "65",
                        "ts": "2020-03-20T02:22:49.932000",
                        "user": "Bettina",
                        "text": "And leads that haven\\'t programmed in 20 years"
                    },
                    {
                        "message_number": "66",
                        "ts": "2020-03-20T02:23:04.182000",
                        "user": "Bettina",
                        "text": "True story"
                    },
                    {
                        "message_number": "67",
                        "ts": "2020-03-20T02:24:50.630000",
                        "user": "Rezki",
                        "text": "i think it's worth trying to learn the functional paradigm. even if i will not work with clojure i can adapt it in other languages"
                    },
                    {
                        "message_number": "68",
                        "ts": "2020-03-20T02:25:41.893000",
                        "user": "Bettina",
                        "text": "In one of my positions we had discussed at length why we shouldn't use Redux unless the task absolutely demanded it. Whole team agreed including the lead that hadn't programmed in 20 years. Few weeks in to the project  we're using Redux now. What changed? Nothing. So why are we using it given everything we talked about? Because I said so."
                    },
                    {
                        "message_number": "69",
                        "ts": "2020-03-20T02:25:58.046000",
                        "user": "Bettina",
                        "text": "And not a single person on the team had used it before"
                    },
                    {
                        "message_number": "70",
                        "ts": "2020-03-20T02:26:49.419000",
                        "user": "Bettina",
                        "text": "Do you think the project got finished?"
                    },
                    {
                        "message_number": "71",
                        "ts": "2020-03-20T02:27:53.281000",
                        "user": "Rezki",
                        "text": "i guess not"
                    },
                    {
                        "message_number": "72",
                        "ts": "2020-03-20T02:28:15.956000",
                        "user": "Bettina",
                        "text": "> i think it's worth trying to learn the functional paradigm. even if i will not work with clojure i can adapt it in other languages@david_node You can absolutely use it in imperative languages. I would argue you write much more efficient and less errorprone code that way"
                    },
                    {
                        "message_number": "73",
                        "ts": "2020-03-20T02:28:36.808000",
                        "user": "Bettina",
                        "text": "Java with closures perfect example"
                    },
                    {
                        "message_number": "74",
                        "ts": "2020-03-20T02:29:00.770000",
                        "user": "Bettina",
                        "text": "But I think if you just stick with it you'll be successful"
                    },
                    {
                        "message_number": "75",
                        "ts": "2020-03-20T02:29:16.934000",
                        "user": "Bettina",
                        "text": "Most people that shit on functional languages gave up"
                    },
                    {
                        "message_number": "76",
                        "ts": "2020-03-20T02:29:23.546000",
                        "user": "Rezki",
                        "text": "i am thinking of python using immutable data"
                    },
                    {
                        "message_number": "77",
                        "ts": "2020-03-20T02:29:38.737000",
                        "user": "Bettina",
                        "text": "That would work. Python is a hybrid language anyway"
                    },
                    {
                        "message_number": "78",
                        "ts": "2020-03-20T02:29:44.210000",
                        "user": "Bettina",
                        "text": "You don't have to use classes at all"
                    },
                    {
                        "message_number": "79",
                        "ts": "2020-03-20T02:30:02.420000",
                        "user": "Bettina",
                        "text": "When I used Python I did exactly that"
                    },
                    {
                        "message_number": "80",
                        "ts": "2020-03-20T02:31:01.062000",
                        "user": "Rezki",
                        "text": "nice nice but sticking to clojure first is to get some discipline"
                    },
                    {
                        "message_number": "81",
                        "ts": "2020-03-20T02:31:02.286000",
                        "user": "Bettina",
                        "text": "What did you think of the OOP fallacy presented in Are We There Yet?"
                    },
                    {
                        "message_number": "82",
                        "ts": "2020-03-20T02:31:13.862000",
                        "user": "Rezki",
                        "text": "just loved it"
                    },
                    {
                        "message_number": "83",
                        "ts": "2020-03-20T02:31:27.782000",
                        "user": "Bettina",
                        "text": "I show that to anyone that praises OOP"
                    },
                    {
                        "message_number": "84",
                        "ts": "2020-03-20T02:31:30.612000",
                        "user": "Bettina",
                        "text": "And laugh"
                    },
                    {
                        "message_number": "85",
                        "ts": "2020-03-20T02:31:32.701000",
                        "user": "Rezki",
                        "text": "\ud83d\ude04"
                    },
                    {
                        "message_number": "86",
                        "ts": "2020-03-20T02:31:58.493000",
                        "user": "Bettina",
                        "text": "Entire class of errors gone by using functional mindset"
                    },
                    {
                        "message_number": "87",
                        "ts": "2020-03-20T02:32:02.624000",
                        "user": "Rezki",
                        "text": "i just love that we got the modeling of our world wrong"
                    },
                    {
                        "message_number": "88",
                        "ts": "2020-03-20T02:32:07.455000",
                        "user": "Bettina",
                        "text": "ikr"
                    },
                    {
                        "message_number": "89",
                        "ts": "2020-03-20T02:32:47.726000",
                        "user": "Bettina",
                        "text": "I thought this did a great job of explaining the pitfalls of Microservices: https://www.youtube.com/watch?v=BThkk5zv0DE"
                    },
                    {
                        "message_number": "90",
                        "ts": "2020-03-20T02:32:56.835000",
                        "user": "Bettina",
                        "text": "I would love to work for Derek"
                    },
                    {
                        "message_number": "91",
                        "ts": "2020-03-20T02:35:05.597000",
                        "user": "Rezki",
                        "text": "in a way rich hickey really went back to a very abstract level in order figure where the his problems were caused by and that is sooo damn genius"
                    },
                    {
                        "message_number": "92",
                        "ts": "2020-03-20T02:35:20.204000",
                        "user": "Bettina",
                        "text": "That's how to do it"
                    },
                    {
                        "message_number": "93",
                        "ts": "2020-03-20T02:35:37.884000",
                        "user": "Bettina",
                        "text": "If your tool doesn't allow you to do what you need use another tool"
                    },
                    {
                        "message_number": "94",
                        "ts": "2020-03-20T02:35:42.280000",
                        "user": "Bettina",
                        "text": "Tool doesn't exist? Make it"
                    },
                    {
                        "message_number": "95",
                        "ts": "2020-03-20T02:35:50.505000",
                        "user": "Rezki",
                        "text": "\ud83d\ude04"
                    },
                    {
                        "message_number": "96",
                        "ts": "2020-03-20T02:35:59.281000",
                        "user": "Rezki",
                        "text": "true"
                    },
                    {
                        "message_number": "97",
                        "ts": "2020-03-20T02:36:06.982000",
                        "user": "Bettina",
                        "text": "We have too many programmers that wait for other people to make the change"
                    },
                    {
                        "message_number": "98",
                        "ts": "2020-03-20T02:36:19.156000",
                        "user": "Bettina",
                        "text": "Sheep mentality"
                    },
                    {
                        "message_number": "99",
                        "ts": "2020-03-20T02:37:10.032000",
                        "user": "Rezki",
                        "text": "i have seen that LISP is used in quantum computer programming"
                    },
                    {
                        "message_number": "100",
                        "ts": "2020-03-20T02:37:39.083000",
                        "user": "Rezki",
                        "text": "clojure could as well take that spot probably"
                    },
                    {
                        "message_number": "101",
                        "ts": "2020-03-20T02:37:46.463000",
                        "user": "Bettina",
                        "text": "I believe so"
                    },
                    {
                        "message_number": "102",
                        "ts": "2020-03-20T02:37:58.356000",
                        "user": "Bettina",
                        "text": "I think Clojure has much more potential than what people are using it for"
                    },
                    {
                        "message_number": "103",
                        "ts": "2020-03-20T02:38:48.521000",
                        "user": "Bettina",
                        "text": "I used ClojureScript + reframe (+ reagent) and made a React site that performs better than a JS React site done the same way"
                    },
                    {
                        "message_number": "104",
                        "ts": "2020-03-20T02:39:22.292000",
                        "user": "Bettina",
                        "text": "Yet ClojureScript turns into vanilla JS"
                    },
                    {
                        "message_number": "105",
                        "ts": "2020-03-20T02:40:21.955000",
                        "user": "Rezki",
                        "text": "wow that is awesome. for me clojurescript is just another nice language feature."
                    },
                    {
                        "message_number": "106",
                        "ts": "2020-03-20T02:41:02.153000",
                        "user": "Rezki",
                        "text": "since it is there it could open many doors"
                    },
                    {
                        "message_number": "107",
                        "ts": "2020-03-20T02:41:35.224000",
                        "user": "Rezki",
                        "text": "i wonder if clojure will be the python of ten years before"
                    },
                    {
                        "message_number": "108",
                        "ts": "2020-03-20T02:42:10.258000",
                        "user": "Bettina",
                        "text": "That's the beauty of it. Clojure results in plain Java ClojureScript results in plain JS. That's why I don't really understand the feet dragging for commercial adoption. You don't have to redo your whole codebase. You can just write new things in it and go back and migrate when you have the time"
                    },
                    {
                        "message_number": "109",
                        "ts": "2020-03-20T02:45:38.398000",
                        "user": "Osmundo",
                        "text": "But there are a lot of cases where you can do that yea."
                    },
                    {
                        "message_number": "110",
                        "ts": "2020-03-20T02:45:44.257000",
                        "user": "Rezki",
                        "text": "way is practically laid out for people to go but they won't because it seems too risky probably and you dont want to be dependent on a bunch of clojure developers. where will you get them from?"
                    },
                    {
                        "message_number": "111",
                        "ts": "2020-03-20T02:45:57.666000",
                        "user": "Osmundo",
                        "text": "\ud83e\udd37\\u200d\u2642\ufe0f slow and steady expansion"
                    },
                    {
                        "message_number": "112",
                        "ts": "2020-03-20T02:46:10.683000",
                        "user": "Bettina",
                        "text": "People are afraid of risk"
                    },
                    {
                        "message_number": "113",
                        "ts": "2020-03-20T02:46:21.770000",
                        "user": "Bettina",
                        "text": "Even though they do risky things on a daily basis"
                    },
                    {
                        "message_number": "114",
                        "ts": "2020-03-20T02:46:23.930000",
                        "user": "Osmundo",
                        "text": "A few people screaming at the top of their lungs that it's awesome a lot more being reasonable and friendly."
                    },
                    {
                        "message_number": "115",
                        "ts": "2020-03-20T02:46:56.161000",
                        "user": "Bettina",
                        "text": "Huh?"
                    },
                    {
                        "message_number": "116",
                        "ts": "2020-03-20T02:47:30.885000",
                        "user": "Bettina",
                        "text": "Yes"
                    },
                    {
                        "message_number": "117",
                        "ts": "2020-03-20T02:47:34.768000",
                        "user": "Bettina",
                        "text": "Not sure what you meant there"
                    },
                    {
                        "message_number": "118",
                        "ts": "2020-03-20T02:47:51.516000",
                        "user": "Bettina",
                        "text": "Why is being vocal about it being great unreasonable?"
                    },
                    {
                        "message_number": "119",
                        "ts": "2020-03-20T02:47:52.604000",
                        "user": "Osmundo",
                        "text": "Was explaining how we get the developer base to actually change the industry."
                    },
                    {
                        "message_number": "120",
                        "ts": "2020-03-20T02:47:56.890000",
                        "user": "Osmundo",
                        "text": "Oh."
                    },
                    {
                        "message_number": "121",
                        "ts": "2020-03-20T02:48:30.747000",
                        "user": "Bettina",
                        "text": "Developers have very little ability to influence the higher ups"
                    },
                    {
                        "message_number": "122",
                        "ts": "2020-03-20T02:48:33.576000",
                        "user": "Osmundo",
                        "text": "I said screaming for a reason."
                    },
                    {
                        "message_number": "123",
                        "ts": "2020-03-20T02:48:46.911000",
                        "user": "Osmundo",
                        "text": "And I'm not saying having those people in the community is a bad thing."
                    },
                    {
                        "message_number": "124",
                        "ts": "2020-03-20T02:48:55.011000",
                        "user": "Osmundo",
                        "text": "They get the word out."
                    },
                    {
                        "message_number": "125",
                        "ts": "2020-03-20T02:49:01.314000",
                        "user": "Bettina",
                        "text": "Who is screaming though?"
                    },
                    {
                        "message_number": "126",
                        "ts": "2020-03-20T02:49:06.033000",
                        "user": "Osmundo",
                        "text": "But people that are that loud have a tendancy to also be uncompromising."
                    },
                    {
                        "message_number": "127",
                        "ts": "2020-03-20T02:49:06.412000",
                        "user": "Bettina",
                        "text": "I haven't seen these people"
                    },
                    {
                        "message_number": "128",
                        "ts": "2020-03-20T02:49:29.383000",
                        "user": "Osmundo",
                        "text": "I've run into a few. Heck I've been one of them from time to time."
                    },
                    {
                        "message_number": "129",
                        "ts": "2020-03-20T02:49:42.725000",
                        "user": "Bettina",
                        "text": "Where though?"
                    },
                    {
                        "message_number": "130",
                        "ts": "2020-03-20T02:49:52.822000",
                        "user": "Osmundo",
                        "text": "Online mostly."
                    },
                    {
                        "message_number": "131",
                        "ts": "2020-03-20T02:50:01.940000",
                        "user": "Bettina",
                        "text": "Certainly not here"
                    },
                    {
                        "message_number": "132",
                        "ts": "2020-03-20T02:50:08.745000",
                        "user": "Osmundo",
                        "text": "Oh no not on this discord."
                    },
                    {
                        "message_number": "133",
                        "ts": "2020-03-20T02:50:22.267000",
                        "user": "Bettina",
                        "text": "Maybe in the Slack but I couldn't keep up with it to really notice"
                    },
                    {
                        "message_number": "134",
                        "ts": "2020-03-20T02:50:40.956000",
                        "user": "Bettina",
                        "text": "And I ignore Reddit"
                    },
                    {
                        "message_number": "135",
                        "ts": "2020-03-20T02:50:44.524000",
                        "user": "Osmundo",
                        "text": "It's not the sort of thing you'd see in an actual clojure community no point preaching to the choir."
                    },
                    {
                        "message_number": "136",
                        "ts": "2020-03-20T02:50:50.913000",
                        "user": "Bettina",
                        "text": "True"
                    },
                    {
                        "message_number": "137",
                        "ts": "2020-03-20T02:50:58.470000",
                        "user": "Bettina",
                        "text": "Except on Reddit"
                    },
                    {
                        "message_number": "138",
                        "ts": "2020-03-20T02:51:02.491000",
                        "user": "Osmundo",
                        "text": "True lol"
                    },
                    {
                        "message_number": "139",
                        "ts": "2020-03-20T02:51:03.964000",
                        "user": "Bettina",
                        "text": "Reddit is a cesspool"
                    },
                    {
                        "message_number": "140",
                        "ts": "2020-03-20T02:51:23.498000",
                        "user": "Bettina",
                        "text": "You want to get downvoted for saying something easily verifiable? Post on Reddit"
                    },
                    {
                        "message_number": "141",
                        "ts": "2020-03-20T03:01:20.330000",
                        "user": "Rezki",
                        "text": "\ud83d\ude04"
                    },
                    {
                        "message_number": "142",
                        "ts": "2020-03-20T04:28:05.238000",
                        "user": "Rezki",
                        "text": "for composition"
                    },
                    {
                        "message_number": "143",
                        "ts": "2020-03-20T04:28:08.022000",
                        "user": "Bettina",
                        "text": "They are all useful"
                    },
                    {
                        "message_number": "144",
                        "ts": "2020-03-21T23:14:08.618000",
                        "user": "Rezki",
                        "text": "so strange"
                    }
                ]
            },
            {
                "conversation_id": "15",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-03-20T02:45:16.374000",
                        "user": "Osmundo",
                        "text": "Well there are still some integration issues just adding clojure into an existing java codebase."
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-03-20T02:47:26.936000",
                        "user": "Osmundo",
                        "text": "Me?"
                    }
                ]
            },
            {
                "conversation_id": "16",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-03-20T04:27:45.327000",
                        "user": "Rezki",
                        "text": "i thought filter and map were important but now i think it reduce is really key"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-03-21T23:13:49.307000",
                        "user": "Rezki",
                        "text": "i just realized that i am actually executing function after function after function."
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-03-21T23:43:37.200000",
                        "user": "Alipio",
                        "text": "well in a really abstract way most languages can be thought of as a bunch of function calls but in a language like Clojure you primarily just have values and functions so if you're going to execute something it's gonna be a function :)"
                    }
                ]
            },
            {
                "conversation_id": "17",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-03-21T23:49:08.218000",
                        "user": "Ludwig",
                        "text": "Hi all! How would you import a library like this https://github.com/lambdaisland/trikl using leiningen? It's made with deps.edn not on clojars..."
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-03-22T00:30:27.486000",
                        "user": "Alipio",
                        "text": "Not to be superpedantic but that's sort of not a library in the sense that it doesn't appear to be packaged for distribution. You could clone that repo build it and deploy it to a local maven repo or you could create some version of a checkout dependency (<https://github.com/technomancy/leiningen/blob/master/doc/TUTORIAL.md#checkoutdependencies>)"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-03-22T00:30:46.548000",
                        "user": "Alipio",
                        "text": "those are the ideas that come to mind off the top of my head"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-03-22T01:55:32.368000",
                        "user": "Ludwig",
                        "text": "@SlashDevSlashRandom I agree with you looks like it doesn't want to be used xD... anyway thanks for the tips!"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-03-22T01:59:22.091000",
                        "user": "Alistair",
                        "text": "leiningen plugins also provide ways to use gitbased dependencies"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-03-22T01:59:38.809000",
                        "user": "Alistair",
                        "text": "Also clj deps are designed to be used from git"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-03-22T02:00:07.779000",
                        "user": "Alistair",
                        "text": "I'd definitely say a readme that full wants to be used though"
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-03-22T02:00:56.257000",
                        "user": "Ludwig",
                        "text": "> Also clj deps are designed to be used from git@srasu oh i didn't know that"
                    },
                    {
                        "message_number": "9",
                        "ts": "2020-03-22T02:02:23.660000",
                        "user": "Alistair",
                        "text": "Yes so for a long time the cljnew tool for the tools.deps ecosystem was done entirely out of git."
                    },
                    {
                        "message_number": "10",
                        "ts": "2020-03-22T02:05:43.833000",
                        "user": "Ludwig",
                        "text": "nice! I'll read about that and try it out... thanks!"
                    },
                    {
                        "message_number": "11",
                        "ts": "2020-03-22T02:38:02.977000",
                        "user": "Alistair",
                        "text": "Leiningen plugins require using leiningen yeah unfortunately they aren't crosscompatible with the deps.edn ecosystem. If you really need git dependencies and leinengen plugins try this one: https://github.com/reifyhealth/leingitdown"
                    },
                    {
                        "message_number": "12",
                        "ts": "2020-03-22T02:51:32.589000",
                        "user": "Ludwig",
                        "text": "it worked with leingitdown too! cool! =D```:dependencies [[org.clojure/clojure 1.10.0\"] [lambdaisland/trikl 8c27a347a96ce66762510f0a87cca66e5713bdec\"]]:plugins [[reifyhealth/leingitdown 0.3.6\"]]:repositories [[\"publicgithub {:url git://github.com\"}]]```"
                    },
                    {
                        "message_number": "13",
                        "ts": "2020-03-22T18:07:04.537000",
                        "user": "Ludwig",
                        "text": "I wish dependency management was easier/clearer... it may be just me but I always have problems trying to put stuff together not just clojure but in general... nowadays i'm just tired and endup not doing anything \ud83d\ude1b"
                    },
                    {
                        "message_number": "14",
                        "ts": "2020-03-22T18:07:12.317000",
                        "user": "Ludwig",
                        "text": "but I'm glad I asked... learned something new haha"
                    },
                    {
                        "message_number": "15",
                        "ts": "2020-03-22T18:08:28.326000",
                        "user": "Ludwig",
                        "text": "though I understand it's a hard problem to solve definitively... i don't know..."
                    },
                    {
                        "message_number": "16",
                        "ts": "2020-03-22T18:17:25.008000",
                        "user": "Alistair",
                        "text": "Yeah dependency management was part of what the clojure commandline tools are supposed to help resolve."
                    },
                    {
                        "message_number": "17",
                        "ts": "2020-03-22T18:24:04.820000",
                        "user": "Ludwig",
                        "text": "i think it helps... but when things go wrong i get lost \ud83d\ude1b i'll study a bit more about java dependencies in general leiningen and deps.edn to see what i find"
                    }
                ]
            },
            {
                "conversation_id": "18",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-03-22T02:21:00.951000",
                        "user": "Rezki",
                        "text": "@SlashDevSlashRandom yes you are right"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-03-22T02:36:30.905000",
                        "user": "Ludwig",
                        "text": "@srasu @SlashDevSlashRandom creating a project with a deps.edn with dependency on the git repo worked... I guess that's the way it was meant to be then... tried some plugins for leiningen but none of them worked (because trikl it's not using leiningen i believe).... But I found https://jitpack.io/ which seems simple to use could be useful someday.. thank you all!"
                    }
                ]
            },
            {
                "conversation_id": "19",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-03-22T06:38:48.049000",
                        "user": "Bettina",
                        "text": "> Not to be superpedantic but that's sort of not a library in the sense that it doesn't appear to be packaged for distribution. You could clone that repo build it and deploy it to a local maven repo or you could create some version of a checkout dependency (<https://github.com/technomancy/leiningen/blob/master/doc/TUTORIAL.md#checkoutdependencies>)@SlashDevSlashRandom To be totally pedantic a library doesn't have to be easily distributable to be a library. It simply provides code for other code to consume rather than be built as an executable. \ud83d\ude0b"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-03-22T06:43:01.126000",
                        "user": "Bettina",
                        "text": "Libraries existed long before version control existed"
                    }
                ]
            },
            {
                "conversation_id": "20",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-03-22T20:48:21.850000",
                        "user": "Bettina",
                        "text": "@blahblubliblu https://research.swtch.com/deps"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-03-22T20:48:32.728000",
                        "user": "Bettina",
                        "text": "We're up shits creek without a paddle when it comes to deps"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-03-22T20:51:38.272000",
                        "user": "Bettina",
                        "text": "That article explains the issues very clearly"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-03-22T20:52:14.294000",
                        "user": "Bettina",
                        "text": "And you always have Rich to say the same thing: https://www.youtube.com/watch?v=oytL881pnQ"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-03-22T20:52:36.662000",
                        "user": "Bettina",
                        "text": "Can't remember where exactly in that talk he mentions it but he does"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-03-22T21:00:46.682000",
                        "user": "Ludwig",
                        "text": "I remember Rich talking about semantic versioning not sure if it's in this talk"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-03-22T21:01:51.027000",
                        "user": "Ludwig",
                        "text": "i'll give the article a read thanks!"
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-03-22T21:17:08.907000",
                        "user": "Bettina",
                        "text": "They both talk about the shift in responsibility. With an inhouse library YOU are responsible for fixing it and have the ability to do it. With a 3rd party library it is their responsibility and the only way you can fix it would be to fork it but you don't have that intimate understanding of the library's design and function. So you have to wait for them to fix it."
                    },
                    {
                        "message_number": "9",
                        "ts": "2020-03-22T21:18:48.169000",
                        "user": "Bettina",
                        "text": "And if you did fork it now you have a bad situation because there is a divergence and massive overhead when it comes to it changing later on"
                    }
                ]
            },
            {
                "conversation_id": "21",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-03-22T22:00:25.442000",
                        "user": "Ludwig",
                        "text": "so true"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-03-22T22:02:30.678000",
                        "user": "Ludwig",
                        "text": "nice article will keep some ideas in mind for next time \ud83d\ude42"
                    }
                ]
            },
            {
                "conversation_id": "22",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-03-24T03:23:56.474000",
                        "user": "Alipio",
                        "text": "@WhoNeedszZz ... hence the sort of"
                    }
                ]
            },
            {
                "conversation_id": "23",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-03-24T22:03:24.102000",
                        "user": "Ahsir",
                        "text": "anyone think they would be interested in explaining a program to me for 15$ an hour? this is a one time little gig"
                    }
                ]
            },
            {
                "conversation_id": "24",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-03-30T19:05:21.888000",
                        "user": "Brienne",
                        "text": "Does anyone here have experience setting up luminus behind an nginx reverse proxy?"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-03-30T19:05:57.299000",
                        "user": "Vilmar",
                        "text": "they have great docs for that if I remember correctly"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-03-30T19:06:25.110000",
                        "user": "Vilmar",
                        "text": "https://luminusweb.com/docs/deployment.html#fronting_with_nginxhttps://luminusweb.com/docs/deployment.html#fronting_with_nginx"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-03-30T19:06:48.444000",
                        "user": "Brienne",
                        "text": "Not for my particular issue unfortunately. I am trying to set it up under a location apart from root"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-03-30T19:08:27.276000",
                        "user": "Brienne",
                        "text": "I am having difficulty configuring luminus/jetty to use that path to properly handle links relative to that path"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-03-30T19:08:45.595000",
                        "user": "Vilmar",
                        "text": "I think that's a nginx issue then"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-03-30T19:27:56.744000",
                        "user": "Brienne",
                        "text": "I'm not so sure. For example suppose I am trying to proxy pass everything under `mysite.com/util/` to the running luminus web app. If luminus has no knowledge of the `/util/` prefix all absolute paths will improperly go to `mysite.com/`."
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-03-30T21:33:44.998000",
                        "user": "Brienne",
                        "text": "I determined a workaround by just modifying the `<project>.layout/render` function that comes with the luminus template to the following:```=(defn render= renders the HTML template located relative to = resources/html\"= [request template & [params]]= (contenttype= (ok= (parser/renderfile= template= (assoc params+ :pathprefix (or (env :pathprefix) )+ :selmer/context (or (env :pathprefix) )= :page template= :csrftoken antiforgerytoken)))= text/html; charset=utf8\"))```Then all templates are able to generate links properly by just referencing the `pathprefix` and script/style Selmer tags continue to work as well. Just need to set `PATH_PREFIX` as an environment variable to match the path setup in nginx."
                    }
                ]
            },
            {
                "conversation_id": "25",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-03-30T21:00:37.713000",
                        "user": "Bettina",
                        "text": "Docroot configuration is definitely in the Nginx config"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-03-30T21:02:14.741000",
                        "user": "Bettina",
                        "text": "Oh I see. You need to use subdomains instead of path."
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-03-30T21:02:23.743000",
                        "user": "Bettina",
                        "text": "`util.mysite.com`"
                    }
                ]
            },
            {
                "conversation_id": "26",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-03-31T03:16:15.723000",
                        "user": "Amell",
                        "text": "Does anybody see a reason why `(map #(loadmap %) data` isn\\'t getting called here?```clojure(defn loadmaps [filename] (log/debug Loading maps from filename) (if (.exists (io/file filename)) (let [xs (get (json/parsestream (clojure.java.io/reader filename)) data\") data (mapv #(second %) xs)] (log/debug data:  data) (map #(loadmap %) data)) (log/error filename does not exist\")) (log/info Finished loading map data\"))```"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-03-31T03:18:15.140000",
                        "user": "Tannen",
                        "text": "For the sake of it wrap that map in a `doall`"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-03-31T03:34:43.066000",
                        "user": "Tannen",
                        "text": "`(doall (map #(loadmap %) data))`"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-03-31T03:35:09.307000",
                        "user": "Tannen",
                        "text": "Otherwise what's it actually returning?"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-03-31T03:35:36.201000",
                        "user": "Tannen",
                        "text": "If you call `(loadmaps test.edn\")` what\\'s the return?"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-03-31T03:42:00.847000",
                        "user": "Amell",
                        "text": "Here\\'s the content of loadmap. ```clojure(defn loadmap [input] (log/debug loadmap called on  input) (let [data {:id (Integer/parseInt (get input MapId\")) :name (get input MapName\") :image (getin input [\"image full\"])}] (try (log/debug Loading map: (:name data)) (db/insertmap! data) (catch Exception e (log/error Couldn\\'t insert map ID:  (:id data)) (log/error e)))))```"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-03-31T03:42:16.552000",
                        "user": "Amell",
                        "text": "So even that first log/debug is never running"
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-03-31T03:42:22.298000",
                        "user": "Amell",
                        "text": "Trying the doall rn"
                    },
                    {
                        "message_number": "9",
                        "ts": "2020-03-31T03:44:00.809000",
                        "user": "Amell",
                        "text": "Looks like that worked"
                    },
                    {
                        "message_number": "10",
                        "ts": "2020-03-31T03:46:19.192000",
                        "user": "Amell",
                        "text": "So since loadmap is primarily side effects it's not fully realized unless wrapped in a doall?"
                    },
                    {
                        "message_number": "11",
                        "ts": "2020-03-31T06:51:49.929000",
                        "user": "Tannen",
                        "text": "Unless you're observing it directly then yes it won't realise any of it"
                    }
                ]
            },
            {
                "conversation_id": "27",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-03-31T03:28:30.045000",
                        "user": "Amell",
                        "text": "the one calling loadmap?"
                    }
                ]
            },
            {
                "conversation_id": "28",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-03-31T16:49:59.141000",
                        "user": "Hoorain",
                        "text": "hello everyone can someone help me I have a lein project as a module of a larger maven projet (using lein pom) does anyone know I can configure building via maven?"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-03-31T16:50:21.147000",
                        "user": "Hoorain",
                        "text": "for that lein project"
                    }
                ]
            },
            {
                "conversation_id": "29",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-04-01T15:56:03.019000",
                        "user": "Alistair",
                        "text": "Anybody around with a lot of async experience? I'm getting what I consider strange behavior where after calling shutdownagents my program still won't exit and seems to have nondaemon threads going on. It has a lot of core.async go blocks and agent usage but nothing too weird."
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-04-01T16:27:40.082000",
                        "user": "Brienne",
                        "text": "@srasu I do not think that `shutdownagents` has any effect on threads/threadpools that are created from clojure.core.async (`thread`/`go`). I believe that it only interacts with the Agent subsystem of clojure.core (`agent` `send` and `sendoff`)."
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-04-01T16:29:07.682000",
                        "user": "Alistair",
                        "text": "Then I'm definitely curious because I've never had issues shutting down applications with live goloops before."
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-04-01T16:31:31.331000",
                        "user": "Brienne",
                        "text": "Do you have any blocking/IO actions going on in your go processes?"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-04-01T16:34:00.369000",
                        "user": "Alistair",
                        "text": "Just waiting on channels."
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-04-01T16:34:03.611000",
                        "user": "Alistair",
                        "text": "so parking"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-04-01T16:35:48.005000",
                        "user": "Brienne",
                        "text": "Try closing all of your channels instead. That will allow your go blocks to terminate"
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-04-01T16:36:45.830000",
                        "user": "Alistair",
                        "text": "That... would be a challenge. Might be possible but we'll see."
                    },
                    {
                        "message_number": "9",
                        "ts": "2020-04-01T16:38:02.594000",
                        "user": "Alistair",
                        "text": "Wait nevermind. That's weird."
                    },
                    {
                        "message_number": "10",
                        "ts": "2020-04-01T16:39:18.858000",
                        "user": "Alistair",
                        "text": "Actually it looks like I exit the go block."
                    },
                    {
                        "message_number": "11",
                        "ts": "2020-04-01T16:45:43.326000",
                        "user": "Alistair",
                        "text": "Yeah so in theory there's no go blocks running and no agents since I call shutdownagents. It's just weird."
                    },
                    {
                        "message_number": "12",
                        "ts": "2020-04-01T17:12:04.786000",
                        "user": "Alistair",
                        "text": "Turns out it was actually some dumb undocumented stuff about the websocket library I was using"
                    },
                    {
                        "message_number": "13",
                        "ts": "2020-04-01T17:13:09.057000",
                        "user": "Alistair",
                        "text": "Yeah because I was going down a layer and creating my own websocket client from jetty I had to manually call .stop on them."
                    },
                    {
                        "message_number": "14",
                        "ts": "2020-04-01T18:22:18.790000",
                        "user": "Brienne",
                        "text": "Ouch. Not fun. Glad you got it resolved at least"
                    },
                    {
                        "message_number": "15",
                        "ts": "2020-04-01T18:28:03.249000",
                        "user": "Alistair",
                        "text": "Yeah me too. Should help with people using my discord library"
                    },
                    {
                        "message_number": "16",
                        "ts": "2020-04-20T14:01:06.093000",
                        "user": "Bettina",
                        "text": "That would be async"
                    }
                ]
            },
            {
                "conversation_id": "30",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-04-01T17:12:37.781000",
                        "user": "Osmundo",
                        "text": "Oof"
                    }
                ]
            },
            {
                "conversation_id": "31",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-04-11T10:43:34.376000",
                        "user": "Babou",
                        "text": "Is there an alternative to datomic regarding functional dbs in clojure? datomic looks cool and all but only the starter kit is free and it's not open source. I haven't really looked that deeply into it but I presume it's enough for smaller and personal use cases?"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-04-11T11:01:27.233000",
                        "user": "Tannen",
                        "text": "I hear a good amount about Crux haven't used it myself though"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-04-20T10:16:39.450000",
                        "user": "Babou",
                        "text": "There is `alt` in core.async but is there something like `and` that reads input from channels in whatever order it comes in?"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-04-20T10:17:56.885000",
                        "user": "Babou",
                        "text": "For example I have channel one and two. I want to take something from both of them but I don't care whether one or two delivers first"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-04-20T14:08:32.791000",
                        "user": "Babou",
                        "text": "What do you mean?"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-04-20T15:31:05.925000",
                        "user": "Babou",
                        "text": "I don't understand your point"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-04-20T15:31:11.316000",
                        "user": "Babou",
                        "text": "Of course it's async"
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-04-20T15:31:19.552000",
                        "user": "Babou",
                        "text": "We're talking about core.async after all"
                    },
                    {
                        "message_number": "9",
                        "ts": "2020-04-20T15:32:46.615000",
                        "user": "Babou",
                        "text": "Building the logic of `and` is possible with the existing macros/functions but I was wondering whether something like this already exists"
                    },
                    {
                        "message_number": "10",
                        "ts": "2020-04-20T15:33:20.402000",
                        "user": "Osmundo",
                        "text": "I actually wrote something that does that a few days ago cus I couldn't find a solution in core.async."
                    },
                    {
                        "message_number": "11",
                        "ts": "2020-04-20T15:33:30.165000",
                        "user": "Osmundo",
                        "text": "But I might have missed something."
                    },
                    {
                        "message_number": "12",
                        "ts": "2020-04-20T15:59:17.915000",
                        "user": "Babou",
                        "text": "What `or`? Do you mean `alts!`?"
                    },
                    {
                        "message_number": "13",
                        "ts": "2020-04-20T15:59:44.934000",
                        "user": "Babou",
                        "text": "Different semantics"
                    },
                    {
                        "message_number": "14",
                        "ts": "2020-04-20T17:44:06.177000",
                        "user": "Alistair",
                        "text": "I wish there were a good parking and in core.async by default yeah. As it is the simplest way to do it is like so:```clojure(let [chans ...] (a/<! (a/thread (map a/<!! chans))))```"
                    },
                    {
                        "message_number": "15",
                        "ts": "2020-04-20T17:44:51.278000",
                        "user": "Alistair",
                        "text": "This spawns a new thread that blocks on taking off each channel and the return value of map is put onto a channel. That channel is parked on by the outer execution context."
                    },
                    {
                        "message_number": "16",
                        "ts": "2020-04-20T17:45:12.299000",
                        "user": "Osmundo",
                        "text": "what if you're working in cljs"
                    },
                    {
                        "message_number": "17",
                        "ts": "2020-04-20T17:45:31.809000",
                        "user": "Osmundo",
                        "text": "Wrong channel I suppose"
                    },
                    {
                        "message_number": "18",
                        "ts": "2020-04-20T17:45:33.611000",
                        "user": "Alistair",
                        "text": "good question. I'm not 100% sure."
                    },
                    {
                        "message_number": "19",
                        "ts": "2020-04-20T17:45:50.861000",
                        "user": "Osmundo",
                        "text": "Short answer is you need some fairly arcane loop trickery."
                    },
                    {
                        "message_number": "20",
                        "ts": "2020-04-20T17:46:00.299000",
                        "user": "Osmundo",
                        "text": "And `alts!`"
                    },
                    {
                        "message_number": "21",
                        "ts": "2020-04-20T17:46:51.205000",
                        "user": "Osmundo",
                        "text": "You loop on `alts!` each iteration removing the channel you just took from and passing the rest back in."
                    },
                    {
                        "message_number": "22",
                        "ts": "2020-04-20T17:47:31.124000",
                        "user": "Alistair",
                        "text": "Yeah I dislike that because it's complex and requires more thread overhead. However it doesn't require an additional thread so that can be a bonus."
                    },
                    {
                        "message_number": "23",
                        "ts": "2020-04-20T17:52:18.557000",
                        "user": "Osmundo",
                        "text": "```clj(defn asyncall [chans] (goloop [chanset (set chans) res {}] (if (seq chanset) (let [[val chan] (alts! chanset)] (recur (disj chanset chan) (assoc res chan val))) (into [] (map res chans)))```Or something like that."
                    },
                    {
                        "message_number": "24",
                        "ts": "2020-04-20T17:53:14.087000",
                        "user": "Osmundo",
                        "text": "My original version was inline and collected the results slightly differently plus I don't have it on hand rn \ud83d\ude05"
                    }
                ]
            },
            {
                "conversation_id": "32",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-04-20T15:30:35.448000",
                        "user": "Bettina",
                        "text": "Your objective is asyncronous"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-04-20T15:43:40.110000",
                        "user": "Bettina",
                        "text": "What's the issue with using `or`?"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-04-20T15:59:51.147000",
                        "user": "Babou",
                        "text": "It only waits for one"
                    }
                ]
            },
            {
                "conversation_id": "33",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-04-20T21:48:49.248000",
                        "user": "Babou",
                        "text": "> You loop on `alts!` each iteration removing the channel you just took from and passing the rest back in.@djeis that's what I'd do too"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-04-20T21:49:32.941000",
                        "user": "Babou",
                        "text": "It just becomes very complex especially if you add more channels"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-04-20T21:50:09.861000",
                        "user": "Osmundo",
                        "text": "My little code snippet there should solve it for any number of channels."
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-04-20T21:50:18.482000",
                        "user": "Babou",
                        "text": "Oh I see"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-04-20T21:50:25.031000",
                        "user": "Osmundo",
                        "text": "should"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-04-20T21:50:36.121000",
                        "user": "Osmundo",
                        "text": "I have not tested it I just did something similar on another project recently."
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-04-20T21:50:58.610000",
                        "user": "Osmundo",
                        "text": "Does one take off each channel and returns a vector of the results in the same order as the channels."
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-04-20T21:51:07.113000",
                        "user": "Babou",
                        "text": "I didn't know you could pass a set to alts"
                    },
                    {
                        "message_number": "9",
                        "ts": "2020-04-20T21:51:20.408000",
                        "user": "Osmundo",
                        "text": "Ought to take any sequence."
                    },
                    {
                        "message_number": "10",
                        "ts": "2020-04-20T21:51:30.493000",
                        "user": "Osmundo",
                        "text": "If not I'll have to coerce to vector."
                    },
                    {
                        "message_number": "11",
                        "ts": "2020-04-20T21:51:37.773000",
                        "user": "Osmundo",
                        "text": "But it ought to take anything seqable."
                    },
                    {
                        "message_number": "12",
                        "ts": "2020-04-20T21:51:45.680000",
                        "user": "Babou",
                        "text": "Nice"
                    },
                    {
                        "message_number": "13",
                        "ts": "2020-04-20T21:51:49.752000",
                        "user": "Osmundo",
                        "text": "I know I've passed it seqs before."
                    },
                    {
                        "message_number": "14",
                        "ts": "2020-04-20T21:52:03.793000",
                        "user": "Babou",
                        "text": "Also til goloop is a thing"
                    },
                    {
                        "message_number": "15",
                        "ts": "2020-04-20T21:52:20.745000",
                        "user": "Osmundo",
                        "text": "Yea just a bit shorter."
                    },
                    {
                        "message_number": "16",
                        "ts": "2020-04-20T21:53:14.306000",
                        "user": "Osmundo",
                        "text": "I am perhaps unreasonably pleased with `(map res chans)` in there."
                    },
                    {
                        "message_number": "17",
                        "ts": "2020-04-20T21:54:23.788000",
                        "user": "Babou",
                        "text": "But the order isn't preserved is it?"
                    },
                    {
                        "message_number": "18",
                        "ts": "2020-04-20T21:54:38.270000",
                        "user": "Osmundo",
                        "text": "`chans` is the passed in collection \ud83d\ude01"
                    },
                    {
                        "message_number": "19",
                        "ts": "2020-04-20T21:54:51.735000",
                        "user": "Babou",
                        "text": "Oh yeah you're right"
                    },
                    {
                        "message_number": "20",
                        "ts": "2020-04-20T21:55:55.028000",
                        "user": "Babou",
                        "text": "Thanks a bunch"
                    },
                    {
                        "message_number": "21",
                        "ts": "2020-04-20T21:55:59.460000",
                        "user": "Osmundo",
                        "text": "Sure \ud83d\ude42"
                    },
                    {
                        "message_number": "22",
                        "ts": "2020-04-20T21:56:09.866000",
                        "user": "Osmundo",
                        "text": "Do test it \ud83d\ude05"
                    },
                    {
                        "message_number": "23",
                        "ts": "2020-04-20T21:56:31.961000",
                        "user": "Osmundo",
                        "text": "I'm pretty sure it works but I don't have anything handy to test it on atm."
                    },
                    {
                        "message_number": "24",
                        "ts": "2020-04-20T21:57:02.890000",
                        "user": "Babou",
                        "text": "Will do tomorrow \ud83d\udc4d"
                    }
                ]
            },
            {
                "conversation_id": "34",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-04-21T01:53:26.837000",
                        "user": "Alistair",
                        "text": "I'm not sure if it'll be anything seqable since the api for vectors (nth) works on sequences but doesn't call seq on its argument."
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-04-21T01:53:36.944000",
                        "user": "Alistair",
                        "text": "at least that I recall."
                    }
                ]
            },
            {
                "conversation_id": "35",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-04-21T21:20:01.418000",
                        "user": "Babou",
                        "text": "@djeis doesn't seem to work unfortunately"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-04-21T21:20:24.322000",
                        "user": "Osmundo",
                        "text": "Ah wonder why..."
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-04-21T21:20:29.774000",
                        "user": "Osmundo",
                        "text": "Can't really debug atm."
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-04-21T21:20:37.572000",
                        "user": "Babou",
                        "text": "I modified it slightly because alts! doesn't take a set"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-04-21T21:20:46.218000",
                        "user": "Babou",
                        "text": "```clj(defn asyncall [chans] (goloop [chanset (set chans) res {}] (iflet [chanseq (seq chanset)] (let [[val chan] (alts! chanseq)] (recur (disj chanset chan) (assoc res chan val))) (into [] (map res chans)))))```"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-04-21T21:21:17.715000",
                        "user": "Babou",
                        "text": "But it never seems to receive the values you put on the input channels"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-04-21T21:21:31.423000",
                        "user": "Osmundo",
                        "text": "Well that's... weird..."
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-04-21T21:22:30.217000",
                        "user": "Babou",
                        "text": "```clj(def chans (repeatedly 5 chan))(def result (asyncall chans))(go (doseq [val (range 5)  c chans] (>! c val)))(<!! result)```maybe you can spot a mistake"
                    },
                    {
                        "message_number": "9",
                        "ts": "2020-04-21T21:23:22.649000",
                        "user": "Babou",
                        "text": "so it basically parks in the doseq"
                    },
                    {
                        "message_number": "10",
                        "ts": "2020-04-21T21:29:27.439000",
                        "user": "Osmundo",
                        "text": "\ud83e\udd14"
                    },
                    {
                        "message_number": "11",
                        "ts": "2020-04-21T21:30:41.804000",
                        "user": "Osmundo",
                        "text": "```cljuser=> (defn asyncall [chans] (a/goloop [chanset (set chans) res {}] (iflet [chanseq (seq chanset)] (let [[val chan] (a/alts! chanseq)] (recur (disj chanset chan) (assoc res chan val))) (into [] (map res chans)))))user=> (def chans (into [] (repeatedly 5 a/chan)))user=> (def res (asyncall chans))user=> (a/go (doseq [[i c] (map list (range) chans)] (a/>! c i)))user=> (a/<!! res)[0 1 2 3 4]```"
                    },
                    {
                        "message_number": "12",
                        "ts": "2020-04-21T21:32:14.851000",
                        "user": "Osmundo",
                        "text": "All I did was add `a/` prefixes make `chans` a vector and make sure the `doseq` goes through the index/chans in parallel."
                    }
                ]
            },
            {
                "conversation_id": "36",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-04-21T21:46:32.434000",
                        "user": "Babou",
                        "text": "OH"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-04-21T21:47:10.380000",
                        "user": "Babou",
                        "text": "doseq in my case runs chan1 1 chan1 2 chan1 3 and so on right?"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-04-21T21:48:13.010000",
                        "user": "Babou",
                        "text": "I forgot it behaves like `for` and not like `map` in that regard"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-04-21T21:48:35.539000",
                        "user": "Babou",
                        "text": "I'm actually stupid"
                    }
                ]
            },
            {
                "conversation_id": "37",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-04-24T04:17:57.382000",
                        "user": "Camaron",
                        "text": "What would be the easiest way of validating a map? I want to make sure that the map I deserialised from JSON contains specific fields and nothing else."
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-04-24T04:29:53.711000",
                        "user": "Camaron",
                        "text": "wait I can just `(= (keys data) [:foo ...])`"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-04-24T04:33:51.267000",
                        "user": "Jah",
                        "text": "Or maybe use spec or Prismatic schema? Possibly overkill though."
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-04-24T04:35:49.404000",
                        "user": "Camaron",
                        "text": "Yeah some sort of `spec` would be the way to go normally but since it's just a onetime use I figured I should look for a simpler way to do it."
                    }
                ]
            },
            {
                "conversation_id": "38",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-04-24T05:13:00.043000",
                        "user": "Babou",
                        "text": "`(every? data [:key1 :key2 ...])`"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-04-24T05:13:05.351000",
                        "user": "Babou",
                        "text": "Like this perhaps?"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-04-24T05:13:17.591000",
                        "user": "Babou",
                        "text": "That way you allow for more tham the required keys"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-04-24T05:13:20.097000",
                        "user": "Babou",
                        "text": "Like spec"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-04-24T05:45:13.345000",
                        "user": "Camaron",
                        "text": "I considered using `every?` but I want it to contain no other keys."
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-04-24T05:45:52.759000",
                        "user": "Camaron",
                        "text": "Since I'll be saving the map somewhere and I don't want potential junk data lingering there."
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-04-24T06:09:20.915000",
                        "user": "Babou",
                        "text": "Well then you might use sets"
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-04-24T06:09:34.342000",
                        "user": "Babou",
                        "text": "I think (keys) returns a set"
                    }
                ]
            },
            {
                "conversation_id": "39",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-04-24T13:11:18.150000",
                        "user": "Alipio",
                        "text": "I have no context so apply this as it makes sense in your case but Rich Hickey has actually talked specifically about the point of asserting that only certain keys are in a map: <https://youtu.be/oyLBGkS5ICk?t=3258>"
                    }
                ]
            },
            {
                "conversation_id": "40",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-04-25T12:52:23.706000",
                        "user": "Thorne",
                        "text": "The following I do not understand. Can some one point me in the right direction please?"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-04-25T12:52:35.343000",
                        "user": "Thorne",
                        "text": "```cron.routes=> (keys (yaml/fromfile test.yaml\"))(:a)cron.routes=> (defn loadsecrets2 [] (yaml/fromfile test.yaml\"))#\\'cron.routes/loadsecrets2cron.routes=> (loadsecrets2)#ordered/map ([:a #ordered/map ([:level p7thrv6Nt7mU9fxL\"] [:rubbish blah blah\"] [:path scripts/\"])])cron.routes=> (keys loadsecrets2)Execution error (IllegalArgumentException) at cron.routes/eval6848 (forminit3768456561690446599.clj:1).Don\\'t know how to create ISeq from: cron.routes$load_secrets2```"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-04-25T12:53:02.370000",
                        "user": "Thorne",
                        "text": "I load the file direct i can use keys. Do it via another function i get an error \ud83d\ude26"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-04-25T12:56:41.384000",
                        "user": "Babou",
                        "text": "You're passing a function to keys"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-04-25T12:56:47.908000",
                        "user": "Babou",
                        "text": "Not what that function returns"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-04-25T12:57:08.368000",
                        "user": "Babou",
                        "text": "(keys (loadsecrets2)) should work"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-04-25T12:58:14.983000",
                        "user": "Thorne",
                        "text": "lol it does. I do feel silly now thats it been pointed out to me \ud83d\ude42 Thank you \ud83d\ude42"
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-04-25T12:58:49.809000",
                        "user": "Tannen",
                        "text": "All good I've been working with clojure a while and still make this mistake \ud83d\ude02"
                    }
                ]
            },
            {
                "conversation_id": "41",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-04-26T13:05:30.324000",
                        "user": "Camaron",
                        "text": "@SlashDevSlashRandom What he says makes sense especially with regards to writing your code in accordance to the map shape you have in mind and let it grow when necessary."
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-04-26T13:06:22.025000",
                        "user": "Camaron",
                        "text": "But I'm taking external JSON input through an HTTP API converting it to a map then inserting it to an SQL database."
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-04-26T13:07:08.742000",
                        "user": "Camaron",
                        "text": "Otherwise I'd need to cherry pick the matching keys from the map to make a new map and discard the original data."
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-04-26T13:07:20.317000",
                        "user": "Camaron",
                        "text": "Maybe there's a cleaner way to do this."
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-04-26T20:04:52.134000",
                        "user": "Camaron",
                        "text": "That makes a lot of sense. I totally forgot about `selectkeys` too."
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-04-26T20:05:10.728000",
                        "user": "Camaron",
                        "text": "Thanks!"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-04-26T21:17:48.937000",
                        "user": "Jah",
                        "text": "At times I\\'ve pleasantly surprised myself by leaving unknown keys present in maps as they flow through code that isn\\'t interested in those keys. It supports a kind of cough aspect oriented approach to data & code. Of course I realise that it\\'s hard to persist such data in schemaoriented data stores (RDBMS\\ and the like)..."
                    }
                ]
            },
            {
                "conversation_id": "42",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-04-26T17:09:20.240000",
                        "user": "Alipio",
                        "text": "So the usual caveat of take this FWIW and decide if it applies in your situation: `selectkeys` could do the cherrypicking for you. When I think about comparing the two approaches they feel very similar except for allowing for extra information. If we validate the translated map but it has an extra key then do we reject all the data? If I want a user\\'s first and last name and I get a map that has first name last name and DOB should I just say well this isn\\'t exactly first name and last name so it\\'s not useful\"? Alternatively I say get the first and last name from this map and write those to my DB and then if the API changes tomorrow and gives me six more fields my code doesn\\'t change"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-04-26T20:16:45.843000",
                        "user": "Alipio",
                        "text": ":)"
                    }
                ]
            }
        ]
    },
    {
        "team_domain": "Clojurians",
        "channel_name": "clojure",
        "month": "May2020-July2020",
        "start_date": "2020-05-06T05:35:13.419000",
        "end_date": "2020-07-30T21:37:35.713000",
        "messages": [
            {
                "conversation_id": "1",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-05-06T05:35:13.419000",
                        "user": "Azahel",
                        "text": "HelloI have multiple agents for example 100s of agents.They can have three value Below zero Above Zero And zero.At a particular instant of time I want to print how many agents are above zero zero and below zero.Can someone please guide me how to do it? I am new to the clojure code."
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-05-06T05:36:04.963000",
                        "user": "Savvi",
                        "text": "Do you have a collection of all agents?"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-05-06T15:20:32.296000",
                        "user": "Azahel",
                        "text": "Yes @isenjov I have collection of agents.I am just modifying Rich Hickey's ant colony simulation."
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-05-06T15:22:17.590000",
                        "user": "Azahel",
                        "text": "@gibb I do have a sequence of agents.I want to somehow update a count variable which would be shared by all the agents to update it. when all the agents update the variable i ll print the count."
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-05-06T15:22:58.458000",
                        "user": "Azahel",
                        "text": "@gibb"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-05-06T15:23:12.253000",
                        "user": "Azahel",
                        "text": "@lsenjov"
                    }
                ]
            },
            {
                "conversation_id": "2",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-05-06T06:27:59.282000",
                        "user": "Savvi",
                        "text": "@ashish_prabhune"
                    }
                ]
            },
            {
                "conversation_id": "3",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-05-06T14:54:11.999000",
                        "user": "Amarri",
                        "text": "@ashish_prabhune https://clojure.org/reference/sequences"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-05-06T14:54:33.463000",
                        "user": "Amarri",
                        "text": "https://clojure.org/reference/sequences#_seq_in_seq_out"
                    }
                ]
            },
            {
                "conversation_id": "4",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-05-06T15:36:44.227000",
                        "user": "Savvi",
                        "text": "Can't you just map `deref`?"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-05-06T15:38:13.189000",
                        "user": "Hampton",
                        "text": "Because of the semantics of agents if the simulation isn't stopped and you haven't called `(apply await agents)` then you can't guarantee that it's going to be a completely correct read however you can run code like the following: `(reduce + 0 (map #(Math/signum (float @%1)) agents))`"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-05-06T15:39:49.866000",
                        "user": "Hampton",
                        "text": "What this does is dereference each agent changes each value to be 1 0 or 1 based on if it was negative zero or positive and then sums the result."
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-05-06T15:40:02.222000",
                        "user": "Hampton",
                        "text": "Although I guess that's not quite what you asked for"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-05-06T15:40:10.893000",
                        "user": "Dianne",
                        "text": "That's the sort of thing I'd probably end up reaching for `ref`s to do although I'm not sure of the performance implications...."
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-05-06T15:40:56.524000",
                        "user": "Hampton",
                        "text": "Right but agents here are used to ensure that each thing is run asynchronously from each other thing and no core.async is being used afaik so agents are the best way to do it since this is Rich's ants demo."
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-05-06T15:41:23.939000",
                        "user": "Hampton",
                        "text": "You could do something like `(println (count (filter pos? (map deref agents))))`"
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-05-06T15:41:37.531000",
                        "user": "Hampton",
                        "text": "and switch out `pos?` for `neg?` and `zero?`"
                    }
                ]
            },
            {
                "conversation_id": "5",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-05-07T04:03:24.425000",
                        "user": "Azahel",
                        "text": "Thankyou @djeis @srasu @lsenjov for your help"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-05-07T04:04:09.232000",
                        "user": "Azahel",
                        "text": "Also now I want to send this count to a python program.How can I do that?Using TCP client?How to do that?"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-05-07T04:13:14.256000",
                        "user": "Savvi",
                        "text": "To a running python program?"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-05-07T04:13:40.175000",
                        "user": "Savvi",
                        "text": "Or just to a file that gets read by a python program?"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-05-07T04:23:21.404000",
                        "user": "Azahel",
                        "text": "A running python program."
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-05-07T04:36:00.261000",
                        "user": "Savvi",
                        "text": "Well.. how are you wanting the python program to receive the data?"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-05-07T04:36:44.542000",
                        "user": "Savvi",
                        "text": "If you have a tcp endpoint it's not difficult to send a request to it"
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-05-07T04:36:52.732000",
                        "user": "Savvi",
                        "text": "Hell if it's a web endpoint `spit` will probably work"
                    },
                    {
                        "message_number": "9",
                        "ts": "2020-05-07T16:16:44.123000",
                        "user": "Azahel",
                        "text": "Yeah I have to send it to a tcp endpoint"
                    }
                ]
            },
            {
                "conversation_id": "6",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-05-07T16:27:50.224000",
                        "user": "Hampton",
                        "text": "I currently use gniazdo as my websocket connection handler however websockets are a bit above straight tcp connections. You might end up needing to look at other libraries or even java interop if you need to use a lowlevel socket connection."
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-05-11T21:47:45.847000",
                        "user": "Hampton",
                        "text": "In the clojure space it's very common to use libraries which haven't had commits for years. Not because there's a small number of libraries or because the libraries are no longer maintained but because they're just high enough quality that the developers can move on because they're finished. I wouldn't avoid cortex just because it's been a couple years since it had a commit."
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-05-11T21:55:52.981000",
                        "user": "Tariana",
                        "text": "@srasu that is a fair point. I guess it is worth a shot"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-05-11T21:56:16.578000",
                        "user": "Hampton",
                        "text": "\ud83d\udc4d"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-05-12T11:00:20.003000",
                        "user": "Tariana",
                        "text": "i did go through the library and sadly it is lacking :/ on the other hand i did find mxnet so i will be setting that up. i will not judge a library by its commit dates any longer though :D"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-05-14T12:40:00.950000",
                        "user": "Tariana",
                        "text": "@AustrianParens hey! thanks for the reply. was one of the first things i checked. It actually inspired me and a friend to try our hand at making our own library using neanderthal"
                    }
                ]
            },
            {
                "conversation_id": "7",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-05-11T21:32:18.056000",
                        "user": "Tariana",
                        "text": "anyone doing deep learning with clojure? everyone online suggests cortex but that seems dead."
                    }
                ]
            },
            {
                "conversation_id": "8",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-05-12T00:07:06.071000",
                        "user": "Savvi",
                        "text": "What suskey said. I'm currently using libraries that are 4+ years without commits"
                    }
                ]
            },
            {
                "conversation_id": "9",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-05-14T07:18:05.434000",
                        "user": "Zalaia",
                        "text": "@Khepu If you're interested in deep learing and clojure you should definetly check out this series of posts: https://dragan.rocks/articles/19/DeepLearninginClojureFromScratchtoGPU0WhyBother"
                    }
                ]
            },
            {
                "conversation_id": "10",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-05-21T21:07:49.931000",
                        "user": "Andras",
                        "text": "where will be clojure in 10 years ?"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-05-22T00:16:17.064000",
                        "user": "Riven",
                        "text": "2030"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-05-22T12:27:17.684000",
                        "user": "Hampton",
                        "text": "I was not expecting a random alex miller"
                    }
                ]
            },
            {
                "conversation_id": "11",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-05-22T02:38:20.475000",
                        "user": "Lyncoln",
                        "text": "the question is where won't it be?"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-05-22T16:29:43.995000",
                        "user": "Janita",
                        "text": "transit question: is there a standard dataset used for verifying and/or benchmarking? I'm writing an implementation in Haskell and would like to be able to compare it against other implementations"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-05-22T16:36:39.301000",
                        "user": "Janita",
                        "text": "actually https://github.com/cognitect/transitformat/tree/master/examples/0.8/simple looks sufficient for the verification part"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-05-22T16:36:53.088000",
                        "user": "Janita",
                        "text": "and then I can write benchmarks comparable to https://github.com/cognitect/transitcljs/blob/master/bench/transit/bench.cljs"
                    }
                ]
            },
            {
                "conversation_id": "12",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-05-22T04:10:23.121000",
                        "user": "Riven",
                        "text": "The supermassive black hole in the center of our galaxy id reckon"
                    }
                ]
            },
            {
                "conversation_id": "13",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-05-31T09:06:18.814000",
                        "user": "Madigan",
                        "text": "why is my message getting deleted automatically from here"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-05-31T09:06:40.297000",
                        "user": "Madigan",
                        "text": "I am trying to post a code and looking for validation but its gets deleted"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-05-31T09:06:47.468000",
                        "user": "Maddison",
                        "text": "that is odd"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-05-31T09:06:54.084000",
                        "user": "Maddison",
                        "text": "Can you try again?"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-05-31T09:07:12.733000",
                        "user": "Madigan",
                        "text": "I did it goes to botlog"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-05-31T09:07:19.481000",
                        "user": "Maddison",
                        "text": "Weird. Post it on https://hasteb.in"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-05-31T09:07:46.115000",
                        "user": "Madigan",
                        "text": "Done"
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-05-31T09:07:57.818000",
                        "user": "Maddison",
                        "text": "you need to save and post the link"
                    },
                    {
                        "message_number": "9",
                        "ts": "2020-05-31T09:08:13.029000",
                        "user": "Madigan",
                        "text": "https://hasteb.in/uvulekuh.sql"
                    },
                    {
                        "message_number": "10",
                        "ts": "2020-05-31T09:08:41.134000",
                        "user": "Madigan",
                        "text": "Please give feedbacks on the implementation of Sieve_of_Eratosthenes for generating primes"
                    },
                    {
                        "message_number": "11",
                        "ts": "2020-05-31T09:08:41.620000",
                        "user": "Maddison",
                        "text": "what exactly is your question?"
                    },
                    {
                        "message_number": "12",
                        "ts": "2020-05-31T09:08:44.789000",
                        "user": "Maddison",
                        "text": "ah"
                    },
                    {
                        "message_number": "13",
                        "ts": "2020-05-31T09:09:02.107000",
                        "user": "Madigan",
                        "text": "Just seeking validations if this is good enough"
                    },
                    {
                        "message_number": "14",
                        "ts": "2020-05-31T09:10:03.281000",
                        "user": "Maddison",
                        "text": "First thing to improve imo would be to make the function a top level declaration"
                    },
                    {
                        "message_number": "15",
                        "ts": "2020-05-31T09:10:21.801000",
                        "user": "Maddison",
                        "text": "so `(defn primenumbers? ...)`"
                    },
                    {
                        "message_number": "16",
                        "ts": "2020-05-31T09:10:29.316000",
                        "user": "Madigan",
                        "text": "Ok"
                    },
                    {
                        "message_number": "17",
                        "ts": "2020-05-31T09:24:41.428000",
                        "user": "Madigan",
                        "text": "Anything else? @Johnny"
                    },
                    {
                        "message_number": "18",
                        "ts": "2020-05-31T09:25:03.270000",
                        "user": "Maddison",
                        "text": "yeah I'm currently thinking about how I would implement this"
                    },
                    {
                        "message_number": "19",
                        "ts": "2020-05-31T09:27:47.301000",
                        "user": "Madigan",
                        "text": "Ok Ok sure Sorry for the probe"
                    },
                    {
                        "message_number": "20",
                        "ts": "2020-05-31T09:38:16.205000",
                        "user": "Maddison",
                        "text": "Ok I would do this rather differently"
                    },
                    {
                        "message_number": "21",
                        "ts": "2020-05-31T09:38:28.066000",
                        "user": "Maddison",
                        "text": "Is it ok if I show you my implementation directly and explain it?"
                    },
                    {
                        "message_number": "22",
                        "ts": "2020-05-31T09:39:23.169000",
                        "user": "Maddison",
                        "text": "There are a few things about yours that are a bit problematic for example it uses .indexOf and last on sequences all of which are O(n)"
                    },
                    {
                        "message_number": "23",
                        "ts": "2020-05-31T09:44:38.915000",
                        "user": "Maddison",
                        "text": "( @Kanishkkumar188nrt )"
                    },
                    {
                        "message_number": "24",
                        "ts": "2020-05-31T09:45:48.398000",
                        "user": "Madigan",
                        "text": "Yes pleaze"
                    },
                    {
                        "message_number": "25",
                        "ts": "2020-05-31T09:46:05.931000",
                        "user": "Madigan",
                        "text": "Please show your implementation"
                    },
                    {
                        "message_number": "26",
                        "ts": "2020-05-31T09:48:08.296000",
                        "user": "Maddison",
                        "text": "```clj(defn sieve [[& [nextprime :as remaining]]] (remove #(zero? (rem % nextprime)) remaining))(defn primes [to] (>> (range 2 to) (iterate sieve) (takewhile seq) (map first)))```"
                    },
                    {
                        "message_number": "27",
                        "ts": "2020-05-31T09:50:15.381000",
                        "user": "Maddison",
                        "text": "`sieve` is a helper function that takes a sequence of numbers ignores the first element treats the second element as the next prime and the rest as the remaining numbers. It then uses `rem` (remainder) to remove all multiples of the next prime from the remaining"
                    },
                    {
                        "message_number": "28",
                        "ts": "2020-05-31T09:51:51.232000",
                        "user": "Maddison",
                        "text": "This is nice for `iterate`. `iterate` takes the initial numbers and produces a sequence of `numbers` `(sieve numbers)` `(sieve (sieve numbers))` and so on"
                    },
                    {
                        "message_number": "29",
                        "ts": "2020-05-31T09:52:25.867000",
                        "user": "Maddison",
                        "text": "This results in a sequence consisting of sequences that each represent one step in the algorithm"
                    },
                    {
                        "message_number": "30",
                        "ts": "2020-05-31T09:53:01.515000",
                        "user": "Maddison",
                        "text": "The end is reached when this produces an empty sequence hence why `(takewhile seq)`"
                    },
                    {
                        "message_number": "31",
                        "ts": "2020-05-31T09:53:14.847000",
                        "user": "Maddison",
                        "text": "The first element of each sequence is a prime."
                    },
                    {
                        "message_number": "32",
                        "ts": "2020-05-31T09:56:39.979000",
                        "user": "Maddison",
                        "text": "This is reasonably more efficient too. Your initial solution took 292 ms for 9927 mine took 0.02 ms"
                    },
                    {
                        "message_number": "33",
                        "ts": "2020-05-31T09:58:03.046000",
                        "user": "Maddison",
                        "text": "If you have trouble understanding anything feel free to ask"
                    },
                    {
                        "message_number": "34",
                        "ts": "2020-05-31T12:33:38.563000",
                        "user": "Maddison",
                        "text": "Well that is something that comes with enough practice. Don't worry if you think you wouldn't have figured this out yourself  I know that feeling. Coding in an imperative language is somewhat of an advantage in this regard because most popular algorithms are often defined or explained imperatively. The sieve of Eratosthenes is a good example for this because it is an inherently imperative algorithm (a set of instructions that you can repeat by hand)."
                    },
                    {
                        "message_number": "35",
                        "ts": "2020-05-31T12:34:43.905000",
                        "user": "Maddison",
                        "text": "And I mean it took me about half an hour to come up with this."
                    },
                    {
                        "message_number": "36",
                        "ts": "2020-05-31T12:39:14.392000",
                        "user": "Maddison",
                        "text": "What I did is the following: I went to wikipedia and looked at the definition of the algorithm there which is tagging indices in a boolean array essentially. I realised that this can also be described as a series of states. In the beginning all numbers are untagged. After the next step all multiples of 2 are tagged. After the next step all multiples of 3 are tagged... and so on and so forth. This is already a functional description. Now the remaining questions are: what does the \\'step\\ function look like that marks the next multiples? and how do I get the relevant prime in each state (2 in the first 3 in the second 5 in the third etc.)?"
                    },
                    {
                        "message_number": "37",
                        "ts": "2020-05-31T12:41:54.190000",
                        "user": "Maddison",
                        "text": "Now the knowledge about `iterate` comes in handy because it gives me a sequence of all states when repeatedly applying a step function. So what I did was I wrote the step function (`sieve`) in a way that does not care about what was relevant in the previous step by skipping the first element in the sequence. That way the first element in each state is the number I care about."
                    },
                    {
                        "message_number": "38",
                        "ts": "2020-05-31T12:42:54.180000",
                        "user": "Maddison",
                        "text": "And I think the rest of the implementation of `sieve` is pretty clear."
                    },
                    {
                        "message_number": "39",
                        "ts": "2020-05-31T12:43:01.783000",
                        "user": "Madigan",
                        "text": "Yes it is"
                    },
                    {
                        "message_number": "40",
                        "ts": "2020-05-31T12:46:06.561000",
                        "user": "Madigan",
                        "text": "The code is so clear in itself that i doesnt need any explanation the explanation to write such code was needed I am reading your explanation again n again to understand better. Thanks @Johnny and Clojurians As helping community only enables the propagation of knowledge."
                    },
                    {
                        "message_number": "41",
                        "ts": "2020-05-31T12:47:08.629000",
                        "user": "Maddison",
                        "text": "You're welcome. Thanks for bringing it up here it's an interesting thing to think about and I really like the result here"
                    },
                    {
                        "message_number": "42",
                        "ts": "2020-05-31T12:47:37.671000",
                        "user": "Madigan",
                        "text": "I have worked with multiple languages and never ever found anyone as welcoming and helping community as Clojure's"
                    },
                    {
                        "message_number": "43",
                        "ts": "2020-05-31T12:47:59.190000",
                        "user": "Maddison",
                        "text": "Same here haha"
                    },
                    {
                        "message_number": "44",
                        "ts": "2020-05-31T12:48:18.530000",
                        "user": "Madigan",
                        "text": "Clojure's community is so helping and uplifting and through out all the mediums be it reddit discord slack or stack overflow"
                    },
                    {
                        "message_number": "45",
                        "ts": "2020-05-31T13:04:03.324000",
                        "user": "Madigan",
                        "text": "When i printed next prime and remaining i got this > remainaing (19 23 29 31 37)>nextprime 23"
                    },
                    {
                        "message_number": "46",
                        "ts": "2020-05-31T13:04:30.741000",
                        "user": "Madigan",
                        "text": "I understood this but how could you do this is there any documentation for it"
                    },
                    {
                        "message_number": "47",
                        "ts": "2020-05-31T13:04:59.483000",
                        "user": "Madigan",
                        "text": "Youre doing some very WHAAAAT the hell kinda things"
                    },
                    {
                        "message_number": "48",
                        "ts": "2020-05-31T13:05:06.169000",
                        "user": "Madigan",
                        "text": "hahah"
                    },
                    {
                        "message_number": "49",
                        "ts": "2020-05-31T13:05:14.819000",
                        "user": "Maddison",
                        "text": "This is called destructuring. It's very powerful. This would be the equivalent without it:```clj(defn sieve [input] (let [remaining (rest input) nextprime (first remaining)] (remove #(zero? (rem % nextprime)) remaining)))```"
                    },
                    {
                        "message_number": "50",
                        "ts": "2020-05-31T13:05:32.418000",
                        "user": "Maddison",
                        "text": "https://clojure.org/guides/destructuring"
                    },
                    {
                        "message_number": "51",
                        "ts": "2020-05-31T13:05:41.895000",
                        "user": "Madigan",
                        "text": "hahahahahah"
                    },
                    {
                        "message_number": "52",
                        "ts": "2020-05-31T13:06:00.624000",
                        "user": "Madigan",
                        "text": "M blown away"
                    },
                    {
                        "message_number": "53",
                        "ts": "2020-05-31T13:06:34.505000",
                        "user": "Maddison",
                        "text": "For a long time I didn't know it existed. Now I find myself using it at every corner"
                    },
                    {
                        "message_number": "54",
                        "ts": "2020-05-31T13:08:30.574000",
                        "user": "Madigan",
                        "text": "I understand destrcuture as i used in javascript but you did something really clever here by using & you made it for consuming multiple arguments and with using :as you selected the first item from that multiple aruments"
                    },
                    {
                        "message_number": "55",
                        "ts": "2020-05-31T13:08:50.764000",
                        "user": "Madigan",
                        "text": "Correct?"
                    },
                    {
                        "message_number": "56",
                        "ts": "2020-05-31T13:11:39.157000",
                        "user": "Maddison",
                        "text": "It's all described thoroughly in the guide I just linked and I recommend reading it but the gist of it: `[& foo]` means that `foo` will be the `rest` of the input  `[foo]` means that `foo` will be the `first` of the input  and `[foo :as bar]` means that `foo` will be the `first` of the input and `bar` will be the original input"
                    },
                    {
                        "message_number": "57",
                        "ts": "2020-05-31T13:11:50.953000",
                        "user": "Maddison",
                        "text": "And this can all be nested as I did here"
                    },
                    {
                        "message_number": "58",
                        "ts": "2020-05-31T13:16:24.623000",
                        "user": "Madigan",
                        "text": "Sure thanks"
                    },
                    {
                        "message_number": "59",
                        "ts": "2020-05-31T13:16:30.275000",
                        "user": "Madigan",
                        "text": "I will go through it"
                    }
                ]
            },
            {
                "conversation_id": "14",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-05-31T10:05:02.217000",
                        "user": "Maddison",
                        "text": "Oh and also this is lazy which can be useful"
                    }
                ]
            },
            {
                "conversation_id": "15",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-05-31T12:19:43.408000",
                        "user": "Madigan",
                        "text": "I am new to clojure and functional programming have been infected by OOPS from a long time. This implementation is more readable. Although I need to understand your thought pattern desingning it. Why can't I think in the same fashion. That's my major problem. I registered myself here to change my thought pattern. Please guide if you can."
                    }
                ]
            },
            {
                "conversation_id": "16",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-05-31T13:03:17.866000",
                        "user": "Madigan",
                        "text": "@Johnny [& [nextprime :as remaining]] what is this doing?"
                    }
                ]
            },
            {
                "conversation_id": "17",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-05-31T13:50:55.558000",
                        "user": "Maddison",
                        "text": "oh I just realised I was wrong there"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-05-31T13:51:40.527000",
                        "user": "Maddison",
                        "text": "The destructuring could be simplified to `[nextprime & remaining]`"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-05-31T13:53:29.541000",
                        "user": "Maddison",
                        "text": "@Kanishkkumar188nrt"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-05-31T13:53:46.061000",
                        "user": "Maddison",
                        "text": "I thought the `&` behaved differently"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-05-31T13:55:05.471000",
                        "user": "Maddison",
                        "text": "which means that the algorithm is slightly different actually"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-05-31T13:55:28.105000",
                        "user": "Maddison",
                        "text": "it's not the `nextprime` but rather the `previousprime`"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-05-31T13:59:59.491000",
                        "user": "Madigan",
                        "text": "(defn sieve [nextprime & remaining] (remove #(zero? (rem % nextprime)) remaining))Changing to this doesnt return anything"
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-05-31T14:00:47.378000",
                        "user": "Maddison",
                        "text": "Yes because this is not destructuring but regular arguments. ```clj(defn sieve [[previousprime & remaining]] (remove #(zero? (rem % previousprime)) remaining))```"
                    },
                    {
                        "message_number": "9",
                        "ts": "2020-05-31T14:01:10.664000",
                        "user": "Madigan",
                        "text": "Oh right"
                    },
                    {
                        "message_number": "10",
                        "ts": "2020-06-01T09:32:39.086000",
                        "user": "Maddison",
                        "text": "Thank you! Although I did some research and as it turns out this is actually a different algorithm haha.> Primes can also be produced by iteratively sieving out the composites through\\xa0divisibility testing\\xa0by sequential primes one prime at a time. It is not the sieve of Eratosthenes but is often confused with it even though the sieve of Eratosthenes directly generates the composites instead of testing for them. Trial division has worse theoretical\\xa0complexity\\xa0than that of the sieve of Eratosthenes in generating ranges of primes."
                    },
                    {
                        "message_number": "11",
                        "ts": "2020-06-01T09:47:24.398000",
                        "user": "Maddison",
                        "text": "There is also this definition which seems interesting. I don't know if it is realisable in Clojure though```primes = [2 3 ...] \\\\ [[p\u00b2 p\u00b2+p ...] for p in primes]```"
                    },
                    {
                        "message_number": "12",
                        "ts": "2020-06-01T11:31:50.618000",
                        "user": "Maddison",
                        "text": "My implementation uses testing instead of generating the composites/multiples as well as an iterative/oneatatime approach so if I understand this correctly it's not the sieve of Eratosthenes"
                    }
                ]
            },
            {
                "conversation_id": "18",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-06-01T04:06:14.659000",
                        "user": "Danell",
                        "text": "@Johnny that was a wonderful implementation of the sieve"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-06-01T09:35:13.973000",
                        "user": "Maddison",
                        "text": "To implement a proper sieve with the same characteristics you probably need to write imperative code i.e. use transients"
                    }
                ]
            },
            {
                "conversation_id": "19",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-06-01T11:20:31.145000",
                        "user": "Madigan",
                        "text": "> Thank you! Although I did some research and as it turns out this is actually a different algorithm haha.@Johnny There are more than one approach the one which you implemented was the basic one other one is by iteration i did not understand the definition of it hence (cycle reading) it"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-06-01T11:54:13.121000",
                        "user": "Madigan",
                        "text": "https://www.geeksforgeeks.org/sieveoferatosthenes/ this actually supports your initial implementation. Also i dont think its viable to produce prime numbers iteratively someone correct me."
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-06-01T11:54:43.005000",
                        "user": "Madigan",
                        "text": "Is there any mathematician in the house?"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-06-01T11:56:30.716000",
                        "user": "Maddison",
                        "text": "The implementation there is different from mine in the aspects I just mentioned"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-06-01T11:56:42.431000",
                        "user": "Maddison",
                        "text": "It generates the multiples directly"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-06-01T11:56:57.788000",
                        "user": "Maddison",
                        "text": "It does not generate one prime at a time"
                    }
                ]
            },
            {
                "conversation_id": "20",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-06-01T15:05:31.128000",
                        "user": "Maddison",
                        "text": "Out of curiosity I tried the classic sieving approach to compare"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-06-01T15:10:19.251000",
                        "user": "Maddison",
                        "text": "When I said it took 0.02ms the other day that was probably due to me forgetting to account for the laziness"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-06-01T15:10:43.478000",
                        "user": "Maddison",
                        "text": "Since it was only evaluated after the measurement"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-06-01T15:11:19.135000",
                        "user": "Maddison",
                        "text": "It's still faster than your initial approach but not in such an extreme way anymore"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-06-01T15:13:44.459000",
                        "user": "Maddison",
                        "text": "For reference this would be the standard implementation transferred to clojure```clj(defn primes [n] (let [tagged (transient (vec (repeat n false)))] (doseq [i (range 2 (Math/sqrt n))] (when (not (tagged i)) (doseq [j (range ( i i) n i)] (assoc! tagged j true)))) (for [i (range 2 n) :when (not (tagged i))] i)))```"
                    }
                ]
            },
            {
                "conversation_id": "21",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-06-01T15:35:36.412000",
                        "user": "Hampton",
                        "text": "Personally I like the mutuallyrecursive approach like so:```clojure(declare prime?)(def primes (filter prime? (map #(+ 2 %) (range)))) ;; range 2+(defn prime? [n] (or (= n 2) (and (> n 2) (not (some #(zero? (rem n %)) (takewhile #(<= % (/ n 2)) primes))))))```"
                    }
                ]
            },
            {
                "conversation_id": "22",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-06-01T16:17:50.671000",
                        "user": "Dianne",
                        "text": "You can't just `assoc!` into a transient vector and assume the update will happen inplace \ud83d\ude05"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-06-01T16:20:58.767000",
                        "user": "Dianne",
                        "text": "Transient updates are destructive but not guaranteed to be inplace mutating."
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-06-01T16:21:39.504000",
                        "user": "Dianne",
                        "text": "Still have to capture the return value."
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-06-01T16:22:05.781000",
                        "user": "Dianne",
                        "text": "If you really want imperative update code like that wrap the transient in a volatile and use `vswap!`."
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-06-01T16:22:18.014000",
                        "user": "Maddison",
                        "text": "Oh didn't know that"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-06-01T16:22:22.775000",
                        "user": "Maddison",
                        "text": "Had no issues with this"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-06-01T16:22:49.148000",
                        "user": "Dianne",
                        "text": "I suspect vectors in particular have inplace mutation semantics for transients in whatever version of clojure you're using."
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-06-01T16:23:04.924000",
                        "user": "Dianne",
                        "text": "But that's not guaranteed by the transient API."
                    },
                    {
                        "message_number": "9",
                        "ts": "2020-06-01T16:25:04.258000",
                        "user": "Dianne",
                        "text": "@srasu Unless transient vectors have extra guarantees that I'm forgetting? ^"
                    },
                    {
                        "message_number": "10",
                        "ts": "2020-06-01T16:25:48.786000",
                        "user": "Hampton",
                        "text": "transients require you capture their return value."
                    },
                    {
                        "message_number": "11",
                        "ts": "2020-06-01T16:26:26.376000",
                        "user": "Hampton",
                        "text": "Reason being adding a new thing to the end of a transient vector necessarily allocs a new node which points to the old nodes and the new ones since vectors are trees. Now it doesn't always do that alloc but it can and you don't know when it will."
                    },
                    {
                        "message_number": "12",
                        "ts": "2020-06-01T16:26:47.777000",
                        "user": "Hampton",
                        "text": "If you rely on it not then you're relying on an implementation detail."
                    },
                    {
                        "message_number": "13",
                        "ts": "2020-06-01T16:27:39.549000",
                        "user": "Hampton",
                        "text": "I believe the most likely problem is that the 33rd node will always require you to capture the return value."
                    },
                    {
                        "message_number": "14",
                        "ts": "2020-06-01T16:28:50.156000",
                        "user": "Dianne",
                        "text": "But the whole tree is still wrapped by an extra root node at the top isn't it? So it might actually still just work... \ud83e\udd14"
                    },
                    {
                        "message_number": "15",
                        "ts": "2020-06-01T16:29:39.232000",
                        "user": "Dianne",
                        "text": "I always assumed the issue with transients had more to do with maps where the type of map might have to change because you added an element."
                    },
                    {
                        "message_number": "16",
                        "ts": "2020-06-01T16:29:45.512000",
                        "user": "Hampton",
                        "text": "I don't know if it is but I don't think so."
                    },
                    {
                        "message_number": "17",
                        "ts": "2020-06-01T16:30:09.297000",
                        "user": "Hampton",
                        "text": "also I don't believe transient maps have multiple types although I could be wrong on that."
                    },
                    {
                        "message_number": "18",
                        "ts": "2020-06-01T16:30:17.720000",
                        "user": "Dianne",
                        "text": "Persistent maps do IIRC."
                    },
                    {
                        "message_number": "19",
                        "ts": "2020-06-01T16:30:26.759000",
                        "user": "Hampton",
                        "text": "they do"
                    },
                    {
                        "message_number": "20",
                        "ts": "2020-06-01T16:30:33.582000",
                        "user": "Hampton",
                        "text": "array maps sorted maps and hash maps"
                    },
                    {
                        "message_number": "21",
                        "ts": "2020-06-01T16:30:55.092000",
                        "user": "Hampton",
                        "text": "I don't know if you call transient on a sorted map if it would remain sorted though."
                    },
                    {
                        "message_number": "22",
                        "ts": "2020-06-01T16:31:03.899000",
                        "user": "Dianne",
                        "text": "Wouldn't it have to?"
                    },
                    {
                        "message_number": "23",
                        "ts": "2020-06-01T16:31:27.709000",
                        "user": "Dianne",
                        "text": "Like you can provide the sorting order and the internal implementations are very different."
                    },
                    {
                        "message_number": "24",
                        "ts": "2020-06-01T16:31:39.896000",
                        "user": "Dianne",
                        "text": "If making a transient changed the internal representation then it couldn't be constant time."
                    },
                    {
                        "message_number": "25",
                        "ts": "2020-06-01T16:32:00.492000",
                        "user": "Dianne",
                        "text": "Internal implementations of sorted vs hash vs array that is."
                    },
                    {
                        "message_number": "26",
                        "ts": "2020-06-01T16:32:23.215000",
                        "user": "Dianne",
                        "text": "Like sorted maps are binary search trees while hash maps are hash arraymapped prefix tries."
                    },
                    {
                        "message_number": "27",
                        "ts": "2020-06-01T16:32:46.671000",
                        "user": "Dianne",
                        "text": "The sorting of a sorted map is integral to you being able to efficiently perform lookups."
                    },
                    {
                        "message_number": "28",
                        "ts": "2020-06-01T16:33:34.981000",
                        "user": "Dianne",
                        "text": "My point though is more that once you put enough elements into an array map it probably turns into a hash map."
                    },
                    {
                        "message_number": "29",
                        "ts": "2020-06-01T16:33:53.037000",
                        "user": "Dianne",
                        "text": "That's a change of type at the root level so the root node has to change."
                    },
                    {
                        "message_number": "30",
                        "ts": "2020-06-01T16:34:19.850000",
                        "user": "Dianne",
                        "text": "I could be wrong tho."
                    },
                    {
                        "message_number": "31",
                        "ts": "2020-06-01T16:34:59.468000",
                        "user": "Dianne",
                        "text": "As for vectors I'm 90% sure that the actual internal tree nodes are made of an inner class to the actual persistent vector class."
                    },
                    {
                        "message_number": "32",
                        "ts": "2020-06-01T16:35:21.494000",
                        "user": "Dianne",
                        "text": "It's been a few months since I read that code tho."
                    },
                    {
                        "message_number": "33",
                        "ts": "2020-06-01T16:38:26.755000",
                        "user": "Maddison",
                        "text": "> Personally I like the mutuallyrecursive approach like so:@srasu That looks nice but isn't it a little inefficient? because for each check it needs to go over the collection"
                    },
                    {
                        "message_number": "34",
                        "ts": "2020-06-01T16:40:48.237000",
                        "user": "Hampton",
                        "text": "It\\'s a little inefficient and if you check against sufficiently large numbers without warming the cache so to speak it\\'ll blow the stack too. It\\'s elegant but not particularly good unless you just need simple checks for lowvalue numbers. Moreover it does cache all the primes which means you aren\\'t recomputing if a number is prime at any point ever you\\'re just running over your cache. Probably the single easiest optimization though would be to exchange the takewhile from taking until it\\'s less or equal to the number divided by two with the same thing but with the square root of the number."
                    },
                    {
                        "message_number": "35",
                        "ts": "2020-06-01T16:42:01.860000",
                        "user": "Hampton",
                        "text": "@djeis yeah the transient would just be a wrapper around the sorted thing but calling persistent! on it after making an addition or two and who knows what order things will be sorted in?"
                    },
                    {
                        "message_number": "36",
                        "ts": "2020-06-01T16:42:21.331000",
                        "user": "Dianne",
                        "text": "Should be sorted by whatever sorting order the map was created with."
                    },
                    {
                        "message_number": "37",
                        "ts": "2020-06-01T16:42:35.771000",
                        "user": "Hampton",
                        "text": "Or rather if there is no sorted map implementation. I genuinely don't know if there are."
                    },
                    {
                        "message_number": "38",
                        "ts": "2020-06-01T16:42:36.255000",
                        "user": "Dianne",
                        "text": "Insertion into a sorted map still requires you respect the sorting order."
                    },
                    {
                        "message_number": "39",
                        "ts": "2020-06-01T16:42:56.567000",
                        "user": "Hampton",
                        "text": "yeah if you continue using it as a sorted map"
                    },
                    {
                        "message_number": "40",
                        "ts": "2020-06-01T16:43:37.678000",
                        "user": "Dianne",
                        "text": "If you try to `assoc!` something into a transient sorted map that can't be sorted by the sorting order of that map then it should error."
                    },
                    {
                        "message_number": "41",
                        "ts": "2020-06-01T16:44:28.842000",
                        "user": "Dianne",
                        "text": "Unless... If you `into` into a sorted map something that can't be sorted by that map does clojure just make a hash map out of it? That is an alternative it just seems like... a problematic one."
                    },
                    {
                        "message_number": "42",
                        "ts": "2020-06-01T16:45:24.073000",
                        "user": "Hampton",
                        "text": "I haven't really used sorted maps so I can't say."
                    },
                    {
                        "message_number": "43",
                        "ts": "2020-06-01T16:45:30.139000",
                        "user": "Dianne",
                        "text": "I\\'m right about the type change btw:```cljuser=> (class {:x 5})clojure.lang.PersistentArrayMapuser=> (transient {:x 5})#object[clojure.lang.PersistentArrayMap$TransientArrayMap 0x470a696f clojure.lang.PersistentArrayMap$TransientArrayMap@470a696f\"]user=> (reduce (fn [m k] (assoc! m k 5)) 1 (range 31))#object[clojure.lang.PersistentHashMap$TransientHashMap 0x5ddabb18 clojure.lang.PersistentHashMap$TransientHashMap@5ddabb18\"]user=> (persistent! 1){0 5 7 5 20 5 27 5 1 5 24 5 4 5 15 5 21 5 13 5 22 5 29 5 6 5 28 5 25 5 17 5 3 5 12 5 2 5 23 5 19 5 11 5 9 5 5 5 14 5 :x 5 26 5 16 5 30 5 10 5 18 5 8 5}```"
                    },
                    {
                        "message_number": "44",
                        "ts": "2020-06-01T16:45:54.686000",
                        "user": "Hampton",
                        "text": "cool"
                    },
                    {
                        "message_number": "45",
                        "ts": "2020-06-01T16:46:11.788000",
                        "user": "Hampton",
                        "text": "that tells me how they implement the transients so yeah there's gonna be the same for all the kinds."
                    },
                    {
                        "message_number": "46",
                        "ts": "2020-06-01T16:46:30.940000",
                        "user": "Dianne",
                        "text": "But there's no similar type change I know of that happens with vectors tho and I know there is an extra root node at the top of a vector."
                    },
                    {
                        "message_number": "47",
                        "ts": "2020-06-01T16:46:52.223000",
                        "user": "Dianne",
                        "text": "So I suspect that as an implementation detail you should not rely on it will happen to just work for vectors."
                    },
                    {
                        "message_number": "48",
                        "ts": "2020-06-01T16:46:58.962000",
                        "user": "Hampton",
                        "text": "huh"
                    },
                    {
                        "message_number": "49",
                        "ts": "2020-06-01T16:48:08.046000",
                        "user": "Dianne",
                        "text": "My implementation of transients in CL has a similar property there's always an extra root node at the top because there kinda has to be to make the transient stuff work out and to hold metadata that you really only need one reference to for the whole data structure (like the comparison function of a sorted map)."
                    },
                    {
                        "message_number": "50",
                        "ts": "2020-06-01T16:48:30.697000",
                        "user": "Dianne",
                        "text": "So as long as transient ops don't have to change the actual type/implementation they all happen to be inplace mutations."
                    },
                    {
                        "message_number": "51",
                        "ts": "2020-06-01T16:48:59.173000",
                        "user": "Hampton",
                        "text": "fair"
                    },
                    {
                        "message_number": "52",
                        "ts": "2020-06-01T16:50:26.765000",
                        "user": "Maddison",
                        "text": "Is it because the `remove`s all stack somehow?"
                    },
                    {
                        "message_number": "53",
                        "ts": "2020-06-01T16:50:39.397000",
                        "user": "Dianne",
                        "text": "Probably yea."
                    },
                    {
                        "message_number": "54",
                        "ts": "2020-06-01T16:58:20.444000",
                        "user": "Hampton",
                        "text": "Huh. I'm surprised honestly."
                    },
                    {
                        "message_number": "55",
                        "ts": "2020-06-01T16:58:49.930000",
                        "user": "Hampton",
                        "text": "I've been fiddling around with my implementation in a repl and even sending it to compute 10k primes at a time doesn't blow the stack"
                    },
                    {
                        "message_number": "56",
                        "ts": "2020-06-01T16:59:02.492000",
                        "user": "Hampton",
                        "text": "it takes a while sure"
                    },
                    {
                        "message_number": "57",
                        "ts": "2020-06-01T16:59:06.718000",
                        "user": "Hampton",
                        "text": "but it doesn't blow the stack"
                    },
                    {
                        "message_number": "58",
                        "ts": "2020-06-01T16:59:15.260000",
                        "user": "Hampton",
                        "text": "I wonder how much faster it'd be if I change it to sqrt"
                    },
                    {
                        "message_number": "59",
                        "ts": "2020-06-01T16:59:54.511000",
                        "user": "Hampton",
                        "text": "Yeah the last prime I computed was 224743 and I'm currently computing the 40001st prime"
                    },
                    {
                        "message_number": "60",
                        "ts": "2020-06-01T16:59:59.450000",
                        "user": "Hampton",
                        "text": "op just popped out"
                    },
                    {
                        "message_number": "61",
                        "ts": "2020-06-01T17:00:04.925000",
                        "user": "Hampton",
                        "text": "479939"
                    },
                    {
                        "message_number": "62",
                        "ts": "2020-06-01T17:00:21.826000",
                        "user": "Maddison",
                        "text": "ok yours is a lot better then"
                    },
                    {
                        "message_number": "63",
                        "ts": "2020-06-01T17:00:48.628000",
                        "user": "Maddison",
                        "text": "because my stack already explodes at 50k"
                    },
                    {
                        "message_number": "64",
                        "ts": "2020-06-01T17:01:29.843000",
                        "user": "Maddison",
                        "text": "I thought it wouldn't be possible honestly"
                    },
                    {
                        "message_number": "65",
                        "ts": "2020-06-01T17:01:54.552000",
                        "user": "Maddison",
                        "text": "But it must be because of all the `remove` closures"
                    },
                    {
                        "message_number": "66",
                        "ts": "2020-06-01T17:04:21.174000",
                        "user": "Maddison",
                        "text": "well that's a little disappointing lol"
                    },
                    {
                        "message_number": "67",
                        "ts": "2020-06-01T17:10:47.603000",
                        "user": "Hampton",
                        "text": "holy crap the sqrt optimization helped"
                    },
                    {
                        "message_number": "68",
                        "ts": "2020-06-01T17:12:13.725000",
                        "user": "Hampton",
                        "text": "```clojure(declare primes)(defn prime? [n] (or (= n 2) (not (some #(zero? (rem n %)) (let [sqrt (inc (Math/sqrt n))] (takewhile #(<= % sqrt) primes))))))(def primes (filter prime? (cons 2 (map (comp inc #( 2 %) inc) (range)))))```"
                    },
                    {
                        "message_number": "69",
                        "ts": "2020-06-01T17:12:45.134000",
                        "user": "Hampton",
                        "text": "Only took ~2s to compute the 100kth prime"
                    },
                    {
                        "message_number": "70",
                        "ts": "2020-06-01T17:13:21.927000",
                        "user": "Hampton",
                        "text": "has clojure gotten better at lazy seqs?"
                    },
                    {
                        "message_number": "71",
                        "ts": "2020-06-01T17:15:26.503000",
                        "user": "Hampton",
                        "text": "because from a completely fresh `primes` list I get this:```clojure(time (first (drop 1000000 primes)))\"Elapsed time: 64829.32917 msecs\"15485867```"
                    },
                    {
                        "message_number": "72",
                        "ts": "2020-06-01T17:15:45.622000",
                        "user": "Hampton",
                        "text": "didn't blow the stack computing the ~1 millionth prime"
                    },
                    {
                        "message_number": "73",
                        "ts": "2020-06-01T17:15:52.298000",
                        "user": "Maddison",
                        "text": "that's pretty damn good"
                    },
                    {
                        "message_number": "74",
                        "ts": "2020-06-01T17:15:55.759000",
                        "user": "Hampton",
                        "text": "yeah"
                    },
                    {
                        "message_number": "75",
                        "ts": "2020-06-01T17:16:06.598000",
                        "user": "Hampton",
                        "text": "especially for such an elegant solution imo."
                    },
                    {
                        "message_number": "76",
                        "ts": "2020-06-01T17:16:15.496000",
                        "user": "Hampton",
                        "text": "guess this solution isn't as bad as I thought lol"
                    },
                    {
                        "message_number": "77",
                        "ts": "2020-06-01T17:16:53.121000",
                        "user": "Hampton",
                        "text": "But yeah it helps a lot with other functionality that people might want too since it gives a full sequence of primes not just checks if a particular number is prime"
                    },
                    {
                        "message_number": "78",
                        "ts": "2020-06-01T17:17:20.381000",
                        "user": "Hampton",
                        "text": "computing it the second time was 40 ms but that's less reliable since `time` isn't good at lower values."
                    },
                    {
                        "message_number": "79",
                        "ts": "2020-06-01T17:18:21.401000",
                        "user": "Maddison",
                        "text": "What's more accurate than `System.nanoTime()` that comes out of the box?"
                    },
                    {
                        "message_number": "80",
                        "ts": "2020-06-01T17:19:40.944000",
                        "user": "Hampton",
                        "text": "more accurate (similar amount of precision) is anything that criterium produces"
                    },
                    {
                        "message_number": "81",
                        "ts": "2020-06-01T17:19:43.975000",
                        "user": "Hampton",
                        "text": "since it does sampling"
                    },
                    {
                        "message_number": "82",
                        "ts": "2020-06-01T17:20:01.580000",
                        "user": "Hampton",
                        "text": "plus also the jvm and how the jit works makes profiling this sort of thing a little weird."
                    },
                    {
                        "message_number": "83",
                        "ts": "2020-06-01T17:20:15.716000",
                        "user": "Maddison",
                        "text": "that's true"
                    },
                    {
                        "message_number": "84",
                        "ts": "2020-06-01T17:20:22.879000",
                        "user": "Hampton",
                        "text": "alright well now to sit down and wait for the 10 millionth prime and see if that stack overflows."
                    },
                    {
                        "message_number": "85",
                        "ts": "2020-06-01T17:20:39.598000",
                        "user": "Maddison",
                        "text": "lmfao"
                    },
                    {
                        "message_number": "86",
                        "ts": "2020-06-01T17:20:44.222000",
                        "user": "Hampton",
                        "text": "I doubt it if 1 million didn't but still. :P"
                    },
                    {
                        "message_number": "87",
                        "ts": "2020-06-01T17:21:15.773000",
                        "user": "Hampton",
                        "text": "like I already calculated the 2millionth prime and it's 32452867"
                    },
                    {
                        "message_number": "88",
                        "ts": "2020-06-01T17:23:12.533000",
                        "user": "Maddison",
                        "text": "you may run into different issues because of Math/sqrt maybe"
                    },
                    {
                        "message_number": "89",
                        "ts": "2020-06-01T17:23:21.622000",
                        "user": "Hampton",
                        "text": "Oh?"
                    },
                    {
                        "message_number": "90",
                        "ts": "2020-06-01T17:23:37.552000",
                        "user": "Maddison",
                        "text": "Since it takes a double (i think?)"
                    },
                    {
                        "message_number": "91",
                        "ts": "2020-06-01T17:23:51.213000",
                        "user": "Maddison",
                        "text": "couldn't that lead to a loss of precision"
                    },
                    {
                        "message_number": "92",
                        "ts": "2020-06-01T17:24:12.431000",
                        "user": "Hampton",
                        "text": "Yeah it takes a double."
                    },
                    {
                        "message_number": "93",
                        "ts": "2020-06-01T17:24:21.543000",
                        "user": "Hampton",
                        "text": "I should see if there's a clojure sqrt in numerictower"
                    },
                    {
                        "message_number": "94",
                        "ts": "2020-06-01T17:24:48.477000",
                        "user": "Hampton",
                        "text": "Ah exactintegersqrt"
                    },
                    {
                        "message_number": "95",
                        "ts": "2020-06-01T17:25:29.072000",
                        "user": "Hampton",
                        "text": "But really I just need the sqrt to be accurate to within the distance of primes between each other at the scale that it's at so within the nearest 2 or so."
                    },
                    {
                        "message_number": "96",
                        "ts": "2020-06-01T17:25:38.554000",
                        "user": "Hampton",
                        "text": "at a minimum"
                    },
                    {
                        "message_number": "97",
                        "ts": "2020-06-01T17:28:34.478000",
                        "user": "Hampton",
                        "text": "Which I'll know if it's accurate as soon as it produces a result and at this point it seems like it will"
                    },
                    {
                        "message_number": "98",
                        "ts": "2020-06-01T17:28:45.491000",
                        "user": "Hampton",
                        "text": "because I have the 1million and 1th prime right here"
                    },
                    {
                        "message_number": "99",
                        "ts": "2020-06-01T17:40:03.097000",
                        "user": "Hampton",
                        "text": "Lol well I knew it'd get slower as it computed larger primes but this is getting silly"
                    },
                    {
                        "message_number": "100",
                        "ts": "2020-06-01T17:44:19.997000",
                        "user": "Hampton",
                        "text": "still not"
                    },
                    {
                        "message_number": "101",
                        "ts": "2020-06-01T17:44:27.160000",
                        "user": "Hampton",
                        "text": "but it also hasn't overflowed"
                    },
                    {
                        "message_number": "102",
                        "ts": "2020-06-01T17:48:55.790000",
                        "user": "Hampton",
                        "text": "got it!"
                    },
                    {
                        "message_number": "103",
                        "ts": "2020-06-01T17:49:21.311000",
                        "user": "Hampton",
                        "text": "and it got it right"
                    },
                    {
                        "message_number": "104",
                        "ts": "2020-06-01T17:49:23.703000",
                        "user": "Hampton",
                        "text": "179424691"
                    },
                    {
                        "message_number": "105",
                        "ts": "2020-06-01T17:51:05.469000",
                        "user": "Hampton",
                        "text": "What's interesting here as well is that it's faster to compute the sqrt and the divisions than it is to walk to that point in the sequence"
                    },
                    {
                        "message_number": "106",
                        "ts": "2020-06-01T17:51:45.412000",
                        "user": "Hampton",
                        "text": "`(nth primes 10000001)` takes almost 200 ms while `(prime? 179424697)` only takes 0.25 ms"
                    },
                    {
                        "message_number": "107",
                        "ts": "2020-06-01T18:17:57.447000",
                        "user": "Hampton",
                        "text": "Yeah those cache misses hit real hard"
                    },
                    {
                        "message_number": "108",
                        "ts": "2020-06-01T18:18:50.366000",
                        "user": "Hampton",
                        "text": "Also notable and amusing is that it means that to compute if a given number is prime the cache need only be warmed with numbers up to the sqrt of its value meaning you can check quite large primes on a relatively small list size."
                    },
                    {
                        "message_number": "109",
                        "ts": "2020-06-01T18:19:17.218000",
                        "user": "Dianne",
                        "text": "Yup"
                    },
                    {
                        "message_number": "110",
                        "ts": "2020-06-01T18:19:37.370000",
                        "user": "Hampton",
                        "text": "I'm actually not sure if I've seen any other algorithm which scales with sqrt(n)"
                    },
                    {
                        "message_number": "111",
                        "ts": "2020-06-01T18:20:07.983000",
                        "user": "Dianne",
                        "text": "I think I've seen a few but I can't remember them off hand."
                    },
                    {
                        "message_number": "112",
                        "ts": "2020-06-01T18:37:23.810000",
                        "user": "Hampton",
                        "text": "As a result the cleaned up version of this code looks like this:```clojure(ns sandbox.primes (:require [clojure.math.numerictower :as math]))(declare primes)(def flooredsqrt Returns the floor of the square root of the input.\" (comp math/floor math/sqrt))(defn prime? Returns the passed number if it is prime and nil otherwise.\" [n] (and (when (> n 1) true) (not (some #(zero? (rem n %)) (let [sqrt (flooredsqrt n)] (takewhile #(<= % sqrt) primes))))))(def primes Lazy sequence of all prime numbers.\" (cons 2 ;; Filters a list of all odd numbers greater than 1 by if they are prime (filter prime? (map (comp inc #( 2 %) inc) (range)))))```"
                    },
                    {
                        "message_number": "113",
                        "ts": "2020-06-01T18:43:01.926000",
                        "user": "Hampton",
                        "text": "Yes but it's part of clojure contrib"
                    },
                    {
                        "message_number": "114",
                        "ts": "2020-06-01T18:43:13.388000",
                        "user": "Hampton",
                        "text": "https://github.com/clojure/math.numerictower"
                    },
                    {
                        "message_number": "115",
                        "ts": "2020-06-01T18:43:25.102000",
                        "user": "Hampton",
                        "text": "Which means it's published under org.clojure"
                    },
                    {
                        "message_number": "116",
                        "ts": "2020-06-01T18:44:51.894000",
                        "user": "Maddison",
                        "text": "Ah alright"
                    },
                    {
                        "message_number": "117",
                        "ts": "2020-06-01T18:44:58.874000",
                        "user": "Maddison",
                        "text": "Useful stuff"
                    },
                    {
                        "message_number": "118",
                        "ts": "2020-06-03T22:43:52.508000",
                        "user": "Maddison",
                        "text": "Regarding primes again and in particular your implementation @srasu :https://phillippe.siclait.com/blog/primeslazysequence"
                    },
                    {
                        "message_number": "119",
                        "ts": "2020-06-03T22:44:28.464000",
                        "user": "Maddison",
                        "text": "This is something I hadn't even thought about and it's rather difficult to get into my head but it's certainly interesting"
                    },
                    {
                        "message_number": "120",
                        "ts": "2020-06-03T22:47:10.687000",
                        "user": "Hampton",
                        "text": "Yeah that\\'s more or less the same idea as I had I just wanted an is prime predicate"
                    },
                    {
                        "message_number": "121",
                        "ts": "2020-06-03T22:48:05.935000",
                        "user": "Hampton",
                        "text": "Also my way of doing it does enable you to have a cache and then do prime tests against numbers up to the square of the largest prime you've fetched from the list without computing any additional primes"
                    },
                    {
                        "message_number": "122",
                        "ts": "2020-06-03T22:48:33.497000",
                        "user": "Hampton",
                        "text": "I do like the article though"
                    },
                    {
                        "message_number": "123",
                        "ts": "2020-06-03T23:02:00.543000",
                        "user": "Maddison",
                        "text": "Yeah I don't mean the specifics just the general similarity that you also filter the sequence using the sequence itself"
                    },
                    {
                        "message_number": "124",
                        "ts": "2020-06-03T23:04:53.789000",
                        "user": "Hampton",
                        "text": "Yup"
                    },
                    {
                        "message_number": "125",
                        "ts": "2020-06-04T18:41:06.512000",
                        "user": "Hampton",
                        "text": "Thanks alex! Super cool to see that!"
                    }
                ]
            },
            {
                "conversation_id": "23",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-06-01T16:50:05.271000",
                        "user": "Maddison",
                        "text": "I realised that this also blows up the stack at a sufficiently high number. But how? https://discordapp.com/channels/313110246643990528/315388260987830272/716588820132266065"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-06-01T16:59:24.522000",
                        "user": "Maddison",
                        "text": "Mine gave me a StackOverflow for the primes up to a million I think"
                    }
                ]
            },
            {
                "conversation_id": "24",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-06-01T17:43:04.450000",
                        "user": "Maddison",
                        "text": "still not done?"
                    }
                ]
            },
            {
                "conversation_id": "25",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-06-01T18:14:42.121000",
                        "user": "Dianne",
                        "text": "Too many rams involved."
                    }
                ]
            },
            {
                "conversation_id": "26",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-06-01T18:41:49.218000",
                        "user": "Maddison",
                        "text": "Is clojure.math.numerictower an external dependency?"
                    }
                ]
            },
            {
                "conversation_id": "27",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-06-04T16:36:44.810000",
                        "user": "Lyncoln",
                        "text": "A History of Clojure by Rich Hickey https://clojure.org/about/history"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-06-06T08:18:20.028000",
                        "user": "Maddison",
                        "text": "That was a nice read"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-06-08T21:09:16.008000",
                        "user": "Ioane",
                        "text": "https://www.tadamframework.dev/"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-06-08T21:09:22.034000",
                        "user": "Ioane",
                        "text": "I like how this looks!"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-06-09T03:59:28.003000",
                        "user": "Ioane",
                        "text": "I don't know :/"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-06-12T15:54:37.235000",
                        "user": "Maddison",
                        "text": "nvm got it"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-06-12T15:54:40.199000",
                        "user": "Maddison",
                        "text": "clojure.java.shell"
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-06-12T15:58:13.916000",
                        "user": "Hampton",
                        "text": "Be aware that `sh` blocks until the subprocess completes"
                    }
                ]
            },
            {
                "conversation_id": "28",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-06-04T17:00:50.685000",
                        "user": "Savvi",
                        "text": "Oooo thanks!"
                    }
                ]
            },
            {
                "conversation_id": "29",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-06-09T03:14:32.403000",
                        "user": "Sincerity",
                        "text": "@spacey \ud83c\udf0c will it support reitit in the future?"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-06-12T04:06:38.288000",
                        "user": "Hampton",
                        "text": "It's been a while since I mentioned this project so there might be a decent number of people who haven't seen it yet:I made a library for making Discord bots in Clojure. It's currently more complete than any other library offering complete coverage of the Discord API excluding voice gateway support and a number of bots have been developed with it. It offers transparent support for sharding and rate limits.https://github.com/IGJoshua/discljord"
                    }
                ]
            },
            {
                "conversation_id": "30",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-06-12T15:47:56.259000",
                        "user": "Maddison",
                        "text": "does anybody use babashka and know what's the best way to run a subprocess?"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-06-12T16:18:45.782000",
                        "user": "Maddison",
                        "text": "yup I am"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-06-12T23:16:07.870000",
                        "user": "Maddison",
                        "text": "Is there any way to say use this executor for this specific go block in core.async?"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-06-12T23:20:55.548000",
                        "user": "Hampton",
                        "text": "I don't believe so"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-06-12T23:22:04.684000",
                        "user": "Maddison",
                        "text": "That is really tragic"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-06-12T23:22:59.825000",
                        "user": "Maddison",
                        "text": "It should really be a thing considering that many frameworks and libraries require you to use specific threads or thread pools"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-06-13T08:28:04.163000",
                        "user": "Maddison",
                        "text": "Yeah I don't mean globally"
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-06-16T12:02:57.427000",
                        "user": "Maddison",
                        "text": "I specifically want to look into raw TCP not websockets or anything else on top"
                    }
                ]
            },
            {
                "conversation_id": "31",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-06-13T05:48:11.929000",
                        "user": "Brinna",
                        "text": "@Johnny only for one specific go block? You could try some dark magic likehttps://stackoverflow.com/a/38577871/1888507But I see it very hard. Globally maybe for one go block maybe not..."
                    }
                ]
            },
            {
                "conversation_id": "32",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-06-16T06:56:15.369000",
                        "user": "Maddison",
                        "text": "Any recommendations for writing TCP servers with Clojure? I've only looked at this library so farhttps://github.com/ztellman/aleph"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-06-16T13:59:23.070000",
                        "user": "Maddison",
                        "text": "Oh that might be a good call"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-06-16T13:59:33.166000",
                        "user": "Maddison",
                        "text": "There seems to be an interop library for clojure as well"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-06-16T14:00:01.252000",
                        "user": "Maddison",
                        "text": "`nio` uses some sort of async channels right?"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-06-16T14:01:07.485000",
                        "user": "Maddison",
                        "text": "Would be incredibly useful to find something that translates them to core.async channels or sth"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-06-19T06:57:24.041000",
                        "user": "Tiara",
                        "text": "ask on #cider on slackbozidar (main maintainer) is always therehe knows the answer to this.And if you do find it please share cause i was always recompiling \ud83d\ude42"
                    }
                ]
            },
            {
                "conversation_id": "33",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-06-16T11:58:37.543000",
                        "user": "Hampton",
                        "text": "Gniazdo is what i'm using for websockets but it's not quite as low level as tcp sockets"
                    }
                ]
            },
            {
                "conversation_id": "34",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-06-16T13:40:10.579000",
                        "user": "Rastislav",
                        "text": "what about java.nio?"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-06-16T15:58:05.476000",
                        "user": "Rastislav",
                        "text": "yes `nio` supports async"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-06-22T19:27:56.843000",
                        "user": "Danell",
                        "text": "I've implemented a solution for primes number too what do you think?"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-06-22T19:29:05.990000",
                        "user": "Danell",
                        "text": "```(defn nprimes [to] (reduce (fn [primes n] (if (>> (takewhile #(<= % (Math/sqrt ^long n)) primes) (some #(zero? (rem ^long n ^long %)))) primes (conj primes n))) [] (range 2 (inc to))))```"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-06-23T23:15:02.310000",
                        "user": "Danell",
                        "text": "well seems like with that condition for adding the number to the list of primes I was making a lot of precomputation that I don't need"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-06-23T23:15:23.697000",
                        "user": "Danell",
                        "text": "measured with criterium this is 8.6 times faster"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-06-23T23:15:32.900000",
                        "user": "Danell",
                        "text": "```(defn v6primes [to] (reduce (fn [primes ^long n] (if (reduce (fn [_ ^long x] (cond (zero? (rem n x)) (reduced true) (> x (Math/sqrt n)) (reduced false))) false primes) primes (conj primes n))) [] (cons 2 (range 3 (inc to) 2))))```"
                    }
                ]
            },
            {
                "conversation_id": "35",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-06-19T02:46:48.974000",
                        "user": "Maelin",
                        "text": "anyone running cider know if its possible to recompile java source code without completely restarting cider?"
                    }
                ]
            },
            {
                "conversation_id": "36",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-06-29T21:03:14.218000",
                        "user": "Dylam",
                        "text": "Hey all any Quil users here?"
                    }
                ]
            },
            {
                "conversation_id": "37",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-06-30T16:27:00.406000",
                        "user": "Maelin",
                        "text": "I poke around with it a bit. What's up?"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-06-30T16:27:26.436000",
                        "user": "Zaelah",
                        "text": "What\u2019s quil for the uninitiated?"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-06-30T16:27:49.928000",
                        "user": "Maelin",
                        "text": "clj[s] wrapper around processing"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-06-30T16:28:19.889000",
                        "user": "Zaelah",
                        "text": "Processing? Very broad"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-06-30T16:29:15.561000",
                        "user": "Maelin",
                        "text": "It's a Java graphics lib focuses around art. Lots of generative art stuff"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-06-30T16:29:54.580000",
                        "user": "Maelin",
                        "text": "Processing is the Java version and p5 is the js version"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-06-30T17:45:23.117000",
                        "user": "Maelin",
                        "text": "And you're animating them I presume?"
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-06-30T17:52:36.175000",
                        "user": "Maelin",
                        "text": "Should be pretty straight forward take a look through this sketch. It's animated but shows how to draw multiple images on top of each other http://quil.info/sketches/show/example_spaceship"
                    }
                ]
            },
            {
                "conversation_id": "38",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-06-30T17:27:35.952000",
                        "user": "Dylam",
                        "text": "Just wondering how hard it would be to create layered images."
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-06-30T17:44:53.124000",
                        "user": "Dylam",
                        "text": "Like if I have 4 PNGs I want to layer on top of each other"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-06-30T17:45:48.012000",
                        "user": "Dylam",
                        "text": "Not animating"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-06-30T18:38:38.007000",
                        "user": "Dylam",
                        "text": "ty"
                    }
                ]
            },
            {
                "conversation_id": "39",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-07-02T11:00:13.508000",
                        "user": "Suraya",
                        "text": "Hi guys I tried searching everywhere but what unicode encoding in Clojure using? It doesn't seem to be UTF8"
                    }
                ]
            },
            {
                "conversation_id": "40",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-07-02T12:19:56.313000",
                        "user": "Dianne",
                        "text": "JVM clojure?"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-07-02T12:20:07.539000",
                        "user": "Dianne",
                        "text": "I would imagine that's more a property of thet JVM than of clojure."
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-07-02T12:22:07.116000",
                        "user": "Dianne",
                        "text": "Looks like the internal representation is UTF16: https://stackoverflow.com/questions/9699071/whatisthejavasinternalrepresentionforstringmodifiedutf8utf16"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-07-02T12:22:12.060000",
                        "user": "Maddison",
                        "text": "the encoding is languageindependent and up to you"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-07-02T12:22:24.696000",
                        "user": "Maddison",
                        "text": "unless you mean strings or something"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-07-02T12:23:13.460000",
                        "user": "Dianne",
                        "text": "Right yea if you\\'re talking what encoding it defaults to when reading/writing the answer is usually depends how you\\'re reading and writing\"."
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-07-02T12:25:33.896000",
                        "user": "Dianne",
                        "text": "Oh actually it looks like more recent JVM's use a combination of UTF16 and Latin1 as needed."
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-07-04T15:25:00.891000",
                        "user": "Maelin",
                        "text": "Yes with `pixels` and `updatepixels` the docs have an example of how to use both together"
                    },
                    {
                        "message_number": "9",
                        "ts": "2020-07-04T15:25:52.814000",
                        "user": "Maelin",
                        "text": "http://quil.info/api/image/pixels#pixels"
                    },
                    {
                        "message_number": "10",
                        "ts": "2020-07-04T15:28:15.688000",
                        "user": "Maelin",
                        "text": "If you're having trouble finding how to do something in quil try searching for the equivalent processing method instead. Quil is a pretty thin wrapper and processing has a bigger user base so it's usually easier to find info on processing and just convert"
                    }
                ]
            },
            {
                "conversation_id": "41",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-07-02T14:56:48.817000",
                        "user": "Suraya",
                        "text": "Thanks all! I figured out my eyes might have been playing tricks on me .... :x"
                    }
                ]
            },
            {
                "conversation_id": "42",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-07-04T13:44:01.643000",
                        "user": "Dylam",
                        "text": "In Quil is there a way to isolate alpha and recolor all the nontransparent pixels to 1 color in a PNG?"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-07-04T15:28:34.319000",
                        "user": "Dylam",
                        "text": "Thanks that's helpful to know."
                    }
                ]
            },
            {
                "conversation_id": "43",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-07-07T17:36:24.045000",
                        "user": "Maddison",
                        "text": "When exactly do ring sessions get deleted? I have a log in via oauth2 thing on a website and before redirecting to the authorisation url I store a few things in the session. But after the login is completed and redirected to my website the previous session is gone"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-07-07T17:36:54.331000",
                        "user": "Maddison",
                        "text": "For some reason it worked for a little while until I tampered with it again"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-07-07T17:37:18.197000",
                        "user": "Maddison",
                        "text": "I tried to restore everything as before but it doesn't work anymore the session is gone every time"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-07-08T08:41:15.974000",
                        "user": "Maddison",
                        "text": "Sorry I'm still rather new to webdev and ring. What are the implications of being http only or how does it affect this particular situation? @lsenjov"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-07-08T08:49:15.384000",
                        "user": "Maddison",
                        "text": ":session :cookieattrs :httponly was indeed set to true I dissociated it but still same result"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-07-08T08:49:31.122000",
                        "user": "Savvi",
                        "text": "My bad wrong thing it needs to be lax instead of strict"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-07-08T08:49:42.344000",
                        "user": "Maddison",
                        "text": ":samesite?"
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-07-08T08:49:55.575000",
                        "user": "Savvi",
                        "text": "SameSite needs to be lax or the cookie doesn't persist"
                    },
                    {
                        "message_number": "9",
                        "ts": "2020-07-08T08:50:43.289000",
                        "user": "Maddison",
                        "text": "Ah I've reckoned something like this. Is it as I suspect: the cookie is deleted/overwritten once you leave the site?"
                    },
                    {
                        "message_number": "10",
                        "ts": "2020-07-08T08:51:28.823000",
                        "user": "Maddison",
                        "text": "Because I couldn't find any docs for those config options."
                    },
                    {
                        "message_number": "11",
                        "ts": "2020-07-08T08:52:38.151000",
                        "user": "Maddison",
                        "text": "tysm. This worked. But do you have an idea where this is documented?"
                    },
                    {
                        "message_number": "12",
                        "ts": "2020-07-08T08:56:12.493000",
                        "user": "Savvi",
                        "text": "https://developer.mozilla.org/enUS/docs/Web/HTTP/Cookies"
                    },
                    {
                        "message_number": "13",
                        "ts": "2020-07-08T08:56:19.324000",
                        "user": "Savvi",
                        "text": "Check SameSite"
                    },
                    {
                        "message_number": "14",
                        "ts": "2020-07-08T08:57:22.242000",
                        "user": "Maddison",
                        "text": "Thank you!"
                    }
                ]
            },
            {
                "conversation_id": "44",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-07-08T03:12:12.736000",
                        "user": "Savvi",
                        "text": "Check if the middleware is httponly. If it is you'll need to change it"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-07-08T03:12:41.317000",
                        "user": "Savvi",
                        "text": "If it's what I'm thinking of the session is fine but the browser is sending a new cookie/not sending the old so it's getting a new one"
                    }
                ]
            },
            {
                "conversation_id": "45",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-07-11T03:50:02.902000",
                        "user": "Dylam",
                        "text": "https://github.com/Frosku/mirrorpoolCan someone else see if they can get the uberjar to work for this?"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-07-11T03:50:14.865000",
                        "user": "Dylam",
                        "text": "Mine doesn't but lein run works and I'm very confused."
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-07-29T17:54:48.768000",
                        "user": "Maddison",
                        "text": "Yeah `contains?` only works on associative data structures"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-07-29T17:54:54.271000",
                        "user": "Maddison",
                        "text": "And it uses keys"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-07-29T17:55:12.488000",
                        "user": "Maddison",
                        "text": "Vectors are associations of index > value"
                    }
                ]
            },
            {
                "conversation_id": "46",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-07-11T09:05:10.845000",
                        "user": "Cruze",
                        "text": "What errors do you get?"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-07-29T17:29:03.697000",
                        "user": "Andras",
                        "text": "what's the reasoning for (contains? [:k] :k) => false"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-07-29T17:31:27.451000",
                        "user": "Andras",
                        "text": "oh clojure docs explains it's a matter of index not value"
                    }
                ]
            },
            {
                "conversation_id": "47",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-07-30T01:38:25.806000",
                        "user": "Czar",
                        "text": "`contains?` has to be one of the biggest gotcha fns in the entire language..."
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-07-30T01:38:35.561000",
                        "user": "Czar",
                        "text": "Every time I think it's what I need it isn't."
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-07-30T16:40:18.957000",
                        "user": "Andras",
                        "text": "it's surprisingly an ultra common word/term with a very not common semantic \ud83d\ude42"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-07-30T16:40:31.584000",
                        "user": "Andras",
                        "text": "let's rename it kontains?"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-07-30T16:41:05.050000",
                        "user": "Adalind",
                        "text": "we should have both contains? and kontains? to make it clearer"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-07-30T17:00:02.542000",
                        "user": "Andras",
                        "text": "i was merely joking but I think it deserves a different name"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-07-30T17:02:56.000000",
                        "user": "Andras",
                        "text": "anybody ever seen an attempt at a react style gui framework for client side jvm ?"
                    }
                ]
            },
            {
                "conversation_id": "48",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-07-30T17:10:32.300000",
                        "user": "Hampton",
                        "text": "fnfx"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-07-30T17:10:43.538000",
                        "user": "Hampton",
                        "text": "and cljfx"
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-07-30T17:10:51.406000",
                        "user": "Hampton",
                        "text": "they're both wrappers around javafx"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-07-30T17:12:19.757000",
                        "user": "Andras",
                        "text": "I meant standalone not javafx based"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-07-30T17:12:46.143000",
                        "user": "Andras",
                        "text": "thanks nonetheless"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-07-30T18:07:12.033000",
                        "user": "Hampton",
                        "text": "What do you mean standalone?"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-07-30T18:07:22.970000",
                        "user": "Hampton",
                        "text": "Do you mean like a wrapper of java swing?"
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-07-30T18:07:49.346000",
                        "user": "Hampton",
                        "text": "At some point you have to interoperate with a java gui library whether that be the builtins or javafx."
                    },
                    {
                        "message_number": "9",
                        "ts": "2020-07-30T18:08:00.616000",
                        "user": "Hampton",
                        "text": "@agumonkey"
                    },
                    {
                        "message_number": "10",
                        "ts": "2020-07-30T18:22:50.757000",
                        "user": "Andras",
                        "text": "@srasu yeah some kind of raw rewrite of react like concepts on awt/swing"
                    },
                    {
                        "message_number": "11",
                        "ts": "2020-07-30T18:23:00.445000",
                        "user": "Andras",
                        "text": "bypassing java usual way of things"
                    },
                    {
                        "message_number": "12",
                        "ts": "2020-07-30T18:23:15.161000",
                        "user": "Andras",
                        "text": "a react/seesaw blend"
                    },
                    {
                        "message_number": "13",
                        "ts": "2020-07-30T18:25:57.206000",
                        "user": "Hampton",
                        "text": "No that's not currently a thing. Although I'm not sure what disqualifies using javafx with cljfx and fnfx."
                    },
                    {
                        "message_number": "14",
                        "ts": "2020-07-30T18:26:07.226000",
                        "user": "Hampton",
                        "text": "Do you want to just straight up port a reagent app to the JVM or something?"
                    },
                    {
                        "message_number": "15",
                        "ts": "2020-07-30T21:06:07.682000",
                        "user": "Hampton",
                        "text": "It's not a recreation of the dom idea."
                    }
                ]
            },
            {
                "conversation_id": "49",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-07-30T18:42:29.812000",
                        "user": "Mariana",
                        "text": "just do what discord does and run electrum ontop of a react app"
                    }
                ]
            },
            {
                "conversation_id": "50",
                "List of text": [
                    {
                        "message_number": "1",
                        "ts": "2020-07-30T20:58:55.004000",
                        "user": "Andras",
                        "text": "@srasu I don't know much about javafx but it seemed like a recreation of the browser way of things and not a react like system. That's why I thought maybe somebody reusing swing graphic subsystem and write a purely functional reactive layer on it"
                    },
                    {
                        "message_number": "2",
                        "ts": "2020-07-30T21:05:40.308000",
                        "user": "Hampton",
                        "text": "No nothing like that exists and I don't think that's an accurate representation of what javafx is. Javafx is still a pretty normal nativestyle graphics library with some utility features around sweeping boiler plate away under xml files."
                    },
                    {
                        "message_number": "3",
                        "ts": "2020-07-30T21:07:16.993000",
                        "user": "Andras",
                        "text": "doesn't it support css or similar dynamic styling rules ?"
                    },
                    {
                        "message_number": "4",
                        "ts": "2020-07-30T21:08:54.701000",
                        "user": "Hampton",
                        "text": "Yeah why?"
                    },
                    {
                        "message_number": "5",
                        "ts": "2020-07-30T21:09:48.354000",
                        "user": "Hampton",
                        "text": "So do a lot of other libraries like gtk and qt"
                    },
                    {
                        "message_number": "6",
                        "ts": "2020-07-30T21:18:08.830000",
                        "user": "Andras",
                        "text": "that's half why I thought it was a recreation of the browser way"
                    },
                    {
                        "message_number": "7",
                        "ts": "2020-07-30T21:18:21.171000",
                        "user": "Andras",
                        "text": "sea of nodes dynamic updates over a big state"
                    },
                    {
                        "message_number": "8",
                        "ts": "2020-07-30T21:32:54.352000",
                        "user": "Hampton",
                        "text": "I mean that's how swing gtk qt and everything else that's not immediate mode work. It's just swing and awt don't allow dynamic styling or multithreading."
                    },
                    {
                        "message_number": "9",
                        "ts": "2020-07-30T21:34:47.529000",
                        "user": "Hampton",
                        "text": "The only other common way to do gui programming is immediate mode guis but those are basically write your own retained mode gui for any sizable project. Otherwise it's basically not used. Although you can do it with quil."
                    },
                    {
                        "message_number": "10",
                        "ts": "2020-07-30T21:37:35.713000",
                        "user": "Hampton",
                        "text": "The way that clojure and react work is really just the way you map immutability onto that idea of retained mode. Although it's arguably easier to implement from scratch than true retained mode since you can more easily write a simple immediate mode evaluator for immutable data than you can write an efficient retained mode gui library."
                    }
                ]
            }
        ]
    }
]